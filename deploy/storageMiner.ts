import { ethers } from "hardhat";
import { utils } from 'ethers'
import { BigNumber } from "ethers";

async function main() {
  const contract_address = '0xF390caaF4FF0d297e0b4C3c1527D707C75541736'        // Miner on Amoy
  // const contract_address = '0x1e5132495cdaBac628aB9F5c306722e33f69aa24'           // Badge on Polygon

  for(let index = 0 ; index < 30; index ++) {
    let itemData = await ethers.provider.getStorageAt(contract_address, 350 + index) 
    console.log("555555555555555:", itemData)
  }

  const whiteListBatchPoolIndexHeadSlot = utils.keccak256(
    utils.defaultAbiCoder.encode(['uint256', 'uint256'],  [0 , 365])
  )

  const whiteListBatchPoolIndexTailSlot = utils.keccak256(
    utils.defaultAbiCoder.encode(['uint256', 'uint256'],  [0 , 366])
  )

  //const whiteListMinerBatch  = await ethers.provider.getStorageAt(contract_address, whiteListMinerBatchSlot) 
  const whiteListBatchPoolIndexHead  = await ethers.provider.getStorageAt(contract_address, whiteListBatchPoolIndexHeadSlot) 
  const whiteListBatchPoolIndexTail  = await ethers.provider.getStorageAt(contract_address, whiteListBatchPoolIndexTailSlot) 

  console.log("AAAAAAAAAA", whiteListBatchPoolIndexHeadSlot, whiteListBatchPoolIndexHead, whiteListBatchPoolIndexTail)

  const start = BigNumber.from(whiteListBatchPoolIndexHead)
  const end  = BigNumber.from(whiteListBatchPoolIndexTail)
  
  for(let index = start.toNumber(); index < end.toNumber(); index++) {
    const whiteListMinerBatchSlot = utils.keccak256(
      utils.defaultAbiCoder.encode(['uint256', 'uint256'],  [index , 362])
    )
    const miner  = await ethers.provider.getStorageAt(contract_address, whiteListMinerBatchSlot) 
    console.log("\r\n whiteListMinerBatch in index:", index, miner, BigNumber.from(miner).toHexString())
  }  
}

/*
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0xf9560c3e8063d493dee5d4bf1f3ab0f785756c7bea1e19f5e379d41c45fda7b1
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000004
555555555555555: 0x68747470733a2f2f7777772e61726b7265656e2e636f6d2f6d696e6572732f3e
555555555555555: 0x000000000000000000000000d092e1f47d4e5d1c1a3958d7010005e8e9b48206
555555555555555: 0x0000000000000000000000000ae690aad8663aab12a671a6a0d74242332de85f
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
555555555555555: 0x0000000000000000000000000000000000000000000000000000000000000000
*/

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});


// yarn storageMiner:matic_test
