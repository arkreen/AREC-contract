{
  "address": "0xBB17d9b933F631024cA4cF45391E7302CD527489",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "ARTPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "artAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payAmount",
          "type": "uint256"
        }
      ],
      "name": "ARTSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountDeposit",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addNewART",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "artSaleInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundReceiver",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amountDeposited",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amountSold",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenPay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenART",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountART",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExactPay",
          "type": "bool"
        }
      ],
      "name": "buyART",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenART",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountART",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExactPay",
          "type": "bool"
        }
      ],
      "name": "buyARTNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenART",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountART",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExactPay",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Signature",
          "name": "permitToPay",
          "type": "tuple"
        }
      ],
      "name": "buyARTWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "changeARTOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyInToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "changeSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountDeposit",
          "type": "uint256"
        }
      ],
      "name": "depositART",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "forwarders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "native",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "saleIncome",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "priceForSale",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amountReceived",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "setFundReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "artToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payToken",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x96c7a34a5c0583d3c108abbb392c7a99c7be3ad2a117da8c04fafe4d38b5a04b",
  "receipt": {
    "to": null,
    "from": "0xB53B96e1eF29cB14313c18Fa6374AB87df59BcD9",
    "contractAddress": "0xBB17d9b933F631024cA4cF45391E7302CD527489",
    "transactionIndex": 2,
    "gasUsed": "2179947",
    "logsBloom": "0x
    "blockHash": "0x7fd637e6fc471e0edfc03e24e52cab87fe7ac172ff8bca21bcad07b4386c5e42",
    "transactionHash": "0x96c7a34a5c0583d3c108abbb392c7a99c7be3ad2a117da8c04fafe4d38b5a04b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 43487806,
        "transactionHash": "0x96c7a34a5c0583d3c108abbb392c7a99c7be3ad2a117da8c04fafe4d38b5a04b",
        "address": "0xBB17d9b933F631024cA4cF45391E7302CD527489",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0x7fd637e6fc471e0edfc03e24e52cab87fe7ac172ff8bca21bcad07b4386c5e42"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 43487806,
        "transactionHash": "0x96c7a34a5c0583d3c108abbb392c7a99c7be3ad2a117da8c04fafe4d38b5a04b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b53b96e1ef29cb14313c18fa6374ab87df59bcd9",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000135ca02654dc5000000000000000000000000000000000000000000000000007d83877e2f641fd00000000000000000000000000000000000000000000044f76006b19a6c6e72e00000000000000000000000000000000000000000000000007c4dbd7bca165ad00000000000000000000000000000000000000000000044f7613c7b9cd1bc37e",
        "logIndex": 4,
        "blockHash": "0x7fd637e6fc471e0edfc03e24e52cab87fe7ac172ff8bca21bcad07b4386c5e42"
      }
    ],
    "blockNumber": 43487806,
    "cumulativeGasUsed": "2563330",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dee2280988a47c553318547fc5053913",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ARTPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"ARTSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addNewART\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"artSaleInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountDeposited\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountSold\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenPay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExactPay\",\"type\":\"bool\"}],\"name\":\"buyART\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExactPay\",\"type\":\"bool\"}],\"name\":\"buyARTNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenART\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountART\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExactPay\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"permitToPay\",\"type\":\"tuple\"}],\"name\":\"buyARTWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"changeARTOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyInToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposit\",\"type\":\"uint256\"}],\"name\":\"depositART\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"forwarders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"native\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"saleIncome\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"priceForSale\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountReceived\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setFundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNewART(address,address)\":{\"details\":\"Add new type of ART token and the controller, only can be called by the owner\",\"params\":{\"artToken\":\"Token address of the ART to add\",\"controller\":\"Address of the controller of the ART token\"}},\"buyARTNative(address,uint256,bool)\":{\"details\":\"Buy the ART token, then offset the bought ART and mint a cliamte badge.\",\"params\":{\"amountART\":\"The amount of the ART token.                  if isExactPay is true, amountART means the minumum ART token to receive, which may be zero for no checking.                  if isExactPay is false, amountART is the amount of ART token to receive.\",\"isExactPay\":\"Which amount is the exact amount                  = true,  msg.value is the exact amount of the payment token to pay.                  = false, amountART is the exact amount of the ART token to receive.\",\"tokenART\":\"The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\"}},\"changeARTOwner(address,address)\":{\"details\":\"Change/shift the controller of the ART token\",\"params\":{\"artToken\":\"Address of the ART token to change controller\",\"newController\":\"Address of the new controller\"}},\"changeSalePrice(address,address,uint256)\":{\"details\":\"Change the ART sale price based on the buyInToken. Price-zero means not-supporting\",\"params\":{\"artToken\":\"Address of the ART token to sell. The bank contract support multiple ART tokens.\",\"buyInToken\":\"Address of the payment token used to buy ART. \",\"price\":\"Price of the ART token priced in payment token, 1 ART = X payment token.  \"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"depositART(address,uint256)\":{\"details\":\"Deposit various ART token to the bank, only callable by the controller.\",\"params\":{\"amountDeposit\":\"Amount of the ART to deposit.\",\"artToken\":\"Token address of the ART to deposit. \"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFundReceiver(address,address)\":{\"details\":\"Set the income receiver address\",\"params\":{\"artToken\":\"Address of the ART token to set receiver\",\"receiver\":\"Address of the receiver\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(address,address)\":{\"details\":\"Withdraw all the sales income\",\"params\":{\"artToken\":\"Address of the ART token to withdraw\",\"payToken\":\"Address of the payment token to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArkreenRECBank.sol\":\"ArkreenRECBank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"contracts/ArkreenRECBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\r\\n\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Permit.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\n\\r\\n// Import this file to use console.log\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nstruct IncomeInfo {\\r\\n    uint128     priceForSale;           // 1 ART -> X Payment token\\r\\n    uint128     amountReceived;         // Amount of payment token received\\r\\n}\\r\\n\\r\\nstruct SaleInfo {\\r\\n    address     controller;             // Address of the ART token controller\\r\\n    address     fundReceiver;           // Address of the receiver while withdrawing the sale income  \\r\\n    uint128     amountDeposited;        // The amount of ART deposited to this bank contract\\r\\n    uint128     amountSold;             // The amount of ART already sold out\\r\\n}\\r\\n\\r\\nstruct Signature {\\r\\n    address     token;\\r\\n    uint256     value;\\r\\n    uint256     deadline;  \\r\\n    uint8       v;\\r\\n    bytes32     r;\\r\\n    bytes32     s;              \\r\\n}\\r\\n\\r\\ncontract ArkreenRECBank is\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    // Public variables\\r\\n    address public tokenNative;                                             // The wrapped token of the Native token, such as WETH, WMATIC\\r\\n    mapping(address => bool) public forwarders;                             // All forwarders acceptable\\r\\n    mapping(address => mapping(address => IncomeInfo)) public saleIncome;   // Mapping X-ART -> Payment Token -> SaleInfo, price zero means not-supported\\r\\n    mapping(address => SaleInfo) public artSaleInfo;                        // All ART deposit and sale info. If deposit is zero, it means not-supported\\r\\n\\r\\n    // Events\\r\\n    event ARTSold(address indexed artToken, address indexed payToken, uint256 artAmount, uint256 payAmount);\\r\\n    event ARTPriceChanged(address indexed artToken, address indexed payToken, uint256 newPrice);   \\r\\n    event Deposit(address indexed artToken, uint256 amountDeposit);    \\r\\n    event Withdraw(address indexed artToken, address indexed payToken, uint256 balance);   \\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address native) external virtual initializer {\\r\\n        __Ownable_init_unchained();\\r\\n        __UUPSUpgradeable_init(); \\r\\n        tokenNative = native;       \\r\\n    }\\r\\n\\r\\n    function postUpdate() external onlyProxy onlyOwner \\r\\n    {}\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\\r\\n    {}    \\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == tokenNative); // only accept WMATIC via fallback from the WMATIC contract\\r\\n    }\\r\\n\\r\\n    function buyART(\\r\\n        address             tokenPay,\\r\\n        address             tokenART,\\r\\n        uint256             amountPay,\\r\\n        uint256             amountART,\\r\\n        bool                isExactPay\\r\\n    ) external {\\r\\n        _buyART (msg.sender, _msgSender(), tokenPay, tokenART, amountPay, amountART, isExactPay);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev Buy the ART token, then offset the bought ART and mint a cliamte badge.\\r\\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\\r\\n     * @param amountART The amount of the ART token.\\r\\n     *                  if isExactPay is true, amountART means the minumum ART token to receive, which may be zero for no checking.\\r\\n     *                  if isExactPay is false, amountART is the amount of ART token to receive.\\r\\n     * @param isExactPay Which amount is the exact amount\\r\\n     *                  = true,  msg.value is the exact amount of the payment token to pay.\\r\\n     *                  = false, amountART is the exact amount of the ART token to receive.\\r\\n     */\\r\\n    function buyARTNative(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        bool                isExactPay\\r\\n    ) external payable {\\r\\n\\r\\n        uint256 priceSale = saleIncome[tokenART][tokenNative].priceForSale;\\r\\n        require (priceSale !=0, 'ARBK: Payment token not allowed');\\r\\n        \\r\\n        uint256 amountPay =  msg.value;\\r\\n        address receiver = _msgSender();\\r\\n        if(isExactPay) {\\r\\n            uint256 amountARTReal = amountPay * (10**9) / priceSale;                    // ART decimal is always 9, so hardcoded here\\r\\n            require (amountARTReal >= amountART, 'ARBK: Get Less');\\r\\n\\r\\n            saleIncome[tokenART][tokenNative].amountReceived += uint128(amountPay);     // Native Token already received\\r\\n\\r\\n            TransferHelper.safeTransfer(tokenART, receiver, amountARTReal);\\r\\n            artSaleInfo[tokenART].amountSold += uint128(amountARTReal);\\r\\n\\r\\n            emit ARTSold(tokenART, tokenNative, amountARTReal, amountPay);\\r\\n        } else {\\r\\n            uint256 amountPayReal = (amountART * priceSale + (10**9) -1) / (10**9);       // ART decimal is always 9, so hardcoded here\\r\\n            require (amountPay >= amountPayReal, 'ARBK: Pay Less');                       // amountPay plays as the maximum to pay\\r\\n\\r\\n            saleIncome[tokenART][tokenNative].amountReceived += uint128(amountPayReal);\\r\\n\\r\\n            TransferHelper.safeTransfer(tokenART, receiver, amountART);\\r\\n            artSaleInfo[tokenART].amountSold += uint128(amountART);\\r\\n\\r\\n            if(amountPay > amountPayReal) TransferHelper.safeTransferETH(msg.sender, amountPay - amountPayReal);\\r\\n\\r\\n            emit ARTSold(tokenART, tokenNative, amountART, amountPayReal);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buyARTWithPermit(\\r\\n        address             tokenART,\\r\\n        uint256             amountART,\\r\\n        bool                isExactPay,\\r\\n        Signature calldata  permitToPay\\r\\n    ) external  {                       // Deadline will be checked by router, no need to check here.\\r\\n        // Permit payment token\\r\\n        address payer = _msgSender();\\r\\n        IERC20Permit(permitToPay.token).permit(payer, address(this), \\r\\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\\r\\n\\r\\n        // Transfer payement \\r\\n        _buyART(payer, payer, permitToPay.token, tokenART, permitToPay.value, amountART, isExactPay);\\r\\n    }\\r\\n\\r\\n    function _buyART(\\r\\n        address             payer,\\r\\n        address             receiver,\\r\\n        address             tokenPay,\\r\\n        address             tokenART,\\r\\n        uint256             amountPay,\\r\\n        uint256             amountART,\\r\\n        bool                isExactPay\\r\\n    ) internal {\\r\\n\\r\\n        // priceSale: 1 ART = priceSale (Payment Tokens), for example:\\r\\n        // 1 ART = 5 USDC, priceSale = 5 000 000\\r\\n        // 1 ART = 8 MATIC, priceSale = 8 * (10**18), as decial of MATIC is 18 \\r\\n        uint256 priceSale = saleIncome[tokenART][tokenPay].priceForSale;\\r\\n        require (priceSale != 0, 'ARBK: Payment token not allowed');\\r\\n        \\r\\n        if(isExactPay) {\\r\\n            uint256 amountARTReal = amountPay * (10**9) / priceSale;          // ART decimal is always 9, so hardcoded here\\r\\n            require (amountARTReal >= amountART, 'ARBK: Get Less');           // amountART is the minimum ART desired to receive\\r\\n\\r\\n            TransferHelper.safeTransferFrom(tokenPay, payer, address(this), amountPay);\\r\\n            saleIncome[tokenART][tokenPay].amountReceived += uint128(amountPay);    // Assmume never overflow, as it is big as (3.4 *10**20)\\r\\n\\r\\n            TransferHelper.safeTransfer(tokenART, receiver, amountARTReal);\\r\\n            artSaleInfo[tokenART].amountSold += uint128(amountARTReal);\\r\\n\\r\\n            emit ARTSold(tokenART, tokenPay, amountARTReal, amountPay);\\r\\n        } else {\\r\\n            // The minimum payment is 1 (Payment Token) to avoid attack buying very small amount of ART tokens\\r\\n            uint256 amountPayReal = (amountART * priceSale + (10**9) -1 ) / (10**9);    // ART decimal is always 9, so hardcoded here            \\r\\n            require (amountPayReal <= amountPay, 'ARBK: Pay Less');                     // amountPay is the maximum payment \\r\\n\\r\\n            TransferHelper.safeTransferFrom(tokenPay, payer, address(this), amountPayReal);\\r\\n            saleIncome[tokenART][tokenPay].amountReceived += uint128(amountPayReal);    // Assmume never overflow\\r\\n\\r\\n            TransferHelper.safeTransfer(tokenART, receiver, amountART);\\r\\n            artSaleInfo[tokenART].amountSold += uint128(amountART);\\r\\n\\r\\n            emit ARTSold(tokenART, tokenPay, amountART, amountPayReal);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change the ART sale price based on the buyInToken. Price-zero means not-supporting\\r\\n     * @param artToken Address of the ART token to sell. The bank contract support multiple ART tokens.\\r\\n     * @param buyInToken Address of the payment token used to buy ART. \\r\\n     * @param price Price of the ART token priced in payment token, 1 ART = X payment token.  \\r\\n    */\\r\\n    function changeSalePrice(address artToken, address buyInToken, uint256 price ) external {\\r\\n        require (msg.sender == artSaleInfo[artToken].controller, \\\"ARBK: Not allowed\\\");\\r\\n        saleIncome[artToken][buyInToken].priceForSale = uint128(price);\\r\\n        emit ARTPriceChanged(artToken, buyInToken, price);    \\r\\n    }  \\r\\n\\r\\n    /**\\r\\n     * @dev Add new type of ART token and the controller, only can be called by the owner\\r\\n     * @param artToken Token address of the ART to add\\r\\n     * @param controller Address of the controller of the ART token\\r\\n     */\\r\\n    function addNewART(address artToken, address controller) external onlyOwner {\\r\\n        require (controller != address(0), \\\"ARBK: Zero Address\\\");\\r\\n        require (artSaleInfo[artToken].controller == address(0), \\\"ARBK: Already Added\\\");\\r\\n        artSaleInfo[artToken].controller = controller;\\r\\n    }  \\r\\n\\r\\n    /**\\r\\n     * @dev Change/shift the controller of the ART token\\r\\n     * @param artToken Address of the ART token to change controller\\r\\n     * @param newController Address of the new controller\\r\\n     */\\r\\n    function changeARTOwner(address artToken, address newController) external {\\r\\n        address caller = msg.sender;\\r\\n        require( caller ==  owner() || caller == artSaleInfo[artToken].controller, \\\"ARBK: Not allowed\\\");\\r\\n        require (newController != address(0), \\\"ARBK: Zero Address\\\");\\r\\n\\r\\n        artSaleInfo[artToken].controller = newController;\\r\\n    }  \\r\\n\\r\\n    /**\\r\\n     * @dev Deposit various ART token to the bank, only callable by the controller.\\r\\n     * @param artToken Token address of the ART to deposit. \\r\\n     * @param amountDeposit Amount of the ART to deposit.\\r\\n     */\\r\\n    function depositART(address artToken, uint256 amountDeposit) external {\\r\\n        require (msg.sender == artSaleInfo[artToken].controller, \\\"ARBK: Not allowed\\\");\\r\\n\\r\\n        uint256 amount = artSaleInfo[artToken].amountDeposited;\\r\\n        require ((amount = (amount + amountDeposit)) < type(uint128).max, \\\"ARBK: Deposit overflowed\\\" );\\r\\n\\r\\n        TransferHelper.safeTransferFrom(artToken, msg.sender, address(this), amountDeposit);\\r\\n        artSaleInfo[artToken].amountDeposited = uint128(amount);\\r\\n        emit Deposit(artToken, amountDeposit);\\r\\n    }  \\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw all the sales income\\r\\n     * @param artToken Address of the ART token to withdraw\\r\\n     * @param payToken Address of the payment token to withdraw\\r\\n     */\\r\\n    function withdraw(address artToken, address payToken) external {\\r\\n        require (msg.sender == artSaleInfo[artToken].controller, \\\"ARBK: Not allowed\\\");\\r\\n\\r\\n        address receiver = artSaleInfo[artToken].fundReceiver;\\r\\n        if (receiver == address(0)) receiver = msg.sender;\\r\\n\\r\\n        uint256 balance = saleIncome[artToken][payToken].amountReceived;\\r\\n        if (payToken == tokenNative) {\\r\\n            uint256 amountNative=  IERC20(tokenNative).balanceOf(address(this));\\r\\n            IWETH(tokenNative).withdraw(amountNative);\\r\\n            TransferHelper.safeTransferETH(receiver, balance);\\r\\n        }    \\r\\n        else {\\r\\n            TransferHelper.safeTransfer(payToken, receiver, balance);\\r\\n        }\\r\\n        emit Withdraw(artToken, payToken, balance);    \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the income receiver address\\r\\n     * @param artToken Address of the ART token to set receiver\\r\\n     * @param receiver Address of the receiver\\r\\n     */\\r\\n    function setFundReceiver(address artToken, address receiver) external {\\r\\n        require (msg.sender == artSaleInfo[artToken].controller, \\\"ARBK: Not allowed\\\");\\r\\n        artSaleInfo[artToken].fundReceiver = receiver;\\r\\n    } \\r\\n\\r\\n    function _msgSender() internal override view returns (address sender) {\\r\\n        sender = msg.sender;\\r\\n        if (msg.data.length >= 20 && forwarders[sender]) {\\r\\n            assembly {\\r\\n                sender := shr(96,calldataload(sub(calldatasize(),20)))\\r\\n            }\\r\\n        }    \\r\\n    }\\r\\n\\r\\n    function setForwarder(address forwarder, bool active) external onlyOwner {\\r\\n        forwarders[forwarder] = active;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x883d464d531f81d2758f5b6a11d2727c7b097c9071c0fa21722d6e9d65d243d5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6e4e13a8830b530c2eed2fc7057796b855f3cb7c9799c9170643dc393ad29ba7\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as th xe allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xafc6e2e446ff03a1c9fde3973490365d42b87c9076defdab312778dcbf2da972\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x0e12e853889baf7ac541a5a534a7bea526677e010a2eec75a2caafe91f5a92ce\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0xb84058fe812260e89968aff2b7a155ed113b3a6431e43790d25e6b0d164b4050\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516126006200012e600039600081816106a9015281816106e901528181610ad501528181610b1501528181610b9101528181610d240152610d6401526126006000f3fe6080604052600436106101095760003560e01c806305f97b0b1461012f578063323cb71a1461014f5780633612cf251461016f5780633659cfe6146101e057806340756b2e146102005780634f1ef2861461021357806352d1902d1461022657806355816f6c146102495780635ee2331b1461026957806364201ad41461030057806368f50b8a14610320578063715018a61461034d5780637238fca814610362578063818f8b98146103775780638da5cb5b1461039757806391d98456146103ac5780639c019a5b146103cc578063c4d66de8146103ec578063f2fde38b1461040c578063f46d57c31461042c578063f73afdba1461046c578063f940e3851461048c57600080fd5b3661012a5760c9546001600160a01b0316331461012857610128611f31565b005b600080fd5b34801561013b57600080fd5b5061012861014a366004611f63565b6104ac565b34801561015b57600080fd5b5061012861016a366004611f96565b61056f565b34801561017b57600080fd5b506101bb61018a366004611f63565b60cb6020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152015b60405180910390f35b3480156101ec57600080fd5b506101286101fb366004611fc0565b61069e565b61012861020e366004611fe9565b610767565b61012861022136600461203f565b610aca565b34801561023257600080fd5b5061023b610b84565b6040519081526020016101d7565b34801561025557600080fd5b50610128610264366004611f63565b610c33565b34801561027557600080fd5b506102c6610284366004611fc0565b60cc602052600090815260409020805460018201546002909201546001600160a01b0391821692909116906001600160801b0380821691600160801b90041684565b604080516001600160a01b0395861681529490931660208501526001600160801b03918216928401929092521660608201526080016101d7565b34801561030c57600080fd5b5061012861031b366004612100565b610ce8565b34801561032c57600080fd5b5060c954610340906001600160a01b031681565b6040516101d7919061215b565b34801561035957600080fd5b50610128610d05565b34801561036e57600080fd5b50610128610d19565b34801561038357600080fd5b50610128610392366004611f63565b610dc2565b3480156103a357600080fd5b50610340610e2c565b3480156103b857600080fd5b506101286103c736600461216f565b610e3b565b3480156103d857600080fd5b506101286103e73660046121ab565b610eeb565b3480156103f857600080fd5b50610128610407366004611fc0565b610fdb565b34801561041857600080fd5b50610128610427366004611fc0565b611116565b34801561043857600080fd5b5061045c610447366004611fc0565b60ca6020526000908152604090205460ff1681565b60405190151581526020016101d7565b34801561047857600080fd5b50610128610487366004612205565b61118c565b34801561049857600080fd5b506101286104a7366004611f63565b6111bf565b6104b46113b0565b6001600160a01b0381166104e35760405162461bcd60e51b81526004016104da9061223c565b60405180910390fd5b6001600160a01b03828116600090815260cc602052604090205416156105415760405162461bcd60e51b815260206004820152601360248201527210549092ce88105b1c9958591e481059191959606a1b60448201526064016104da565b6001600160a01b03918216600090815260cc6020526040902080546001600160a01b03191691909216179055565b6001600160a01b03828116600090815260cc60205260409020541633146105a85760405162461bcd60e51b81526004016104da90612268565b6001600160a01b038216600090815260cc60205260409020600201546001600160801b03908116906105da83836122a9565b915081106106255760405162461bcd60e51b815260206004820152601860248201527710549092ce8811195c1bdcda5d081bdd995c999b1bddd95960421b60448201526064016104da565b6106318333308561141f565b6001600160a01b038316600081815260cc602090815260409182902060020180546001600160801b0319166001600160801b03861617905590518481527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c910160405180910390a2505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106e75760405162461bcd60e51b81526004016104da906122c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610719611547565b6001600160a01b03161461073f5760405162461bcd60e51b81526004016104da906122fb565b61074881611563565b604080516000808252602082019092526107649183919061156b565b50565b6001600160a01b03808416600090815260cb6020908152604080832060c954909416835292905220546001600160801b0316806107b65760405162461bcd60e51b81526004016104da90612335565b3460006107c16116ea565b90508315610938576000836107da84633b9aca0061236c565b6107e4919061238b565b9050858110156108065760405162461bcd60e51b81526004016104da906123ad565b6001600160a01b03878116600090815260cb6020908152604080832060c9549094168352929052208054849190601090610851908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610880878383611726565b6001600160a01b038716600090815260cc6020526040902060020180548291906010906108be908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060c960009054906101000a90046001600160a01b03166001600160a01b0316876001600160a01b03166000805160206125ad833981519152838660405161092a929190612400565b60405180910390a350610ac2565b6000633b9aca00600161094b868961236c565b61095990633b9aca006122a9565b610963919061240e565b61096d919061238b565b90508083101561098f5760405162461bcd60e51b81526004016104da90612425565b6001600160a01b03878116600090815260cb6020908152604080832060c95490941683529290522080548291906010906109da908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610a09878388611726565b6001600160a01b038716600090815260cc602052604090206002018054879190601090610a47908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555080831115610a8657610a8633610a81838661240e565b61183a565b60c9546040516001600160a01b03918216918916906000805160206125ad83398151915290610ab8908a908690612400565b60405180910390a3505b505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b135760405162461bcd60e51b81526004016104da906122c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b45611547565b6001600160a01b031614610b6b5760405162461bcd60e51b81526004016104da906122fb565b610b7482611563565b610b808282600161156b565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c1f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60648201526084016104da565b5060008051602061258d8339815191525b90565b33610c3c610e2c565b6001600160a01b0316816001600160a01b03161480610c7757506001600160a01b03808416600090815260cc60205260409020548282169116145b610c935760405162461bcd60e51b81526004016104da90612268565b6001600160a01b038216610cb95760405162461bcd60e51b81526004016104da9061223c565b506001600160a01b03918216600090815260cc6020526040902080546001600160a01b03191691909216179055565b610cfe33610cf46116ea565b8787878787611903565b5050505050565b610d0d6113b0565b610d176000611c3b565b565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d625760405162461bcd60e51b81526004016104da906122c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d94611547565b6001600160a01b031614610dba5760405162461bcd60e51b81526004016104da906122fb565b610d176113b0565b6001600160a01b03828116600090815260cc6020526040902054163314610dfb5760405162461bcd60e51b81526004016104da90612268565b6001600160a01b03918216600090815260cc6020526040902060010180546001600160a01b03191691909216179055565b6033546001600160a01b031690565b6001600160a01b03838116600090815260cc6020526040902054163314610e745760405162461bcd60e51b81526004016104da90612268565b6001600160a01b03838116600081815260cb602090815260408083209487168084529482529182902080546001600160801b0319166001600160801b03871617905590518481527f30bc8cc2050dc4ca2dd7674ca5289013e83891d0dd0665c50bc57eb33764abeb910160405180910390a3505050565b6000610ef56116ea565b9050610f046020830183611fc0565b6001600160a01b031663d505accf823060208601356040870135610f2e6080890160608a0161244d565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff166084820152608085013560a482015260a085013560c482015260e401600060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b50610cfe9250839150819050610fce6020860186611fc0565b8886602001358989611903565b600054610100900460ff1615808015610ffb5750600054600160ff909116105b8061101c575061100a30611c8d565b15801561101c575060005460ff166001145b61107f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104da565b6000805460ff1916600117905580156110a2576000805461ff0019166101001790555b6110aa611c9c565b6110b2611cd3565b60c980546001600160a01b0319166001600160a01b0384161790558015610b80576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b61111e6113b0565b6001600160a01b0381166111835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104da565b61076481611c3b565b6111946113b0565b6001600160a01b0391909116600090815260ca60205260409020805460ff1916911515919091179055565b6001600160a01b03828116600090815260cc60205260409020541633146111f85760405162461bcd60e51b81526004016104da90612268565b6001600160a01b03808316600090815260cc6020526040902060010154168061121e5750335b6001600160a01b03838116600090815260cb6020908152604080832086851680855292529091205460c954600160801b9091046001600160801b0316921614156113525760c9546040516370a0823160e01b81526000916001600160a01b0316906370a082319061129390309060040161215b565b60206040518083038186803b1580156112ab57600080fd5b505afa1580156112bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e39190612470565b60c954604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561132a57600080fd5b505af115801561133e573d6000803e3d6000fd5b5050505061134c838361183a565b5061135d565b61135d838383611726565b826001600160a01b0316846001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836040516113a291815260200190565b60405180910390a350505050565b6113b86116ea565b6001600160a01b03166113c9610e2c565b6001600160a01b031614610d175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161148391906124b5565b6000604051808303816000865af19150503d80600081146114c0576040519150601f19603f3d011682016040523d82523d6000602084013e6114c5565b606091505b50915091508180156114ef5750805115806114ef5750808060200190518101906114ef91906124d1565b610ac25760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016104da565b60008051602061258d833981519152546001600160a01b031690565b6107646113b0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115a35761159e83611cfa565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115dc57600080fd5b505afa92505050801561160c575060408051601f3d908101601f1916820190925261160991810190612470565b60015b61166f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104da565b60008051602061258d83398151915281146116de5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104da565b5061159e838383611d94565b336014361080159061171457506001600160a01b038116600090815260ca602052604090205460ff165b15610c30575060131936013560601c90565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161178291906124b5565b6000604051808303816000865af19150503d80600081146117bf576040519150601f19603f3d011682016040523d82523d6000602084013e6117c4565b606091505b50915091508180156117ee5750805115806117ee5750808060200190518101906117ee91906124d1565b610cfe5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016104da565b604080516000808252602082019092526001600160a01b03841690839060405161186491906124b5565b60006040518083038185875af1925050503d80600081146118a1576040519150601f19603f3d011682016040523d82523d6000602084013e6118a6565b606091505b505090508061159e5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016104da565b6001600160a01b03808516600090815260cb60209081526040808320938916835292905220546001600160801b03168061194f5760405162461bcd60e51b81526004016104da90612335565b8115611ab85760008161196686633b9aca0061236c565b611970919061238b565b9050838110156119925760405162461bcd60e51b81526004016104da906123ad565b61199e878a308861141f565b6001600160a01b03868116600090815260cb60209081526040808320938b1683529290522080548691906010906119e6908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611a15868983611726565b6001600160a01b038616600090815260cc602052604090206002018054829190601090611a53908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550866001600160a01b0316866001600160a01b03166000805160206125ad8339815191528388604051611aaa929190612400565b60405180910390a350611c31565b6000633b9aca006001611acb848761236c565b611ad990633b9aca006122a9565b611ae3919061240e565b611aed919061238b565b905084811115611b0f5760405162461bcd60e51b81526004016104da90612425565b611b1b878a308461141f565b6001600160a01b03868116600090815260cb60209081526040808320938b168352929052208054829190601090611b63908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611b92868986611726565b6001600160a01b038616600090815260cc602052604090206002018054859190601090611bd0908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550866001600160a01b0316866001600160a01b03166000805160206125ad8339815191528684604051611c27929190612400565b60405180910390a3505b5050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03163b151590565b600054610100900460ff16611cc35760405162461bcd60e51b81526004016104da906124ee565b610d17611cce6116ea565b611c3b565b600054610100900460ff16610d175760405162461bcd60e51b81526004016104da906124ee565b611d0381611c8d565b611d655760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104da565b60008051602061258d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611d9d83611dbf565b600082511180611daa5750805b1561159e57611db98383611dff565b50505050565b611dc881611cfa565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611e0a83611c8d565b611e655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104da565b600080846001600160a01b031684604051611e8091906124b5565b600060405180830381855af49150503d8060008114611ebb576040519150601f19603f3d011682016040523d82523d6000602084013e611ec0565b606091505b5091509150611ee882826040518060600160405280602781526020016125cd60279139611ef1565b95945050505050565b60608315611f00575081611f2a565b825115611f105782518084602001fd5b8160405162461bcd60e51b81526004016104da9190612539565b9392505050565b634e487b7160e01b600052600160045260246000fd5b80356001600160a01b0381168114611f5e57600080fd5b919050565b60008060408385031215611f7657600080fd5b611f7f83611f47565b9150611f8d60208401611f47565b90509250929050565b60008060408385031215611fa957600080fd5b611fb283611f47565b946020939093013593505050565b600060208284031215611fd257600080fd5b611f2a82611f47565b801515811461076457600080fd5b600080600060608486031215611ffe57600080fd5b61200784611f47565b925060208401359150604084013561201e81611fdb565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561205257600080fd5b61205b83611f47565b915060208301356001600160401b038082111561207757600080fd5b818501915085601f83011261208b57600080fd5b81358181111561209d5761209d612029565b604051601f8201601f19908116603f011681019083821181831017156120c5576120c5612029565b816040528281528860208487010111156120de57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080600060a0868803121561211857600080fd5b61212186611f47565b945061212f60208701611f47565b93506040860135925060608601359150608086013561214d81611fdb565b809150509295509295909350565b6001600160a01b0391909116815260200190565b60008060006060848603121561218457600080fd5b61218d84611f47565b925061219b60208501611f47565b9150604084013590509250925092565b6000806000808486036101208112156121c357600080fd5b6121cc86611f47565b94506020860135935060408601356121e381611fdb565b925060c0605f19820112156121f757600080fd5b509295919450926060019150565b6000806040838503121561221857600080fd5b61222183611f47565b9150602083013561223181611fdb565b809150509250929050565b6020808252601290820152714152424b3a205a65726f204164647265737360701b604082015260600190565b60208082526011908201527010549092ce88139bdd08185b1b1bddd959607a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156122bc576122bc612293565b500190565b6020808252602c9082015260008051602061256d83398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c9082015260008051602061256d83398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601f908201527f4152424b3a205061796d656e7420746f6b656e206e6f7420616c6c6f77656400604082015260600190565b600081600019048311821515161561238657612386612293565b500290565b6000826123a857634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600e908201526d4152424b3a20476574204c65737360901b604082015260600190565b60006001600160801b038281168482168083038211156123f7576123f7612293565b01949350505050565b918252602082015260400190565b60008282101561242057612420612293565b500390565b6020808252600e908201526d4152424b3a20506179204c65737360901b604082015260600190565b60006020828403121561245f57600080fd5b813560ff81168114611f2a57600080fd5b60006020828403121561248257600080fd5b5051919050565b60005b838110156124a457818101518382015260200161248c565b83811115611db95750506000910152565b600082516124c7818460208701612489565b9190910192915050565b6000602082840312156124e357600080fd5b8151611f2a81611fdb565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020815260008251806020840152612558816040850160208701612489565b601f01601f1916919091016040019291505056fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcdf4b02da5c879b7326859498241ac3e7c6577d5742e4aea56697af520665b55c416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000809000a",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c806305f97b0b1461012f578063323cb71a1461014f5780633612cf251461016f5780633659cfe6146101e057806340756b2e146102005780634f1ef2861461021357806352d1902d1461022657806355816f6c146102495780635ee2331b1461026957806364201ad41461030057806368f50b8a14610320578063715018a61461034d5780637238fca814610362578063818f8b98146103775780638da5cb5b1461039757806391d98456146103ac5780639c019a5b146103cc578063c4d66de8146103ec578063f2fde38b1461040c578063f46d57c31461042c578063f73afdba1461046c578063f940e3851461048c57600080fd5b3661012a5760c9546001600160a01b0316331461012857610128611f31565b005b600080fd5b34801561013b57600080fd5b5061012861014a366004611f63565b6104ac565b34801561015b57600080fd5b5061012861016a366004611f96565b61056f565b34801561017b57600080fd5b506101bb61018a366004611f63565b60cb6020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152015b60405180910390f35b3480156101ec57600080fd5b506101286101fb366004611fc0565b61069e565b61012861020e366004611fe9565b610767565b61012861022136600461203f565b610aca565b34801561023257600080fd5b5061023b610b84565b6040519081526020016101d7565b34801561025557600080fd5b50610128610264366004611f63565b610c33565b34801561027557600080fd5b506102c6610284366004611fc0565b60cc602052600090815260409020805460018201546002909201546001600160a01b0391821692909116906001600160801b0380821691600160801b90041684565b604080516001600160a01b0395861681529490931660208501526001600160801b03918216928401929092521660608201526080016101d7565b34801561030c57600080fd5b5061012861031b366004612100565b610ce8565b34801561032c57600080fd5b5060c954610340906001600160a01b031681565b6040516101d7919061215b565b34801561035957600080fd5b50610128610d05565b34801561036e57600080fd5b50610128610d19565b34801561038357600080fd5b50610128610392366004611f63565b610dc2565b3480156103a357600080fd5b50610340610e2c565b3480156103b857600080fd5b506101286103c736600461216f565b610e3b565b3480156103d857600080fd5b506101286103e73660046121ab565b610eeb565b3480156103f857600080fd5b50610128610407366004611fc0565b610fdb565b34801561041857600080fd5b50610128610427366004611fc0565b611116565b34801561043857600080fd5b5061045c610447366004611fc0565b60ca6020526000908152604090205460ff1681565b60405190151581526020016101d7565b34801561047857600080fd5b50610128610487366004612205565b61118c565b34801561049857600080fd5b506101286104a7366004611f63565b6111bf565b6104b46113b0565b6001600160a01b0381166104e35760405162461bcd60e51b81526004016104da9061223c565b60405180910390fd5b6001600160a01b03828116600090815260cc602052604090205416156105415760405162461bcd60e51b815260206004820152601360248201527210549092ce88105b1c9958591e481059191959606a1b60448201526064016104da565b6001600160a01b03918216600090815260cc6020526040902080546001600160a01b03191691909216179055565b6001600160a01b03828116600090815260cc60205260409020541633146105a85760405162461bcd60e51b81526004016104da90612268565b6001600160a01b038216600090815260cc60205260409020600201546001600160801b03908116906105da83836122a9565b915081106106255760405162461bcd60e51b815260206004820152601860248201527710549092ce8811195c1bdcda5d081bdd995c999b1bddd95960421b60448201526064016104da565b6106318333308561141f565b6001600160a01b038316600081815260cc602090815260409182902060020180546001600160801b0319166001600160801b03861617905590518481527fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c910160405180910390a2505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106e75760405162461bcd60e51b81526004016104da906122c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610719611547565b6001600160a01b03161461073f5760405162461bcd60e51b81526004016104da906122fb565b61074881611563565b604080516000808252602082019092526107649183919061156b565b50565b6001600160a01b03808416600090815260cb6020908152604080832060c954909416835292905220546001600160801b0316806107b65760405162461bcd60e51b81526004016104da90612335565b3460006107c16116ea565b90508315610938576000836107da84633b9aca0061236c565b6107e4919061238b565b9050858110156108065760405162461bcd60e51b81526004016104da906123ad565b6001600160a01b03878116600090815260cb6020908152604080832060c9549094168352929052208054849190601090610851908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610880878383611726565b6001600160a01b038716600090815260cc6020526040902060020180548291906010906108be908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060c960009054906101000a90046001600160a01b03166001600160a01b0316876001600160a01b03166000805160206125ad833981519152838660405161092a929190612400565b60405180910390a350610ac2565b6000633b9aca00600161094b868961236c565b61095990633b9aca006122a9565b610963919061240e565b61096d919061238b565b90508083101561098f5760405162461bcd60e51b81526004016104da90612425565b6001600160a01b03878116600090815260cb6020908152604080832060c95490941683529290522080548291906010906109da908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610a09878388611726565b6001600160a01b038716600090815260cc602052604090206002018054879190601090610a47908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555080831115610a8657610a8633610a81838661240e565b61183a565b60c9546040516001600160a01b03918216918916906000805160206125ad83398151915290610ab8908a908690612400565b60405180910390a3505b505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b135760405162461bcd60e51b81526004016104da906122c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b45611547565b6001600160a01b031614610b6b5760405162461bcd60e51b81526004016104da906122fb565b610b7482611563565b610b808282600161156b565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c1f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60648201526084016104da565b5060008051602061258d8339815191525b90565b33610c3c610e2c565b6001600160a01b0316816001600160a01b03161480610c7757506001600160a01b03808416600090815260cc60205260409020548282169116145b610c935760405162461bcd60e51b81526004016104da90612268565b6001600160a01b038216610cb95760405162461bcd60e51b81526004016104da9061223c565b506001600160a01b03918216600090815260cc6020526040902080546001600160a01b03191691909216179055565b610cfe33610cf46116ea565b8787878787611903565b5050505050565b610d0d6113b0565b610d176000611c3b565b565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d625760405162461bcd60e51b81526004016104da906122c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d94611547565b6001600160a01b031614610dba5760405162461bcd60e51b81526004016104da906122fb565b610d176113b0565b6001600160a01b03828116600090815260cc6020526040902054163314610dfb5760405162461bcd60e51b81526004016104da90612268565b6001600160a01b03918216600090815260cc6020526040902060010180546001600160a01b03191691909216179055565b6033546001600160a01b031690565b6001600160a01b03838116600090815260cc6020526040902054163314610e745760405162461bcd60e51b81526004016104da90612268565b6001600160a01b03838116600081815260cb602090815260408083209487168084529482529182902080546001600160801b0319166001600160801b03871617905590518481527f30bc8cc2050dc4ca2dd7674ca5289013e83891d0dd0665c50bc57eb33764abeb910160405180910390a3505050565b6000610ef56116ea565b9050610f046020830183611fc0565b6001600160a01b031663d505accf823060208601356040870135610f2e6080890160608a0161244d565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff166084820152608085013560a482015260a085013560c482015260e401600060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b50610cfe9250839150819050610fce6020860186611fc0565b8886602001358989611903565b600054610100900460ff1615808015610ffb5750600054600160ff909116105b8061101c575061100a30611c8d565b15801561101c575060005460ff166001145b61107f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104da565b6000805460ff1916600117905580156110a2576000805461ff0019166101001790555b6110aa611c9c565b6110b2611cd3565b60c980546001600160a01b0319166001600160a01b0384161790558015610b80576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b61111e6113b0565b6001600160a01b0381166111835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104da565b61076481611c3b565b6111946113b0565b6001600160a01b0391909116600090815260ca60205260409020805460ff1916911515919091179055565b6001600160a01b03828116600090815260cc60205260409020541633146111f85760405162461bcd60e51b81526004016104da90612268565b6001600160a01b03808316600090815260cc6020526040902060010154168061121e5750335b6001600160a01b03838116600090815260cb6020908152604080832086851680855292529091205460c954600160801b9091046001600160801b0316921614156113525760c9546040516370a0823160e01b81526000916001600160a01b0316906370a082319061129390309060040161215b565b60206040518083038186803b1580156112ab57600080fd5b505afa1580156112bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e39190612470565b60c954604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561132a57600080fd5b505af115801561133e573d6000803e3d6000fd5b5050505061134c838361183a565b5061135d565b61135d838383611726565b826001600160a01b0316846001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836040516113a291815260200190565b60405180910390a350505050565b6113b86116ea565b6001600160a01b03166113c9610e2c565b6001600160a01b031614610d175760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161148391906124b5565b6000604051808303816000865af19150503d80600081146114c0576040519150601f19603f3d011682016040523d82523d6000602084013e6114c5565b606091505b50915091508180156114ef5750805115806114ef5750808060200190518101906114ef91906124d1565b610ac25760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016104da565b60008051602061258d833981519152546001600160a01b031690565b6107646113b0565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115a35761159e83611cfa565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115dc57600080fd5b505afa92505050801561160c575060408051601f3d908101601f1916820190925261160991810190612470565b60015b61166f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104da565b60008051602061258d83398151915281146116de5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104da565b5061159e838383611d94565b336014361080159061171457506001600160a01b038116600090815260ca602052604090205460ff165b15610c30575060131936013560601c90565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161178291906124b5565b6000604051808303816000865af19150503d80600081146117bf576040519150601f19603f3d011682016040523d82523d6000602084013e6117c4565b606091505b50915091508180156117ee5750805115806117ee5750808060200190518101906117ee91906124d1565b610cfe5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016104da565b604080516000808252602082019092526001600160a01b03841690839060405161186491906124b5565b60006040518083038185875af1925050503d80600081146118a1576040519150601f19603f3d011682016040523d82523d6000602084013e6118a6565b606091505b505090508061159e5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016104da565b6001600160a01b03808516600090815260cb60209081526040808320938916835292905220546001600160801b03168061194f5760405162461bcd60e51b81526004016104da90612335565b8115611ab85760008161196686633b9aca0061236c565b611970919061238b565b9050838110156119925760405162461bcd60e51b81526004016104da906123ad565b61199e878a308861141f565b6001600160a01b03868116600090815260cb60209081526040808320938b1683529290522080548691906010906119e6908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611a15868983611726565b6001600160a01b038616600090815260cc602052604090206002018054829190601090611a53908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550866001600160a01b0316866001600160a01b03166000805160206125ad8339815191528388604051611aaa929190612400565b60405180910390a350611c31565b6000633b9aca006001611acb848761236c565b611ad990633b9aca006122a9565b611ae3919061240e565b611aed919061238b565b905084811115611b0f5760405162461bcd60e51b81526004016104da90612425565b611b1b878a308461141f565b6001600160a01b03868116600090815260cb60209081526040808320938b168352929052208054829190601090611b63908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611b92868986611726565b6001600160a01b038616600090815260cc602052604090206002018054859190601090611bd0908490600160801b90046001600160801b03166123d5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550866001600160a01b0316866001600160a01b03166000805160206125ad8339815191528684604051611c27929190612400565b60405180910390a3505b5050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03163b151590565b600054610100900460ff16611cc35760405162461bcd60e51b81526004016104da906124ee565b610d17611cce6116ea565b611c3b565b600054610100900460ff16610d175760405162461bcd60e51b81526004016104da906124ee565b611d0381611c8d565b611d655760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104da565b60008051602061258d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611d9d83611dbf565b600082511180611daa5750805b1561159e57611db98383611dff565b50505050565b611dc881611cfa565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611e0a83611c8d565b611e655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104da565b600080846001600160a01b031684604051611e8091906124b5565b600060405180830381855af49150503d8060008114611ebb576040519150601f19603f3d011682016040523d82523d6000602084013e611ec0565b606091505b5091509150611ee882826040518060600160405280602781526020016125cd60279139611ef1565b95945050505050565b60608315611f00575081611f2a565b825115611f105782518084602001fd5b8160405162461bcd60e51b81526004016104da9190612539565b9392505050565b634e487b7160e01b600052600160045260246000fd5b80356001600160a01b0381168114611f5e57600080fd5b919050565b60008060408385031215611f7657600080fd5b611f7f83611f47565b9150611f8d60208401611f47565b90509250929050565b60008060408385031215611fa957600080fd5b611fb283611f47565b946020939093013593505050565b600060208284031215611fd257600080fd5b611f2a82611f47565b801515811461076457600080fd5b600080600060608486031215611ffe57600080fd5b61200784611f47565b925060208401359150604084013561201e81611fdb565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561205257600080fd5b61205b83611f47565b915060208301356001600160401b038082111561207757600080fd5b818501915085601f83011261208b57600080fd5b81358181111561209d5761209d612029565b604051601f8201601f19908116603f011681019083821181831017156120c5576120c5612029565b816040528281528860208487010111156120de57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080600060a0868803121561211857600080fd5b61212186611f47565b945061212f60208701611f47565b93506040860135925060608601359150608086013561214d81611fdb565b809150509295509295909350565b6001600160a01b0391909116815260200190565b60008060006060848603121561218457600080fd5b61218d84611f47565b925061219b60208501611f47565b9150604084013590509250925092565b6000806000808486036101208112156121c357600080fd5b6121cc86611f47565b94506020860135935060408601356121e381611fdb565b925060c0605f19820112156121f757600080fd5b509295919450926060019150565b6000806040838503121561221857600080fd5b61222183611f47565b9150602083013561223181611fdb565b809150509250929050565b6020808252601290820152714152424b3a205a65726f204164647265737360701b604082015260600190565b60208082526011908201527010549092ce88139bdd08185b1b1bddd959607a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156122bc576122bc612293565b500190565b6020808252602c9082015260008051602061256d83398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c9082015260008051602061256d83398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601f908201527f4152424b3a205061796d656e7420746f6b656e206e6f7420616c6c6f77656400604082015260600190565b600081600019048311821515161561238657612386612293565b500290565b6000826123a857634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600e908201526d4152424b3a20476574204c65737360901b604082015260600190565b60006001600160801b038281168482168083038211156123f7576123f7612293565b01949350505050565b918252602082015260400190565b60008282101561242057612420612293565b500390565b6020808252600e908201526d4152424b3a20506179204c65737360901b604082015260600190565b60006020828403121561245f57600080fd5b813560ff81168114611f2a57600080fd5b60006020828403121561248257600080fd5b5051919050565b60005b838110156124a457818101518382015260200161248c565b83811115611db95750506000910152565b600082516124c7818460208701612489565b9190910192915050565b6000602082840312156124e357600080fd5b8151611f2a81611fdb565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020815260008251806020840152612558816040850160208701612489565b601f01601f1916919091016040019291505056fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcdf4b02da5c879b7326859498241ac3e7c6577d5742e4aea56697af520665b55c416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000809000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNewART(address,address)": {
        "details": "Add new type of ART token and the controller, only can be called by the owner",
        "params": {
          "artToken": "Token address of the ART to add",
          "controller": "Address of the controller of the ART token"
        }
      },
      "buyARTNative(address,uint256,bool)": {
        "details": "Buy the ART token, then offset the bought ART and mint a cliamte badge.",
        "params": {
          "amountART": "The amount of the ART token.                  if isExactPay is true, amountART means the minumum ART token to receive, which may be zero for no checking.                  if isExactPay is false, amountART is the amount of ART token to receive.",
          "isExactPay": "Which amount is the exact amount                  = true,  msg.value is the exact amount of the payment token to pay.                  = false, amountART is the exact amount of the ART token to receive.",
          "tokenART": "The address of the ART token. There may be serveral different ART tokens in AREC ecosystem."
        }
      },
      "changeARTOwner(address,address)": {
        "details": "Change/shift the controller of the ART token",
        "params": {
          "artToken": "Address of the ART token to change controller",
          "newController": "Address of the new controller"
        }
      },
      "changeSalePrice(address,address,uint256)": {
        "details": "Change the ART sale price based on the buyInToken. Price-zero means not-supporting",
        "params": {
          "artToken": "Address of the ART token to sell. The bank contract support multiple ART tokens.",
          "buyInToken": "Address of the payment token used to buy ART. ",
          "price": "Price of the ART token priced in payment token, 1 ART = X payment token.  "
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "depositART(address,uint256)": {
        "details": "Deposit various ART token to the bank, only callable by the controller.",
        "params": {
          "amountDeposit": "Amount of the ART to deposit.",
          "artToken": "Token address of the ART to deposit. "
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFundReceiver(address,address)": {
        "details": "Set the income receiver address",
        "params": {
          "artToken": "Address of the ART token to set receiver",
          "receiver": "Address of the receiver"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(address,address)": {
        "details": "Withdraw all the sales income",
        "params": {
          "artToken": "Address of the ART token to withdraw",
          "payToken": "Address of the payment token to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 940,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 943,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3851,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 543,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 922,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1219,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13643,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "tokenNative",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 13647,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "forwarders",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13654,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "saleIncome",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(IncomeInfo)13615_storage))"
      },
      {
        "astId": 13659,
        "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
        "label": "artSaleInfo",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_struct(SaleInfo)13624_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(IncomeInfo)13615_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IncomeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(IncomeInfo)13615_storage)"
      },
      "t_mapping(t_address,t_struct(IncomeInfo)13615_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IncomeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(IncomeInfo)13615_storage"
      },
      "t_mapping(t_address,t_struct(SaleInfo)13624_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SaleInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SaleInfo)13624_storage"
      },
      "t_struct(IncomeInfo)13615_storage": {
        "encoding": "inplace",
        "label": "struct IncomeInfo",
        "members": [
          {
            "astId": 13612,
            "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
            "label": "priceForSale",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 13614,
            "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
            "label": "amountReceived",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SaleInfo)13624_storage": {
        "encoding": "inplace",
        "label": "struct SaleInfo",
        "members": [
          {
            "astId": 13617,
            "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
            "label": "controller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13619,
            "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
            "label": "fundReceiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13621,
            "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
            "label": "amountDeposited",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 13623,
            "contract": "contracts/ArkreenRECBank.sol:ArkreenRECBank",
            "label": "amountSold",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}