{
  "address": "0xB4B19F8381bf6a44CDc8591294683Bf21C8997cb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "serialNumber",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "minter",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint128",
              "name": "amountREC",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "cID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "region",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "memo",
              "type": "string"
            },
            {
              "internalType": "uint16",
              "name": "idAsset",
              "type": "uint16"
            }
          ],
          "internalType": "struct RECData",
          "name": "recData",
          "type": "tuple"
        }
      ],
      "name": "getARECSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa853c020c4aaa6a227cca4fc89219b5a44e5fa57c52badd5a3770639ac54dedc",
  "receipt": {
    "to": null,
    "from": "0x364a71eE7a1C9EB295a4F4850971a1861E9d3c7D",
    "contractAddress": "0xB4B19F8381bf6a44CDc8591294683Bf21C8997cb",
    "transactionIndex": 26,
    "gasUsed": "2811581",
    "logsBloom": "0x
    "blockHash": "0xdbdf8fb458638ae954765b31d73b3043e63c3bcabee30d1b7b34cc77d37444f3",
    "transactionHash": "0xa853c020c4aaa6a227cca4fc89219b5a44e5fa57c52badd5a3770639ac54dedc",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 44269440,
        "transactionHash": "0xa853c020c4aaa6a227cca4fc89219b5a44e5fa57c52badd5a3770639ac54dedc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000364a71ee7a1c9eb295a4f4850971a1861e9d3c7d",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003beeb5460f46ed00000000000000000000000000000000000000000000000008d23b44c57f7a430000000000000000000000000000000000000000000004c2419b0155771dedc000000000000000000000000000000000000000000000000008964c8f7f7033560000000000000000000000000000000000000000000004c241d6f00abd2d34ad",
        "logIndex": 93,
        "blockHash": "0xdbdf8fb458638ae954765b31d73b3043e63c3bcabee30d1b7b34cc77d37444f3"
      }
    ],
    "blockNumber": 44269440,
    "cumulativeGasUsed": "6107357",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6906724c5dab593fabd827accce0e5c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"amountREC\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"cID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"idAsset\",\"type\":\"uint16\"}],\"internalType\":\"struct RECData\",\"name\":\"recData\",\"type\":\"tuple\"}],\"name\":\"getARECSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArkreenRECIssuanceImage.sol\":\"ArkreenRECIssuanceImage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/ArkreenRECIssuanceImage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/FormattedStrings.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./libraries/BytesLib.sol\\\";\\r\\nimport \\\"./libraries/DateTime.sol\\\";\\r\\n\\r\\nimport \\\"./ArkreenRECIssuanceType.sol\\\";\\r\\n\\r\\n// Import this file to use console.log\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract ArkreenRECIssuanceImage {\\r\\n \\r\\n    using Strings for uint128;\\r\\n    using Strings for uint256;\\r\\n    using Strings for address;\\r\\n    using FormattedStrings for uint256;\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    function _decimalTruncate(string memory _str, uint256 decimalDigits) internal pure returns (string memory) {\\r\\n        bytes memory strBytes = bytes(_str);\\r\\n        uint256 dotIndex = strBytes.length;\\r\\n\\r\\n        for (uint256 i = 0; i < strBytes.length; i++) {\\r\\n            if (strBytes[i] == \\\".\\\") {\\r\\n\\r\\n                if(i + decimalDigits + 1 < strBytes.length){\\r\\n                    dotIndex = i + decimalDigits + 1;\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bytes memory result = new bytes(dotIndex);\\r\\n        for (uint256 i = 0; i < dotIndex; i++) {\\r\\n            result[i] = strBytes[i];\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n\\r\\n    function toFixedPoint(uint256 value, uint256 decimal) internal pure returns (string memory) {\\r\\n        require(decimal <= 18, \\\"Strings: Fixed point too long\\\");\\r\\n        string memory valueString = value.toString();\\r\\n        \\r\\n        if (decimal == 0) return valueString;\\r\\n\\r\\n        bytes memory valueBytes = bytes(valueString);\\r\\n        uint256 length = valueBytes.length;\\r\\n\\r\\n        bytes memory resulInBytes;\\r\\n        if (length > decimal) {\\r\\n            resulInBytes = valueBytes.slice(0, length - decimal).concat(\\\".\\\")                // Integer part\\r\\n                                .concat(valueBytes.slice(length - decimal, decimal));       // Decimal part\\r\\n        } else {\\r\\n            resulInBytes = bytes(\\\"0.000000000000000000\\\").slice(0, decimal + 2 - length)     // Maximum 18 decimals\\r\\n                                .concat(valueBytes);\\r\\n        }\\r\\n        return string(resulInBytes);\\r\\n    }\\r\\n\\r\\n    function toStringDayMonth(uint16 year, uint8 month, uint8 day) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(10);\\r\\n        buffer[3] = bytes1(uint8(48 + uint256(year % 10)));  year /= 10;\\r\\n        buffer[2] = bytes1(uint8(48 + uint256(year % 10)));  year /= 10;\\r\\n        buffer[1] = bytes1(uint8(48 + uint256(year % 10)));  year /= 10;\\r\\n        buffer[0] = bytes1(uint8(48 + uint256(year)));\\r\\n        buffer[4] = '-';\\r\\n        buffer[6] = bytes1(uint8(48 + uint256(month % 10)));  month /= 10;\\r\\n        buffer[5] = bytes1(uint8(48 + uint256(month))); \\r\\n        buffer[7] = '-';\\r\\n        buffer[9] = bytes1(uint8(48 + uint256(day % 10)));  day /= 10;\\r\\n        buffer[8] = bytes1(uint8(48 + uint256(day)));  \\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function getARECSVG(\\r\\n        uint256 tokenId,\\r\\n        address owner,\\r\\n        RECData memory recData\\r\\n    ) external pure returns(string memory) {\\r\\n\\r\\n        bytes memory dataURI;\\r\\n        string memory tokenString = tokenId.toString();\\r\\n\\r\\n        {\\r\\n            string memory energyInBadge = _decimalTruncate(toFixedPoint(recData.amountREC, 9), 3);\\r\\n            string memory svgData = getARECSVGImage(tokenId, owner, recData);\\r\\n\\r\\n            dataURI = abi.encodePacked(\\r\\n                            '{\\\"name\\\":\\\"AREC NFT #',\\r\\n                            tokenString,\\r\\n                            '\\\",\\\"description\\\":\\\"',\\r\\n                            'Details of renewable energy included in the AREC NFT.',\\r\\n                            '\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\r\\n                            svgData,\\r\\n                            '\\\",\\\"attributes\\\":[{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"AREC NFT ID\\\",\\\"value\\\":',\\r\\n                            tokenString,\\r\\n                            '},{\\\"trait_type\\\":\\\"Serial Number\\\",\\\"value\\\":\\\"',\\r\\n                            recData.serialNumber,\\r\\n                            '\\\"},{\\\"trait_type\\\":\\\"Renewable Energy\\\",\\\"value\\\":\\\"',\\r\\n                            energyInBadge,\\r\\n                            ' kWh\\\"},'\\r\\n                            );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            dataURI = abi.encodePacked(dataURI,\\r\\n                            '{\\\"display_type\\\":\\\"date\\\",\\\"trait_type\\\":\\\"AREC Start Time\\\",\\\"value\\\":',\\r\\n                            uint256(recData.startTime).toString(),\\r\\n                            '},{\\\"display_type\\\":\\\"date\\\",\\\"trait_type\\\":\\\"AREC End Time\\\",\\\"value\\\":',\\r\\n                            uint256(recData.endTime).toString(),\\r\\n                            '},{\\\"trait_type\\\":\\\"AREC Region\\\",\\\"value\\\":\\\"',\\r\\n                            recData.region,\\r\\n                            '\\\"},{\\\"trait_type\\\":\\\"AREC URL\\\",\\\"value\\\":\\\"',\\r\\n                            recData.url,\\r\\n                            '\\\"}'\\r\\n                        );\\r\\n        }\\r\\n        if (bytes(recData.memo).length !=0) {\\r\\n            dataURI = abi.encodePacked(dataURI,\\r\\n                            ',{\\\"trait_type\\\":\\\"AREC Memo\\\",\\\"value\\\":\\\"',\\r\\n                            recData.memo,\\r\\n                            '\\\"}]}'\\r\\n                        );\\r\\n        } else {\\r\\n            dataURI = abi.encodePacked(dataURI, ']}');\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(dataURI)));\\r\\n    }\\r\\n\\r\\n    function getARECSVGImage(uint256 tokenId, address owner, RECData memory recData) internal pure returns(string memory) {\\r\\n\\r\\n        bytes memory imgBytes;\\r\\n        \\r\\n        imgBytes = abi.encodePacked(\\r\\n            '<svg viewBox=\\\"0 0 900 744\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">'\\r\\n                '<defs>'\\r\\n                    '<path id=\\\"center\\\" d=\\\"M0 20 800 20\\\" stroke=\\\"white\\\" fill=\\\"none\\\"/>'\\r\\n                '</defs>'\\r\\n                '<style>.f{font-family:Montserrat;dominant-baseline:middle;text-anchor:middle}</style>'\\r\\n                '<style>.f4{font-family:Montserrat;font-size=12px;font-weight:400;dominant-baseline:middle;text-anchor:middle}</style>'\\r\\n                '<style>.fb{font-family:Montserrat;font-weight:700;dominant-baseline:middle;text-anchor:middle}</style>'\\r\\n                '<path fill=\\\"#fff\\\" d=\\\"M.5.5h899v743H.5z\\\"/>'\\r\\n                '<path stroke=\\\"#2F2F34\\\" d=\\\"M.5.5h899v743H.5z\\\"/>'\\r\\n                '<path stroke=\\\"#DBDBE4\\\" d=\\\"M24.5 24.5h851v695h-851z\\\"/>'\\r\\n                '<path stroke=\\\"#DBDBE4\\\" d=\\\"M32.5 32.5h835v679h-835z\\\"/>'\\r\\n                '<g>'\\r\\n                '<path d=\\\"M482 88c0 17.673-14.327 32-32 32-17.673 0-32-14.327-32-32 0-17.673 14.327-32'\\r\\n                    ' 32-32 17.673 0 32 14.327 32 32z\\\" fill=\\\"#00913A\\\"/>'\\r\\n                '<path d=\\\"M449.53 87.816l-6.583 10.543c-.632 1.013.095 2.329 1.288 2.329h23.366c1.342 0 2.16-1.478'\\r\\n                    ' 1.449-2.618L452.268 71.19c-1.042-1.668-3.465-1.668-4.509 0l-16.963 27.17c-.632 1.013.095 2.329 1.288'\\r\\n                    ' 2.329h3.793c.193-.001.383-.05.552-.143a1.15 1.15 0 00.414-.394l12.687-20.325a.573.573 0 01.967 0l8.68'\\r\\n                    ' 13.905a.575.575 0 01.017.58.568.568 0 01-.5.294h-5.21a.57.57 0 01-.48-.873l.404-.648a.575.575'\\r\\n                    ' 0 000-.604l-2.911-4.662a.566.566 0 00-.759-.199.574.574 0 00-.208.197z\\\" fill=\\\"#fff\\\"/>'\\r\\n               '</g>'\\r\\n                '<g transform=\\\"translate(50,130)\\\">'\\r\\n                    '<text class=\\\"f\\\" font-size=\\\"24px\\\" font-weight=\\\"700\\\" fill=\\\"#202024\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">'\\r\\n                          'ARKREEN RENEWABLE ENERGY CERTIFICATE'\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<line x1=\\\"50\\\" y1=\\\"620\\\" x2=\\\"850\\\" y2=\\\"620\\\" stroke=\\\"#E0E0E0\\\" stroke-width=\\\"1.5\\\" stroke-dasharray=\\\"4,4\\\" />'\\r\\n                '<g transform=\\\"translate(50,200)\\\">'\\r\\n                    '<text class=\\\"f4\\\" font-size=\\\"12px\\\" fill=\\\"#5D5D68\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">'\\r\\n                            'This certificate is issued to the account on Polygon of'\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<g transform=\\\"translate(50,240)\\\">'\\r\\n                    '<rect width=\\\"800\\\" height=\\\"40\\\"/>'\\r\\n                    '<text class=\\\"f\\\" font-size=\\\"16px\\\" font-weight=\\\"700\\\" fill=\\\"#2f2f34\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                          owner.toHexString(),\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<g transform=\\\"translate(50,272)\\\">'\\r\\n                    '<text class=\\\"f4\\\" font-size=\\\"12px\\\" fill=\\\"#5D5D68\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">'\\r\\n                          'by'\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<g transform=\\\"translate(50,302)\\\">'\\r\\n                    '<text class=\\\"f\\\" font-size=\\\"16px\\\" font-weight=\\\"700\\\" fill=\\\"#2f2f34\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                          'Arkreen Network',\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                \\r\\n            );\\r\\n\\r\\n        {\\r\\n            string memory artAmount = _decimalTruncate(toFixedPoint(recData.amountREC, 9), 4);\\r\\n            bytes memory fullARTString = bytes(\\\"AREC certificates, representing \\\")\\r\\n                                            .concat(bytes(artAmount))\\r\\n                                            .concat(bytes(' MWh of electricity generated from renewable sources, recoreded in the link'));\\r\\n            \\r\\n            _decimalTruncate(toFixedPoint(recData.amountREC, 9), 4);\\r\\n\\r\\n            imgBytes = abi.encodePacked(imgBytes,\\r\\n\\r\\n                '<g transform=\\\"translate(50,344)\\\">'\\r\\n                    '<text class=\\\"f4\\\" font-size=\\\"12px\\\" fill=\\\"#5D5D68\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                            'confirming the issuance of',\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<g transform=\\\"translate(50,384)\\\">'\\r\\n                    '<rect width=\\\"800\\\" height=\\\"40\\\" />'\\r\\n                    '<text class=\\\"f\\\" font-size=\\\"32px\\\" font-weight=\\\"700\\\" fill=\\\"#202024\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                          artAmount,\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<g transform=\\\"translate(50,418)\\\">'\\r\\n                    '<text class=\\\"f4\\\" font-size=\\\"12px\\\" fill=\\\"#5D5D68\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                            string(fullARTString),\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<g transform=\\\"translate(50,444)\\\">'\\r\\n                    '<text class=\\\"f\\\" font-size=\\\"12px\\\" font-weight=\\\"700\\\" fill=\\\"#2f2f34\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                          recData.url,\\r\\n                      '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<g transform=\\\"translate(50,470)\\\">'\\r\\n                    '<text class=\\\"f4\\\" font-size=\\\"12px\\\" fill=\\\"#5D5D68\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">'\\r\\n                            'This certificate relates to the electricity generation located at or in'\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n            );    \\r\\n        }\\r\\n\\r\\n        {\\r\\n            DateTimeLib.DateTime memory startTime = DateTimeLib.parseTimestamp(uint256(recData.startTime));\\r\\n            DateTimeLib.DateTime memory endTime = DateTimeLib.parseTimestamp(uint256(recData.endTime));\\r\\n            string memory startString = toStringDayMonth(startTime.year, startTime.month, startTime.day);\\r\\n            string memory endString = toStringDayMonth(endTime.year, endTime.month, endTime.day);\\r\\n\\r\\n            imgBytes = abi.encodePacked(imgBytes,     \\r\\n\\r\\n                    '<g transform=\\\"translate(50,504)\\\">'\\r\\n                        '<rect width=\\\"800\\\" height=\\\"40\\\"/>'\\r\\n                        '<text class=\\\"f\\\" font-size=\\\"16px\\\" font-weight=\\\"700\\\" fill=\\\"#2f2f34\\\">'\\r\\n                            '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                                recData.region,\\r\\n                            '</textPath>'\\r\\n                        '</text>'\\r\\n                    '</g>'\\r\\n                    '<g transform=\\\"translate(50,536)\\\">'\\r\\n                        '<text class=\\\"f4\\\" font-size=\\\"12px\\\" fill=\\\"#5D5D68\\\">'\\r\\n                            '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">'\\r\\n                                'in respect of the reporting period'\\r\\n                            '</textPath>'\\r\\n                        '</text>'\\r\\n                    '</g>'\\r\\n                    '<g transform=\\\"translate(50,574)\\\">'\\r\\n                        '<text class=\\\"f4\\\" font-size=\\\"12px\\\" fill=\\\"#5D5D68\\\">'\\r\\n                            '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">'\\r\\n                                'to'\\r\\n                            '</textPath>'\\r\\n                        '</text>'\\r\\n                    '</g>'\\r\\n                    '<g transform=\\\"translate(-20,574)\\\">'\\r\\n                        '<text class=\\\"f\\\" font-size=\\\"16px\\\" font-weight=\\\"500\\\" fill=\\\"#202024\\\">'\\r\\n                            '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                                startString,\\r\\n                            '</textPath>'\\r\\n                        '</text>'\\r\\n                    '</g>'\\r\\n\\r\\n                    '<g transform=\\\"translate(120,574)\\\">'\\r\\n                        '<text class=\\\"f\\\" font-size=\\\"16px\\\" font-weight=\\\"500\\\" fill=\\\"#202024\\\">'\\r\\n                            '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                                endString,\\r\\n                            '</textPath>'\\r\\n                        '</text>'\\r\\n                    '</g>'\\r\\n                    '<line x1=\\\"50\\\" y1=\\\"620\\\" x2=\\\"850\\\" y2=\\\"620\\\" stroke=\\\"#E0E0E0\\\" stroke-width=\\\"1.5\\\" stroke-dasharray=\\\"4,4\\\" />'\\r\\n                '</svg>'\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return  string(Base64.encode(imgBytes));\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb7875c2430fd9f1027769ee72e0b7f1f80113a3581be922617a34c4f7bdccc55\",\"license\":\"MIT\"},\"contracts/ArkreenRECIssuanceType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nenum RECStatus {\\n  Pending,            // 0\\n  Rejected,           // 1\\n  Cancelled,          // 2\\n  Certified,          // 3\\n  Retired,            // 4\\n  Liquidized          // 5\\n}\\n\\nstruct Signature {\\n    address     token;\\n    uint256     value;\\n    uint256     deadline;  \\n    uint8       v;\\n    bytes32     r;\\n    bytes32     s;              \\n}\\n\\nstruct PayInfo {\\n    address     token;\\n    uint256     value;\\n}\\n\\nstruct RECRequest {\\n    address   issuer;\\n    uint32    startTime;\\n    uint32    endTime;\\n    uint128   amountREC;\\n    string    cID;\\n    string    region;      \\n    string    url;\\n    string    memo;\\n} \\n\\nstruct RECData {\\n    address   issuer;\\n    string    serialNumber;\\n    address   minter;\\n    uint32    startTime;\\n    uint32    endTime;\\n    uint128   amountREC;\\n    uint8     status;\\n    string    cID;\\n    string    region;\\n    string    url;\\n    string    memo;\\n    uint16    idAsset;\\n}\\n\\nstruct ARECAmount {\\n    uint256   ARECID;\\n    uint128   amountREC;\\n}\\n\\nstruct RECMintPrice {\\n    address   token;\\n    uint256   value;\\n}\\n\",\"keccak256\":\"0x04ba2a53b7a28caa7a38ca6c6cef6b2fd59085dd88e683166960ba2a5f1ba94c\",\"license\":\"MIT\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\",\"keccak256\":\"0x753a18369b28ca59a58032386091df3c90885f8190b87f6c7836caa5c5a39c6d\",\"license\":\"Unlicense\"},\"contracts/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * Modified from https://etherscan.io/address/0x1a6184cd4c5bea62b0116de7962ee7315b7bcbce#code\\r\\n*/\\r\\nlibrary DateTimeLib {\\r\\n        /*\\r\\n         *  Date and Time utilities for ethereum contracts\\r\\n         *\\r\\n         *  address: 0x1a6184cd4c5bea62b0116de7962ee7315b7bcbce\\r\\n         */\\r\\n        struct DateTime {\\r\\n                uint16 year;\\r\\n                uint8 month;\\r\\n                uint8 day;\\r\\n                uint8 hour;\\r\\n                uint8 minute;\\r\\n                uint8 second;\\r\\n                uint8 weekday;\\r\\n        }\\r\\n\\r\\n        uint constant DAY_IN_SECONDS = 86400;\\r\\n        uint constant YEAR_IN_SECONDS = 31536000;\\r\\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n        uint constant HOUR_IN_SECONDS = 3600;\\r\\n        uint constant MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n        uint16 constant ORIGIN_YEAR = 1970;\\r\\n\\r\\n        function isLeapYear(uint16 year) internal pure returns (bool) {\\r\\n                if (year % 4 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                if (year % 100 != 0) {\\r\\n                        return true;\\r\\n                }\\r\\n                if (year % 400 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                return true;\\r\\n        }\\r\\n\\r\\n        function parseTimestamp(uint timestamp) internal pure returns (DateTime memory dt) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint buf;\\r\\n                uint8 i;\\r\\n\\r\\n                dt.year = ORIGIN_YEAR;\\r\\n\\r\\n                // Year\\r\\n                while (true) {\\r\\n                        if (isLeapYear(dt.year)) {\\r\\n                                buf = LEAP_YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        else {\\r\\n                                buf = YEAR_IN_SECONDS;\\r\\n                        }\\r\\n\\r\\n                        if (secondsAccountedFor + buf > timestamp) {\\r\\n                                break;\\r\\n                        }\\r\\n                        dt.year += 1;\\r\\n                        secondsAccountedFor += buf;\\r\\n                }\\r\\n\\r\\n                // Month\\r\\n                uint8[12] memory monthDayCounts;\\r\\n                monthDayCounts[0] = 31;\\r\\n                if (isLeapYear(dt.year)) {\\r\\n                        monthDayCounts[1] = 29;\\r\\n                }\\r\\n                else {\\r\\n                        monthDayCounts[1] = 28;\\r\\n                }\\r\\n                monthDayCounts[2] = 31;\\r\\n                monthDayCounts[3] = 30;\\r\\n                monthDayCounts[4] = 31;\\r\\n                monthDayCounts[5] = 30;\\r\\n                monthDayCounts[6] = 31;\\r\\n                monthDayCounts[7] = 31;\\r\\n                monthDayCounts[8] = 30;\\r\\n                monthDayCounts[9] = 31;\\r\\n                monthDayCounts[10] = 30;\\r\\n                monthDayCounts[11] = 31;\\r\\n\\r\\n                uint secondsInMonth;\\r\\n                for (i = 0; i < monthDayCounts.length; i++) {\\r\\n                        secondsInMonth = DAY_IN_SECONDS * monthDayCounts[i];\\r\\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\\r\\n                                dt.month = i + 1;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += secondsInMonth;\\r\\n                }\\r\\n\\r\\n                // Day\\r\\n                for (i = 0; i < monthDayCounts[dt.month - 1]; i++) {\\r\\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\r\\n                                dt.day = i + 1;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += DAY_IN_SECONDS;\\r\\n                }\\r\\n\\r\\n                // Hour\\r\\n                for (i = 0; i < 24; i++) {\\r\\n                        if (HOUR_IN_SECONDS + secondsAccountedFor > timestamp) {\\r\\n                                dt.hour = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += HOUR_IN_SECONDS;\\r\\n                }\\r\\n\\r\\n                // Minute\\r\\n                for (i = 0; i < 60; i++) {\\r\\n                        if (MINUTE_IN_SECONDS + secondsAccountedFor > timestamp) {\\r\\n                                dt.minute = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += MINUTE_IN_SECONDS;\\r\\n                }\\r\\n\\r\\n                if (timestamp - secondsAccountedFor > 60) {\\r\\n                    revert(\\\"\\\");\\r\\n                }\\r\\n\\r\\n                // Second\\r\\n                dt.second = uint8(timestamp - secondsAccountedFor);\\r\\n\\r\\n                // Day of week.\\r\\n                buf = timestamp / DAY_IN_SECONDS;\\r\\n                dt.weekday = uint8((buf + 3) % 7);\\r\\n        }\\r\\n\\r\\n        function getYear(uint timestamp) internal pure returns (uint16) {\\r\\n                return parseTimestamp(timestamp).year;\\r\\n        }\\r\\n\\r\\n        function getMonth(uint timestamp) internal pure returns (uint16) {\\r\\n                return parseTimestamp(timestamp).month;\\r\\n        }\\r\\n\\r\\n        function getDay(uint timestamp) internal pure returns (uint16) {\\r\\n                return parseTimestamp(timestamp).day;\\r\\n        }\\r\\n\\r\\n        function getHour(uint timestamp) internal pure returns (uint16) {\\r\\n                return parseTimestamp(timestamp).hour;\\r\\n        }\\r\\n\\r\\n        function getMinute(uint timestamp) internal pure returns (uint16) {\\r\\n                return parseTimestamp(timestamp).minute;\\r\\n        }\\r\\n\\r\\n        function getSecond(uint timestamp) internal pure returns (uint16) {\\r\\n                return parseTimestamp(timestamp).second;\\r\\n        }\\r\\n\\r\\n        function getWeekday(uint timestamp) internal pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).weekday;\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, hour, 0, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal pure returns (uint timestamp) {\\r\\n                return toTimestamp(year, month, day, hour, minute, 0);\\r\\n        }\\r\\n\\r\\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\\r\\n                uint16 i;\\r\\n\\r\\n                // Year\\r\\n                for (i = ORIGIN_YEAR; i < year; i++) {\\r\\n                        if (isLeapYear(i)) {\\r\\n                                timestamp += LEAP_YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        else {\\r\\n                                timestamp += YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                }\\r\\n\\r\\n                // Month\\r\\n                uint8[12] memory monthDayCounts;\\r\\n                monthDayCounts[0] = 31;\\r\\n                if (isLeapYear(year)) {\\r\\n                        monthDayCounts[1] = 29;\\r\\n                }\\r\\n                else {\\r\\n                        monthDayCounts[1] = 28;\\r\\n                }\\r\\n                monthDayCounts[2] = 31;\\r\\n                monthDayCounts[3] = 30;\\r\\n                monthDayCounts[4] = 31;\\r\\n                monthDayCounts[5] = 30;\\r\\n                monthDayCounts[6] = 31;\\r\\n                monthDayCounts[7] = 31;\\r\\n                monthDayCounts[8] = 30;\\r\\n                monthDayCounts[9] = 31;\\r\\n                monthDayCounts[10] = 30;\\r\\n                monthDayCounts[11] = 31;\\r\\n\\r\\n                for (i = 1; i < month; i++) {\\r\\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\r\\n                }\\r\\n\\r\\n                // Day\\r\\n                timestamp += DAY_IN_SECONDS * (day - 1);\\r\\n\\r\\n                // Hour\\r\\n                timestamp += HOUR_IN_SECONDS * (hour);\\r\\n\\r\\n                // Minute\\r\\n                timestamp += MINUTE_IN_SECONDS * (minute);\\r\\n\\r\\n                // Second\\r\\n                timestamp += second;\\r\\n\\r\\n                return timestamp;\\r\\n        }\\r\\n}\",\"keccak256\":\"0x26d5c8eaeeec02de8840852f1a0d7e401222807dd7633d3df47fd592b4f28d93\",\"license\":\"MIT\"},\"contracts/libraries/FormattedStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary FormattedStrings {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n            Base on OpenZeppelin `toString` method from `String` library\\r\\n     */\\r\\n    function toFormattedString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        uint256 pos;\\r\\n        uint256 comas = digits / 3;\\r\\n        digits = digits + (digits % 3 == 0 ? comas - 1 : comas);\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            if (pos == 3) {\\r\\n                buffer[digits] = \\\",\\\";\\r\\n                pos = 0;\\r\\n            } else {\\r\\n                buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n                value /= 10;\\r\\n                pos++;\\r\\n            }\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xffec6eb0cf969d70dab768616277c363c4a170e13993d6854ebbf7edc10b42c3\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0xb84058fe812260e89968aff2b7a155ed113b3a6431e43790d25e6b0d164b4050\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506131e5806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dbd642ea14610030575b600080fd5b61004361003e36600461139f565b610059565b6040516100509190611569565b60405180910390f35b6060806000610067866101b7565b9050600061008d6100868660a001516001600160801b031660096102bd565b60036103fb565b9050600061009c888888610555565b90508281848860200151856040516020016100bb9594939291906115b8565b60405160208183030381529060405293505050816100e2856060015163ffffffff166101b7565b6100f5866080015163ffffffff166101b7565b8661010001518761012001516040516020016101159594939291906117d4565b6040516020818303038152906040529150836101400151516000146101615761014084015160405161014b918491602001611960565b6040516020818303038152906040529150610184565b8160405160200161017291906119d7565b60405160208183030381529060405291505b61018d82610700565b60405160200161019d91906119fd565b604051602081830303815290604052925050509392505050565b6060816101db5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561020557806101ef81611a58565b91506101fe9050600a83611a89565b91506101df565b60008167ffffffffffffffff81111561022057610220611284565b6040519080825280601f01601f19166020018201604052801561024a576020820181803683370190505b5090505b84156102b55761025f600183611a9d565b915061026c600a86611ab4565b610277906030611ac8565b60f81b81838151811061028c5761028c611ae0565b60200101906001600160f81b031916908160001a9053506102ae600a86611a89565b945061024e565b949350505050565b606060128211156103155760405162461bcd60e51b815260206004820152601d60248201527f537472696e67733a20466978656420706f696e7420746f6f206c6f6e6700000060448201526064015b60405180910390fd5b6000610320846101b7565b90508261032e5790506103f5565b805181906060858211156103925761038b61035461034c8885611a9d565b859089610854565b6040805180820190915260018152601760f91b60208201526103859081600061037d8c89611a9d565b899190610854565b9061097c565b90506103ef565b6103ec836103856000856103a78b6002611ac8565b6103b19190611a9d565b60408051808201909152601481527f302e30303030303030303030303030303030303000000000000000000000000060208201529190610854565b90505b93505050505b92915050565b8151606090839060005b825181101561049f5782818151811061042057610420611ae0565b6020910101517fff0000000000000000000000000000000000000000000000000000000000000016601760f91b141561048d57825161045f8683611ac8565b61046a906001611ac8565b10156104885761047a8582611ac8565b610485906001611ac8565b91505b61049f565b8061049781611a58565b915050610405565b5060008167ffffffffffffffff8111156104bb576104bb611284565b6040519080825280601f01601f1916602001820160405280156104e5576020820181803683370190505b50905060005b8281101561054b5783818151811061050557610505611ae0565b602001015160f81c60f81b82828151811061052257610522611ae0565b60200101906001600160f81b031916908160001a9053508061054381611a58565b9150506104eb565b5095945050505050565b60608061056a846001600160a01b03166109f9565b60405160200161057a9190611af6565b604051602081830303815290604052905060006105af6105a88560a001516001600160801b031660096102bd565b60046103fb565b9050600061060d6040518060800160405280604b815260200161312e604b91396040805180820190915260208082527f41524543206365727469666963617465732c20726570726573656e74696e672090820152610385908561097c565b905061062a6105a88660a001516001600160801b031660096102bd565b506101208501516040516106469185918591859160200161266e565b60405160208183030381529060405292505050600061066e846060015163ffffffff16610a0f565b90506000610685856080015163ffffffff16610a0f565b905060006106a0836000015184602001518560400151610d5b565b905060006106bb836000015184602001518560400151610d5b565b90508487610100015183836040516020016106d99493929190612aed565b6040516020818303038152906040529450505050506106f781610700565b95945050505050565b606081516000141561072057505060408051602081019091526000815290565b6000604051806060016040528060408152602001613179604091399050600060038451600261074f9190611ac8565b6107599190611a89565b610764906004612fe3565b67ffffffffffffffff81111561077c5761077c611284565b6040519080825280601f01601f1916602001820160405280156107a6576020820181803683370190505b509050600182016020820185865187015b80821015610812576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506107b7565b505060038651066001811461082e576002811461084157610849565b603d6001830353603d6002830353610849565b603d60018303535b509195945050505050565b60608161086281601f611ac8565b10156108b05760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015260640161030c565b6108ba8284611ac8565b8451101561090a5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015260640161030c565b6060821580156109295760405191506000825260208201604052610973565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561096257805183526020928301920161094a565b5050858452601f01601f1916604052505b50949350505050565b6060806040519050835180825260208201818101602087015b818310156109ad578051835260209283019201610995565b50855184518101855292509050808201602086015b818310156109da5780518352602092830192016109c2565b508651929092011591909101601f01601f191660405250905092915050565b60606103f56001600160a01b038316601461103a565b6040805160e081018252600060208201819052918101829052606081018290526080810182905260a0810182905260c081018290526107b281529080805b8351610a58906111ea565b15610a69576301e285009150610a71565b6301e1338091505b84610a7c8385611ac8565b1115610a8757610ab2565b600184600001818151610a9a9190613002565b61ffff16905250610aab8284611ac8565b9250610a4d565b610aba611249565b601f81528451610ac9906111ea565b15610ada57601d6020820152610ae2565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e083018290526101008301819052610120830182905261014083015261016082015260009150815b600c8360ff161015610bb157818360ff16600c8110610b5357610b53611ae0565b6020020151610b689060ff1662015180612fe3565b905086610b758683611ac8565b1115610b9357610b86836001613028565b60ff166020870152610bb1565b610b9d8186611ac8565b945082610ba98161304d565b935050610b32565b600092505b8160018760200151610bc8919061306d565b60ff16600c8110610bdb57610bdb611ae0565b602002015160ff168360ff161015610c3a5786610bfb8662015180611ac8565b1115610c1957610c0c836001613028565b60ff166040870152610c3a565b610c266201518086611ac8565b945082610c328161304d565b935050610bb6565b600092505b60188360ff161015610c8c5786610c5886610e10611ac8565b1115610c6c5760ff83166060870152610c8c565b610c78610e1086611ac8565b945082610c848161304d565b935050610c3f565b600092505b603c8360ff161015610cdc5786610ca986603c611ac8565b1115610cbd5760ff83166080870152610cdc565b610cc8603c86611ac8565b945082610cd48161304d565b935050610c91565b603c610ce88689611a9d565b1115610d105760405162461bcd60e51b8152602060048201526000602482015260440161030c565b610d1a8588611a9d565b60ff1660a0870152610d2f6201518088611a89565b93506007610d3e856003611ac8565b610d489190611ab4565b60ff1660c0870152509395945050505050565b60408051600a80825281830190925260609160009190602082018180368337019050509050610d8b600a86613090565b610d9a9061ffff166030611ac8565b60f81b81600381518110610db057610db0611ae0565b60200101906001600160f81b031916908160001a905350610dd2600a866130b1565b9450610ddf600a86613090565b610dee9061ffff166030611ac8565b60f81b81600281518110610e0457610e04611ae0565b60200101906001600160f81b031916908160001a905350610e26600a866130b1565b9450610e33600a86613090565b610e429061ffff166030611ac8565b60f81b81600181518110610e5857610e58611ae0565b60200101906001600160f81b031916908160001a905350610e7a600a866130b1565b9450610e8b61ffff86166030611ac8565b60f81b81600081518110610ea157610ea1611ae0565b60200101906001600160f81b031916908160001a905350602d60f81b81600481518110610ed057610ed0611ae0565b60200101906001600160f81b031916908160001a905350610ef2600a856130d2565b610f009060ff166030611ac8565b60f81b81600681518110610f1657610f16611ae0565b60200101906001600160f81b031916908160001a905350610f38600a856130f4565b9350610f4860ff85166030611ac8565b60f81b81600581518110610f5e57610f5e611ae0565b60200101906001600160f81b031916908160001a905350602d60f81b81600781518110610f8d57610f8d611ae0565b60200101906001600160f81b031916908160001a905350610faf600a846130d2565b610fbd9060ff166030611ac8565b60f81b81600981518110610fd357610fd3611ae0565b60200101906001600160f81b031916908160001a905350610ff5600a846130f4565b925061100560ff84166030611ac8565b60f81b8160088151811061101b5761101b611ae0565b60200101906001600160f81b031916908160001a905350949350505050565b60606000611049836002612fe3565b611054906002611ac8565b67ffffffffffffffff81111561106c5761106c611284565b6040519080825280601f01601f191660200182016040528015611096576020820181803683370190505b509050600360fc1b816000815181106110b1576110b1611ae0565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110e0576110e0611ae0565b60200101906001600160f81b031916908160001a9053506000611104846002612fe3565b61110f906001611ac8565b90505b6001811115611194577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061115057611150611ae0565b1a60f81b82828151811061116657611166611ae0565b60200101906001600160f81b031916908160001a90535060049490941c9361118d81613116565b9050611112565b5083156111e35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161030c565b9392505050565b60006111f7600483613090565b61ffff161561120857506000919050565b611213606483613090565b61ffff161561122457506001919050565b61123061019083613090565b61ffff161561124157506000919050565b506001919050565b604051806101800160405280600c906020820280368337509192915050565b80356001600160a01b038116811461127f57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156112be576112be611284565b60405290565b600082601f8301126112d557600080fd5b813567ffffffffffffffff808211156112f0576112f0611284565b604051601f8301601f19908116603f0116810190828211818310171561131857611318611284565b8160405283815286602085880101111561133157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803563ffffffff8116811461127f57600080fd5b80356001600160801b038116811461127f57600080fd5b803560ff8116811461127f57600080fd5b803561ffff8116811461127f57600080fd5b6000806000606084860312156113b457600080fd5b833592506113c460208501611268565b9150604084013567ffffffffffffffff808211156113e157600080fd5b9085019061018082880312156113f657600080fd5b6113fe61129a565b61140783611268565b815260208301358281111561141b57600080fd5b611427898286016112c4565b60208301525061143960408401611268565b604082015261144a60608401611351565b606082015261145b60808401611351565b608082015261146c60a08401611365565b60a082015261147d60c0840161137c565b60c082015260e08301358281111561149457600080fd5b6114a0898286016112c4565b60e08301525061010080840135838111156114ba57600080fd5b6114c68a8287016112c4565b82840152505061012080840135838111156114e057600080fd5b6114ec8a8287016112c4565b828401525050610140808401358381111561150657600080fd5b6115128a8287016112c4565b828401525050610160915061152882840161138d565b828201528093505050509250925092565b60005b8381101561155457818101518382015260200161153c565b83811115611563576000848401525b50505050565b6020815260008251806020840152611588816040850160208701611539565b601f01601f19169190910160400192915050565b600081516115ae818560208601611539565b9290920192915050565b7f7b226e616d65223a2241524543204e46542023000000000000000000000000008152600086516115f0816013850160208b01611539565b7f222c226465736372697074696f6e223a220000000000000000000000000000006013918401918201527f44657461696c73206f662072656e657761626c6520656e6572677920696e636c60248201527f7564656420696e207468652041524543204e46542e000000000000000000000060448201527f222c22696d616765223a22646174613a696d6167652f7376672b786d6c3b62616059820152641cd94d8d0b60da1b607982015286516116ad81607e840160208b01611539565b7f222c2261747472696275746573223a5b7b22646973706c61795f74797065223a607e92909101918201527f226e756d626572222c2274726169745f74797065223a2241524543204e465420609e8201526b24a21116113b30b63ab2911d60a11b60be8201526117c86117b56117af61177061176a61172f60ca87018c61159c565b7f7d2c7b2274726169745f74797065223a2253657269616c204e756d626572222c815268113b30b63ab2911d1160b91b602082015260290190565b8961159c565b7f227d2c7b2274726169745f74797065223a2252656e657761626c6520456e657281526c33bc9116113b30b63ab2911d1160991b6020820152602d0190565b8661159c565b66081ad5da089f4b60ca1b815260070190565b98975050505050505050565b600086516117e6818460208b01611539565b80830190507f7b22646973706c61795f74797065223a2264617465222c2274726169745f747981527f7065223a22415245432053746172742054696d65222c2276616c7565223a00006020820152865161184781603e840160208b01611539565b7f7d2c7b22646973706c61795f74797065223a2264617465222c2274726169745f603e92909101918201527f74797065223a224152454320456e642054696d65222c2276616c7565223a0000605e82015285516118ab81607c840160208a01611539565b7f7d2c7b2274726169745f74797065223a224152454320526567696f6e222c2276607c92909101918201526630b63ab2911d1160c91b609c82015284516118f98160a3840160208901611539565b61195361194561193f60a3848601017f227d2c7b2274726169745f74797065223a22415245432055524c222c2276616c8152643ab2911d1160d91b602082015260250190565b8761159c565b61227d60f01b815260020190565b9998505050505050505050565b60008351611972818460208801611539565b80830190507f2c7b2274726169745f74797065223a2241524543204d656d6f222c2276616c7581526332911d1160e11b602082015283516119ba816024840160208801611539565b63227d5d7d60e01b60249290910191820152602801949350505050565b600082516119e9818460208701611539565b615d7d60f01b920191825250600201919050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611a3581601d850160208701611539565b91909101601d0192915050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611a6c57611a6c611a42565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611a9857611a98611a73565b500490565b600082821015611aaf57611aaf611a42565b500390565b600082611ac357611ac3611a73565b500690565b60008219821115611adb57611adb611a42565b500190565b634e487b7160e01b600052603260045260246000fd5b7f3c7376672076696577426f783d223020302039303020373434222066696c6c3d81527f226e6f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f60208201527f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f777760408201527f772e77332e6f72672f313939392f786c696e6b223e3c646566733e3c7061746860608201527f2069643d2263656e7465722220643d224d30203230203830302032302220737460808201527f726f6b653d227768697465222066696c6c3d226e6f6e65222f3e3c2f6465667360a08201527f3e3c7374796c653e2e667b666f6e742d66616d696c793a4d6f6e74736572726160c08201527f743b646f6d696e616e742d626173656c696e653a6d6964646c653b746578742d60e08201527f616e63686f723a6d6964646c657d3c2f7374796c653e3c7374796c653e2e66346101008201527f7b666f6e742d66616d696c793a4d6f6e747365727261743b666f6e742d73697a6101208201527f653d313270783b666f6e742d7765696768743a3430303b646f6d696e616e742d6101408201527f626173656c696e653a6d6964646c653b746578742d616e63686f723a6d6964646101608201527f6c657d3c2f7374796c653e3c7374796c653e2e66627b666f6e742d66616d696c6101808201527f793a4d6f6e747365727261743b666f6e742d7765696768743a3730303b646f6d6101a08201527f696e616e742d626173656c696e653a6d6964646c653b746578742d616e63686f6101c08201527f723a6d6964646c657d3c2f7374796c653e3c706174682066696c6c3d222366666101e08201527f662220643d224d2e352e356838393976373433482e357a222f3e3c70617468206102008201527f7374726f6b653d22233246324633342220643d224d2e352e35683839397637346102208201527f33482e357a222f3e3c70617468207374726f6b653d22234442444245342220646102408201527f3d224d32342e352032342e356838353176363935682d3835317a222f3e3c70616102608201527f7468207374726f6b653d22234442444245342220643d224d33322e352033322e6102808201527f356838333576363739682d3833357a222f3e3c673e3c7061746820643d224d346102a08201527f383220383863302031372e3637332d31342e3332372033322d33322033322d316102c08201527f372e36373320302d33322d31342e3332372d33322d333220302d31372e3637336102e08201527f2031342e3332372d33322033322d33322031372e36373320302033322031342e6103008201527f3332372033322033327a222066696c6c3d2223303039313341222f3e3c7061746103208201527f6820643d224d3434392e35332038372e3831366c2d362e3538332031302e35346103408201527f33632d2e36333220312e3031332e30393520322e33323920312e32383820322e6103608201527f3332396832332e33363663312e333432203020322e31362d312e34373820312e6103808201527f3434392d322e3631384c3435322e3236382037312e3139632d312e3034322d316103a08201527f2e3636382d332e3436352d312e3636382d342e35303920306c2d31362e3936336103c08201527f2032372e3137632d2e36333220312e3031332e30393520322e33323920312e326103e08201527f383820322e33323968332e373933632e3139332d2e3030312e3338332d2e30356104008201527f2e3535322d2e31343361312e313520312e313520302030302e3431342d2e33396104208201527f346c31322e3638372d32302e333235612e3537332e35373320302030312e39366104408201527f3720306c382e36382031332e393035612e3537352e35373520302030312e30316104608201527f372e35382e3536382e35363820302030312d2e352e323934682d352e3231612e6104808201527f35372e353720302030312d2e34382d2e3837336c2e3430342d2e363438612e356104a08201527f37352e3537352030203030302d2e3630346c2d322e3931312d342e363632612e6104c08201527f3536362e35363620302030302d2e3735392d2e3139392e3537342e35373420306104e08201527f2030302d2e3230382e3139377a222066696c6c3d2223666666222f3e3c2f673e6105008201527f3c67207472616e73666f726d3d227472616e736c6174652835302c31333029226105208201527f3e3c7465787420636c6173733d22662220666f6e742d73697a653d22323470786105408201527f2220666f6e742d7765696768743d22373030222066696c6c3d222332303230326105608201527f34223e3c746578745061746820786c696e6b3a687265663d222363656e7465726105808201527f222073746172744f66667365743d22353025223e41524b5245454e2052454e456105a08201527f5741424c4520454e455247592043455254494649434154453c2f7465787450616105c08201527f74683e3c2f746578743e3c2f673e3c6c696e652078313d223530222079313d226105e08201527f363230222078323d22383530222079323d2236323022207374726f6b653d22236106008201527f45304530453022207374726f6b652d77696474683d22312e3522207374726f6b6106208201527f652d6461736861727261793d22342c3422202f3e3c67207472616e73666f726d6106408201527f3d227472616e736c6174652835302c32303029223e3c7465787420636c6173736106608201527f3d2266342220666f6e742d73697a653d2231327078222066696c6c3d222335446106808201527f35443638223e3c746578745061746820786c696e6b3a687265663d222363656e6106a08201527f746572222073746172744f66667365743d22353025223e5468697320636572746106c08201527f696669636174652069732069737375656420746f20746865206163636f756e746106e08201527f206f6e20506f6c79676f6e206f663c2f74657874506174683e3c2f746578743e6107008201527f3c2f673e3c67207472616e73666f726d3d227472616e736c6174652835302c326107208201527f343029223e3c726563742077696474683d2238303022206865696768743d22346107408201527f30222f3e3c7465787420636c6173733d22662220666f6e742d73697a653d22316107608201527f3670782220666f6e742d7765696768743d22373030222066696c6c3d222332666107808201527f32663334223e3c746578745061746820786c696e6b3a687265663d222363656e6107a08201527f746572222073746172744f66667365743d22353025223e0000000000000000006107c082015260006111e361264561261c61249d6107d786018761159c565b6000805160206131b983398151915281527f726d3d227472616e736c6174652835302c32373229223e3c7465787420636c6160208201527f73733d2266342220666f6e742d73697a653d2231327078222066696c6c3d222360408201527f354435443638223e3c746578745061746820786c696e6b3a687265663d22236360608201527f656e746572222073746172744f66667365743d22353025223e62793c2f74657860808201527f74506174683e3c2f746578743e3c2f673e3c67207472616e73666f726d3d227460a08201527f72616e736c6174652835302c33303229223e3c7465787420636c6173733d226660c08201527f2220666f6e742d73697a653d22313670782220666f6e742d7765696768743d2260e08201527f373030222066696c6c3d2223326632663334223e3c746578745061746820786c6101008201527f696e6b3a687265663d222363656e746572222073746172744f66667365743d22610120820152641a9812911f60d91b6101408201526101450190565b7f41726b7265656e204e6574776f726b00000000000000000000000000000000008152600f0190565b7f3c2f74657874506174683e3c2f746578743e3c2f673e00000000000000000000815260160190565b60008551612680818460208a01611539565b7f3c67207472616e73666f726d3d227472616e736c6174652835302c33343429229083019081527f3e3c7465787420636c6173733d2266342220666f6e742d73697a653d2231327060208201527f78222066696c6c3d2223354435443638223e3c746578745061746820786c696e60408201527f6b3a687265663d222363656e746572222073746172744f66667365743d22353060608201526212911f60e91b60808201527f636f6e6669726d696e67207468652069737375616e6365206f6600000000000060838201526000805160206131b9833981519152609d8201527f726d3d227472616e736c6174652835302c33383429223e3c726563742077696460bd8201527f74683d2238303022206865696768743d22343022202f3e3c7465787420636c6160dd8201527f73733d22662220666f6e742d73697a653d22333270782220666f6e742d77656960fd8201527f6768743d22373030222066696c6c3d2223323032303234223e3c74657874506161011d8201527f746820786c696e6b3a687265663d222363656e746572222073746172744f666661013d8201526939b2ba1e911a9812911f60b11b61015d820152612ae26129c16117af6128ff61176a61285061016787018c61159c565b6000805160206131b983398151915281527f726d3d227472616e736c6174652835302c34313829223e3c7465787420636c6160208201527f73733d2266342220666f6e742d73697a653d2231327078222066696c6c3d222360408201527f354435443638223e3c746578745061746820786c696e6b3a687265663d22236360608201527f656e746572222073746172744f66667365743d22353025223e00000000000000608082015260990190565b6000805160206131b983398151915281527f726d3d227472616e736c6174652835302c34343429223e3c7465787420636c6160208201527f73733d22662220666f6e742d73697a653d22313270782220666f6e742d77656960408201527f6768743d22373030222066696c6c3d2223326632663334223e3c74657874506160608201527f746820786c696e6b3a687265663d222363656e746572222073746172744f666660808201526939b2ba1e911a9812911f60b11b60a082015260aa0190565b6000805160206131b983398151915281527f726d3d227472616e736c6174652835302c34373029223e3c7465787420636c6160208201527f73733d2266342220666f6e742d73697a653d2231327078222066696c6c3d222360408201527f354435443638223e3c746578745061746820786c696e6b3a687265663d22236360608201527f656e746572222073746172744f66667365743d22353025223e5468697320636560808201527f7274696669636174652072656c6174657320746f2074686520656c656374726960a08201527f636974792067656e65726174696f6e206c6f6361746564206174206f7220696e60c08201527f3c2f74657874506174683e3c2f746578743e3c2f673e0000000000000000000060e082015260f60190565b979650505050505050565b60008551612aff818460208a01611539565b80830190507f3c67207472616e73666f726d3d227472616e736c6174652835302c353034292281527f3e3c726563742077696474683d2238303022206865696768743d223430222f3e60208201527f3c7465787420636c6173733d22662220666f6e742d73697a653d22313670782260408201527f20666f6e742d7765696768743d22373030222066696c6c3d222332663266333460608201527f223e3c746578745061746820786c696e6b3a687265663d222363656e7465722260808201527f2073746172744f66667365743d22353025223e0000000000000000000000000060a08201528551612bf88160b3840160208a01611539565b6000805160206131b983398151915260b392909101918201527f726d3d227472616e736c6174652835302c35333629223e3c7465787420636c6160d38201527f73733d2266342220666f6e742d73697a653d2231327078222066696c6c3d222360f38201527f354435443638223e3c746578745061746820786c696e6b3a687265663d2223636101138201527f656e746572222073746172744f66667365743d22353025223e696e20726573706101338201527f656374206f6620746865207265706f7274696e6720706572696f643c2f7465786101538201527f74506174683e3c2f746578743e3c2f673e3c67207472616e73666f726d3d22746101738201527f72616e736c6174652835302c35373429223e3c7465787420636c6173733d22666101938201527f342220666f6e742d73697a653d2231327078222066696c6c3d222335443544366101b38201527f38223e3c746578745061746820786c696e6b3a687265663d222363656e7465726101d38201527f222073746172744f66667365743d22353025223e746f3c2f74657874506174686101f38201527f3e3c2f746578743e3c2f673e3c67207472616e73666f726d3d227472616e736c6102138201527f617465282d32302c35373429223e3c7465787420636c6173733d22662220666f6102338201527f6e742d73697a653d22313670782220666f6e742d7765696768743d22353030226102538201527f2066696c6c3d2223323032303234223e3c746578745061746820786c696e6b3a6102738201527f687265663d222363656e746572222073746172744f66667365743d2235302522610293820152601f60f91b6102b3820152612ae2612f3d6117af612e7a6102b485018961159c565b6000805160206131b983398151915281527f726d3d227472616e736c617465283132302c35373429223e3c7465787420636c60208201527f6173733d22662220666f6e742d73697a653d22313670782220666f6e742d776560408201527f696768743d22353030222066696c6c3d2223323032303234223e3c746578745060608201527f61746820786c696e6b3a687265663d222363656e746572222073746172744f6660808201526a3339b2ba1e911a9812911f60a91b60a082015260ab0190565b7f3c2f74657874506174683e3c2f746578743e3c2f673e3c6c696e652078313d2281527f3530222079313d22363230222078323d22383530222079323d2236323022207360208201527f74726f6b653d222345304530453022207374726f6b652d77696474683d22312e60408201527f3522207374726f6b652d6461736861727261793d22342c3422202f3e3c2f7376606082015261339f60f11b608082015260820190565b6000816000190483118215151615612ffd57612ffd611a42565b500290565b600061ffff80831681851680830382111561301f5761301f611a42565b01949350505050565b600060ff821660ff84168060ff0382111561304557613045611a42565b019392505050565b600060ff821660ff81141561306457613064611a42565b60010192915050565b600060ff821660ff84168082101561308757613087611a42565b90039392505050565b600061ffff808416806130a5576130a5611a73565b92169190910692915050565b600061ffff808416806130c6576130c6611a73565b92169190910492915050565b600060ff8316806130e5576130e5611a73565b8060ff84160691505092915050565b600060ff83168061310757613107611a73565b8060ff84160491505092915050565b60008161312557613125611a42565b50600019019056fe204d5768206f6620656c6563747269636974792067656e6572617465642066726f6d2072656e657761626c6520736f75726365732c207265636f726564656420696e20746865206c696e6b4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c2f74657874506174683e3c2f746578743e3c2f673e3c67207472616e73666fa164736f6c6343000809000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}