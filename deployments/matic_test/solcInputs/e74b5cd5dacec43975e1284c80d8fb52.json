{
  "language": "Solidity",
  "sources": {
    "contracts/ArkreenBadge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\n\r\nimport './ArkreenBadgeStorage.sol';\r\nimport \"./interfaces/IPausable.sol\";\r\nimport \"./interfaces/IArkreenRegistry.sol\";\r\nimport \"./interfaces/IArkreenRECIssuance.sol\";\r\nimport \"./interfaces/IERC5192.sol\";\r\nimport \"./ArkreenBadgeType.sol\";  \r\n\r\ncontract ArkreenBadge is\r\n    OwnableUpgradeable,\r\n    UUPSUpgradeable,\r\n    ERC721EnumerableUpgradeable,\r\n    IERC721Receiver,\r\n    ArkreenBadgeStorage,\r\n    IERC5192\r\n{\r\n    using AddressUpgradeable for address;\r\n\r\n    // Public variables\r\n    string public constant NAME = 'Arkreen REC Badge';\r\n    string public constant SYMBOL = 'ARB';\r\n\r\n     // Events\r\n    event ArkreenRegistryUpdated(address newArkreenRegistry);\r\n    event OffsetCertificateMinted(uint256 tokenId);\r\n    event OffsetCertificateUpdated(uint256 tokenId);\r\n  \r\n    modifier whenNotPaused() {\r\n        require(!IPausable(arkreenRegistry).paused(), 'ARB: Paused');\r\n        _;\r\n    }\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address arkRegistry) external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __UUPSUpgradeable_init();        \r\n        __ERC721_init_unchained(NAME, SYMBOL);\r\n        arkreenRegistry = arkRegistry;\r\n        baseURI = 'https://www.arkreen.com/badge/' ;\r\n    }   \r\n\r\n    function postUpdate() external onlyProxy onlyOwner \r\n    {}\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\r\n    {}\r\n\r\n    /** \r\n     * @dev Update the arkreenRegistry contract address.\r\n     */\r\n    function updateArkreenRegistry(address _address) external virtual onlyOwner {\r\n        arkreenRegistry = _address;\r\n        emit ArkreenRegistryUpdated(_address);\r\n    }\r\n\r\n    /** \r\n     * @dev Change the minimum offset amount \r\n     */\r\n    function setMinOffsetAmount(uint256 amount) external virtual onlyOwner {\r\n        minOffsetAmount = uint128(amount);\r\n    }\r\n\r\n    function registerDetail(uint256 amount, uint256 tokenId, bool bNew) external returns (uint256, uint256) {\r\n\r\n        // The caller should be the REC token contract\r\n        require( IArkreenRegistry(arkreenRegistry).tokenRECs(msg.sender) != address(0), 'ARB: Caller Not Allowed');\r\n        require(tokenId == partialARECIDExt[msg.sender], 'ARB: Error TokenId');\r\n\r\n        uint256 curAmount = partialAvailableAmountExt[msg.sender];\r\n        if(bNew) {\r\n            // Only register new details while offsetting more than current paratial amount\r\n            require(amount == curAmount, 'ARB: Wrong New');    \r\n            detailsCounter += 1;\r\n        } else {\r\n            require(amount <= curAmount, 'ARB: Wrong Amount');\r\n        }\r\n\r\n        OffsetDetail memory offsetDetail;\r\n        offsetDetail.amount = uint128(amount);\r\n        offsetDetail.tokenId = uint64(tokenId);\r\n\r\n        OffsetDetails[detailsCounter].push(offsetDetail);            \r\n        curAmount = (partialAvailableAmountExt[msg.sender] -= amount);   // if bNew is true, partialAvailableAmountExt will be 0\r\n        \r\n        return (detailsCounter, curAmount);\r\n    }\r\n\r\n    function getDetailStatus(address tokenAREC) external view returns (uint256, uint256) {\r\n        return (partialAvailableAmountExt[tokenAREC], partialARECIDExt[tokenAREC]);\r\n    }\r\n\r\n    /** \r\n     * @dev To register offset actions so that they can be linked to an offset certificate NFT.\r\n     * Can only be called from the REC token contract, or from the REC issuance contrarct\r\n     * @param offsetEntity The entity that is offsetting the renewable energy.\r\n     * @param issuerREC The address of the REC issuer.\r\n     * @param amount The amount of the RE that is offset.\r\n     */\r\n    function registerOffset(\r\n        address offsetEntity,\r\n        address issuerREC,\r\n        uint256 amount,\r\n        uint256 tokenId\r\n    ) external returns (uint256) {\r\n        address RECIssuance = IArkreenRegistry(arkreenRegistry).getRECIssuance();\r\n        bool isRECIssuance = (msg.sender == RECIssuance);\r\n        bool isOffsetTokenId = (tokenId == 0) || ((tokenId >> 64) != 0);        // FLAG_OFFSET = 1<<64, to compliant with old design \r\n\r\n        // Check called from the REC token contract, or from the REC issuance contrarct\r\n        require( isRECIssuance || issuerREC == IArkreenRegistry(arkreenRegistry).tokenRECs(msg.sender), 'ARB: Wrong Issuer');\r\n\r\n        // TokenId should not be zero for RECIssuance, and should be offset type for RECToken\r\n        require(isRECIssuance != isOffsetTokenId, 'ARB: Wrong TokenId');\r\n\r\n        // Check the minimum offset amount\r\n        require( amount >= minOffsetAmount, 'ARB: Less Amount');\r\n\r\n        uint256 offsetId = offsetCounter + 1;\r\n        offsetCounter = offsetId;\r\n\r\n        if(isOffsetTokenId) {\r\n            if(tokenId != 0) {                          // to be compliant with old design\r\n                tokenId = uint64(tokenId);\r\n                if(tokenId ==0) {\r\n                    tokenId = partialARECIDExt[msg.sender] + (1<<63);\r\n                    partialAvailableAmountExt[msg.sender] -= amount;\r\n                } else {\r\n                    tokenId = uint64(detailsCounter) + (3<< 62);\r\n                }\r\n            }\r\n        }\r\n\r\n        OffsetAction memory offsetAction = OffsetAction(offsetEntity, issuerREC, uint128(amount), uint64(tokenId),\r\n                                                        uint56(block.timestamp), false);\r\n        offsetActions[offsetId] = offsetAction;\r\n\r\n        // Add offset ID to the user\r\n        userActions[offsetEntity].push(offsetId);\r\n        totalOffsetRegistered += amount;\r\n\r\n        return offsetId;\r\n    }\r\n\r\n    /**\r\n     * @dev Attach new offset action ids to an existing NFT.\r\n     * @param tokenId Id of the NFT to attach offset actions to.\r\n     * @param offsetIds List of offset action ids to link with the NFT.\r\n     */\r\n    function attachOffsetEvents(\r\n        uint256 tokenId,\r\n        uint256[] calldata offsetIds\r\n    ) external {\r\n        address tokenOwner = ownerOf(tokenId);\r\n        require(msg.sender == tokenOwner, 'ARB: Not Owner');\r\n        require(block.timestamp < (certificates[tokenId].creationTime + 3 days), 'ARB: Time Elapsed');        \r\n\r\n        uint256 offsetAmount =_attachOffsetEvents(tokenId, tokenOwner, offsetIds);\r\n        certificates[tokenId].offsetTotalAmount += offsetAmount;\r\n\r\n        // Accumulate the total retired offset amount\r\n        totalOffsetRetired += offsetAmount;\r\n    }    \r\n\r\n    /**\r\n     * @dev Attach offset actions to an NFT\r\n     * @param tokenId Id of the NFT to attach offset actions to\r\n     * @param offsetEntity Entity that is attaching offset actions\r\n     * @param offsetIds List of offset action ids to attach\r\n     */\r\n    function _attachOffsetEvents(\r\n        uint256 tokenId,\r\n        address offsetEntity,\r\n        uint256[] calldata offsetIds\r\n    ) internal returns(uint256) {\r\n        // List should not be empty\r\n        require(offsetIds.length != 0, 'ARB Empty List');\r\n\r\n        //slither-disable-next-line uninitialized-local\r\n        uint256 offsetAmount;\r\n\r\n        //slither-disable-next-line uninitialized-local\r\n        for (uint256 i; i < offsetIds.length; i++) {\r\n            uint256 offsetId = offsetIds[i];\r\n\r\n            // Check entity is identical\r\n            require(offsetActions[offsetId].offsetEntity == offsetEntity, 'ARB: Wrong Enity');\r\n\r\n            // Should not be attached\r\n            require(!offsetActions[offsetId].bClaimed, 'ARB: Already Claimed');\r\n            offsetActions[offsetId].bClaimed = true;\r\n\r\n            certificates[tokenId].offsetIds.push(offsetId);\r\n            offsetAmount += uint256(offsetActions[offsetId].amount);\r\n        }\r\n        \r\n        return offsetAmount;\r\n    }    \r\n\r\n    /**\r\n     * @dev Mint new RET Offset Certificate NFT which contains how much renewable energy are offset.\r\n     * @param offsetEntity The entity that holds offset actions and is eligible to mint an NFT.\r\n     * @param offsetEntityID ID string of the offset entity.\r\n     * @param beneficiary Beneficiary address for whom the RE was offset.\r\n     * @param beneficiaryID ID string of the beneficiary.\r\n     * @param offsetMessage Message to illustrate the offset intention.\r\n     * @param offsetIds ID list of the offset actions to attach to the NFT.\r\n     */\r\n    function mintCertificate(\r\n        address             offsetEntity,\r\n        address             beneficiary,\r\n        string calldata     offsetEntityID,\r\n        string calldata     beneficiaryID,\r\n        string calldata     offsetMessage,\r\n        uint256[] calldata  offsetIds\r\n    ) external virtual {\r\n        // The caller is either the offseting enity, or the REC token contract, or the REC issuance contract\r\n        require(_msgSender() == offsetEntity ||\r\n                IArkreenRegistry(arkreenRegistry).getRECIssuance() == msg.sender ||\r\n                IArkreenRegistry(arkreenRegistry).tokenRECs(msg.sender) != address(0),\r\n                'ARB: Caller Not Allowed');\r\n\r\n        uint256 offsetId = totalSupply() + 1;\r\n        _safeMint(offsetEntity, offsetId);\r\n\r\n        // Attach offset events to the newly minted NFT\r\n        uint256 offsetAmount = _attachOffsetEvents(offsetId, offsetEntity, offsetIds);\r\n\r\n        certificates[offsetId].offsetEntity = offsetEntity;\r\n        certificates[offsetId].beneficiary = beneficiary;\r\n        certificates[offsetId].offsetEntityID = offsetEntityID;      \r\n        certificates[offsetId].beneficiaryID = beneficiaryID;\r\n        certificates[offsetId].offsetMessage = offsetMessage;\r\n        certificates[offsetId].creationTime = block.timestamp;\r\n        certificates[offsetId].offsetTotalAmount += offsetAmount;\r\n\r\n        // Accumulate the total retired offset amount\r\n        totalOffsetRetired += offsetAmount;\r\n\r\n        emit OffsetCertificateMinted(offsetId);\r\n        emit Locked(offsetId);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the message of offset certificate NFT, only callable within 3 days post creation.\r\n     * Empty values are ignored, existing stored values are kept.\r\n     * @param tokenId ID of the NFT to update.\r\n     * @param offsetEntityID Identification string for the offset entity.\r\n     * @param beneficiary Address of the beneficiary to store in the NFT.\r\n     * @param beneficiaryID Identification string of the beneficiary\r\n     * @param offsetMessage Offset indication message to store in the NFT.\r\n     */\r\n    function updateCertificate(\r\n        uint256 tokenId,\r\n        address beneficiary,        \r\n        string calldata offsetEntityID,\r\n        string calldata beneficiaryID,\r\n        string calldata offsetMessage\r\n    ) external virtual {\r\n        require(msg.sender == ownerOf(tokenId), 'ARB: Not Owner');\r\n        require(block.timestamp < (certificates[tokenId].creationTime + 3 days), 'ARB: Time Elapsed');\r\n\r\n        if (beneficiary != address(0)) {\r\n            certificates[tokenId].beneficiary = beneficiary;\r\n        }\r\n        if (bytes(offsetEntityID).length != 0) {\r\n            certificates[tokenId].offsetEntityID = offsetEntityID;\r\n        }\r\n        if (bytes(beneficiaryID).length != 0) {\r\n            certificates[tokenId].beneficiaryID = beneficiaryID;\r\n        }\r\n        if (bytes(offsetMessage).length != 0) {\r\n            certificates[tokenId].offsetMessage = offsetMessage;\r\n        }\r\n\r\n        emit OffsetCertificateUpdated(tokenId);\r\n    }\r\n\r\n\r\n    /// @dev Receive hook to liquidize Arkreen RE Certificate into RE ERC20 Token\r\n    function onERC721Received(\r\n        address,  /* operator */\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external virtual override whenNotPaused returns (bytes4) {\r\n\r\n        // Check calling from REC Manager\r\n        address issuerREC = IArkreenRegistry(arkreenRegistry).getRECIssuance();\r\n        require( issuerREC == msg.sender, 'ARB: Not From REC Issuance');\r\n\r\n        (address issuer, uint128 amountREC, uint8 status, uint16 idAsset) = IArkreenRECIssuance(msg.sender).getRECDataCore(tokenId);\r\n\r\n        if(from == IArkreenRegistry(arkreenRegistry).getRECToken(issuer, idAsset)) {\r\n            require(status == uint256(RECStatus.Retired), 'ARB: Wrong Status'); \r\n            require(partialAvailableAmountExt[from] == 0, 'ARB: Partial Left');\r\n            partialARECIDExt[from] = tokenId;\r\n            partialAvailableAmountExt[from] = amountREC;\r\n            return this.onERC721Received.selector;\r\n        }\r\n\r\n        require( keccak256(data) == keccak256(\"Redeem\"), 'ARB: Refused');\r\n        require( status == uint256(RECStatus.Certified), 'ARB: Wrong Status');  // Checking may be removed\r\n\r\n        totalRedeemed = totalRedeemed + amountREC;\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public view override( ERC721EnumerableUpgradeable) returns (bool)\r\n    {\r\n        return  interfaceId == type(IERC721Receiver).interfaceId || \r\n                interfaceId == type(IERC5192).interfaceId || \r\n                super.supportsInterface(interfaceId);\r\n    }  \r\n\r\n    /**\r\n     * @dev Get all the offset record of the specified NFT.        \r\n     */\r\n    function getCertificate(uint256 tokenId) external view returns (OffsetRecord memory) {\r\n        return certificates[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the list of all the offset actions ids        \r\n     */\r\n    function getUserEvents(address user) external view returns (uint256[] memory) {\r\n        return userActions[user];\r\n    }\r\n\r\n    /// @dev retrieve all data from OffsetAction struct\r\n    function getOffsetActions(uint256 offsetId) external view virtual returns (OffsetAction memory) {\r\n        return (offsetActions[offsetId]);\r\n    }    \r\n    \r\n    /// @dev retrieve the offset detaild specified by OffsetDetailId\r\n    function getOffsetDetails(uint256 OffsetDetailId) external view virtual returns (OffsetDetail[] memory) {\r\n        return (OffsetDetails[OffsetDetailId]);\r\n    } \r\n\r\n    /**\r\n     * @dev Get total offset amount of the specified NFT.        \r\n     */\r\n    function getOffsetAmount(uint256 tokenId) external view returns (uint256 amount) {\r\n        return certificates[tokenId].offsetTotalAmount;\r\n    }\r\n\r\n    /** \r\n     * @dev Change the BaseURI\r\n     */\r\n    function setBaseURI(string memory newBaseURI) external virtual onlyOwner {\r\n        baseURI = newBaseURI;\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory cid = cidBadge[tokenId];\r\n        if( bytes(cid).length > 0) {\r\n          return string(abi.encodePacked(\"https://\", cid, \".ipfs.w3s.link\"));\r\n        } else {\r\n          return super.tokenURI(tokenId);\r\n        }\r\n    }\r\n\r\n    function updateCID(uint256[] calldata tokenId, string[] calldata cid) external virtual onlyOwner {\r\n        require(tokenId.length == cid.length, \"'ARB: Wrong Data\");\r\n\r\n        for(uint256 index; index < tokenId.length; index++ ) {\r\n          cidBadge[tokenId[index]] = cid[index];\r\n        }\r\n    }    \r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. Miner Info is checked as the following rules:  \r\n     * A) Game miner cannot be transferred\r\n     * B) Only miner in Normal state can be transferred\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override (ERC721EnumerableUpgradeable) {\r\n        require(from == address(0), 'ARB: Transfer Not Allowed');\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function locked(uint256 tokenId) external view returns (bool){\r\n        require((tokenId > 0) && (tokenId <= totalSupply()), 'ARB: Wrong tokenId');\r\n        return true;  \r\n    }\r\n\r\n    // Add SBT interface(0.1.1)\r\n    // Add offset trace function (0.2.0)\r\n    function getVersion() external pure virtual returns (string memory) {\r\n        return \"0.2.0\";\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/ArkreenBadgeStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./ArkreenBadgeType.sol\";  \n\nabstract contract ArkreenBadgeStorage {\n    string public baseURI;\n    uint256 public minOffsetAmount;\n\n    address public arkreenRegistry;                // contracts storing all miner's ownership        \n\n    /// @dev Counter of total offset action, also the id tracks the offset action\n    uint256 public offsetCounter;\n\n    /// @dev Total redeemed REC amount\n    uint256 public totalRedeemed;\n\n    /// @dev Total offset AREC amount registered in offset actions\n    uint256 public totalOffsetRegistered;\n\n    /// @dev Total offset AREC amount retired in AREC retiremment certificateion\n    uint256 public totalOffsetRetired;    \n      \n    /// @dev mapping from offsetCounter to OffsetAction data\n    mapping(uint256 => OffsetAction) public offsetActions;\n\n    /// @dev List all the offset action ids belonging to user\n    mapping(address => uint256[]) public userActions;\n\n    mapping(uint256 => OffsetRecord) public certificates;       // Retirement Badges\n\n    uint256 public partialARECID;                        // AREC NFT ID partialy offset\n    uint256 public partialAvailableAmount;               // Amount available for partial offset\n\n    uint256 public detailsCounter;\n    mapping(uint256 => OffsetDetail[]) public OffsetDetails;\n\n    mapping(address => uint256) public partialARECIDExt;            // AREC NFT ID already partialy offset, from REC Token to ID\n    mapping(address => uint256) public partialAvailableAmountExt;   // Amount available for partial offset, from REC Token to Amount\n\n    mapping(uint256 => string) public cidBadge; \n}"
    },
    "contracts/interfaces/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IPausable {\n    function paused() external view returns (bool);\n    function pause() external;\n    function unpause() external;\n}\n"
    },
    "contracts/interfaces/IArkreenRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IArkreenRegistry {\n    function getArkreenMiner() external view returns (address);\n    function recIssuers(address) external view returns (uint256);\n    function getRECIssuance() external view returns (address);\n    function isRECIssuer(address) external view returns(bool);\n    function getRECToken(address, uint256) external view returns (address);\n    function tokenRECs(address) external view returns (address);  \n    function getArkreenRetirement() external view returns (address);  \n    function getAssetInfo(uint256) external view returns (address issuer, address tokenREC,\n                                    address tokenPay, uint128 rateToIssue, uint16 rateToLiquidize);\n}\n"
    },
    "contracts/interfaces/IArkreenRECIssuance.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"../ArkreenRECIssuanceType.sol\";\r\n\r\ninterface IArkreenRECIssuance {\r\n    function baseURI() external view returns (string memory);\r\n    function getRECData(uint256 tokenId) external view returns (RECData memory);\r\n    function getRECDataCore(uint256 tokenId) external view \r\n                            returns(address issuer, uint128 amountREC, uint8 status, uint16 idAsset); \r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n"
    },
    "contracts/interfaces/IERC5192.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IERC5192 {\n  /// @notice Emitted when the locking status is changed to locked.\n  /// @dev If a token is minted and the status is locked, this event should be emitted.\n  /// @param tokenId The identifier for a token.\n  event Locked(uint256 tokenId);\n\n  /// @notice Emitted when the locking status is changed to unlocked.\n  /// @dev If a token is minted and the status is unlocked, this event should be emitted.\n  /// @param tokenId The identifier for a token.\n  event Unlocked(uint256 tokenId);\n\n  /// @notice Returns the locking status of an Soulbound Token\n  /// @dev SBTs assigned to zero address are considered invalid, and queries\n  /// about them do throw.\n  /// @param tokenId The identifier for an SBT.\n  function locked(uint256 tokenId) external view returns (bool);\n}"
    },
    "contracts/ArkreenBadgeType.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nstruct OffsetRecord {\n    address   offsetEntity;\n    address   beneficiary;\n    string    offsetEntityID;\n    string    beneficiaryID;\n    string    offsetMessage;\n    uint256   creationTime;\n    uint256   offsetTotalAmount;\n    uint256[] offsetIds;\n}\n/**\n * @dev Detailed offset info, both applicable for REC NFT and REC token.\n */\nstruct OffsetAction {\n    address offsetEntity;\n    address issuerREC;                    // the ERC20 token can be referred from registed issuer address\n    uint128 amount;\n    uint64  tokenId;                      // id of the REC NFT, = 0 for REC ERC20 token\n    uint56  createdAt;\n    bool    bClaimed;\n}\nstruct OffsetDetail {\n    uint64  tokenId;                      // id of the REC NFT, = 0 for REC ERC20 token\n    uint128 amount;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/ArkreenRECIssuanceType.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nenum RECStatus {\n  Pending,            // 0\n  Rejected,           // 1\n  Cancelled,          // 2\n  Certified,          // 3\n  Retired,            // 4\n  Liquidized          // 5\n}\n\nstruct Signature {\n    address     token;\n    uint256     value;\n    uint256     deadline;  \n    uint8       v;\n    bytes32     r;\n    bytes32     s;              \n}\n\nstruct PayInfo {\n    address     token;\n    uint256     value;\n}\n\nstruct RECRequest {\n    address   issuer;\n    uint32    startTime;\n    uint32    endTime;\n    uint128   amountREC;\n    string    cID;\n    string    region;      \n    string    url;\n    string    memo;\n} \n\nstruct RECData {\n    address   issuer;\n    string    serialNumber;\n    address   minter;\n    uint32    startTime;\n    uint32    endTime;\n    uint128   amountREC;\n    uint8     status;\n    string    cID;\n    string    region;\n    string    url;\n    string    memo;\n    uint16    idAsset;\n}\n\nstruct ARECAmount {\n    uint256   ARECID;\n    uint128   amountREC;\n}\n\nstruct RECMintPrice {\n    address   token;\n    uint256   value;\n}\n"
    },
    "contracts/HashKeyESGBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\n\r\nimport \"./interfaces/IPausable.sol\";\r\nimport \"./interfaces/IERC5192.sol\";\r\nimport \"./ArkreenBuilderTypes.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./interfaces/IWETH.sol\";\r\nimport \"./interfaces/IERC20Permit.sol\";\r\n\r\n// Import this file to use console.log\r\n//import \"hardhat/console.sol\";\r\n\r\ncontract HashKeyESGBTC is\r\n    OwnableUpgradeable,\r\n    UUPSUpgradeable,\r\n    ERC721EnumerableUpgradeable,\r\n    IERC5192\r\n{\r\n    using AddressUpgradeable for address;\r\n\r\n    // Public variables\r\n    string  public    constant NAME             = 'Eco Coiner';\r\n    string  public    constant SYMBOL           = 'EC';\r\n    uint256 public    constant ART_DECIMAL      = 9;\r\n    uint256 private   constant MAX_BRICK_ID     = 4096;\r\n    uint256 private   constant MASK_ID          = 0xFFF;\r\n\r\n    string  public baseURI;\r\n    address public tokenHART;                         // HashKey Pro ART\r\n    address public arkreenBuilder;\r\n    address public tokenNative;                         // The wrapped token of the Native token, such as WETH, WMATIC\r\n    mapping(uint256 => uint256) public brickIds;        // Green Id -> Owned brick id list, maximumly 21 bricks, 12 bits each\r\n    mapping(uint256 => uint256) public greenIdLoc;      // Brick Id -> Green Id\r\n    mapping(uint256 => uint256[]) public brickIdsMVP;   // Green Id -> bricks id more than 21 cells\r\n    uint256 public ESGBadgeLimit;                       // Limit of each level of ESG badge, one byte for one level, starting from low end\r\n    uint256 public ESGBadgeCount;                       // Count of each level of ESG badge, one byte for one level, starting from low end\r\n\r\n    // The total REC amount to greenize the BTC block mined at the same time of HashKey Pro opening ceremony\r\n    uint256 public maxRECToGreenBTC;\r\n\r\n    mapping(uint256 => uint256) public levelOrder;      // Green Id -> level + order in level\r\n    mapping(uint256 => string)  public cidBadge;        // Green Id -> cID\r\n\r\n    mapping(address => bool)  public whiteARTList;      // ART token -> true/false\r\n\r\n    // Events\r\n\r\n    // Modifiers\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'HSKESG: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address builder, address hArt, address native, uint256 numBlock) external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __UUPSUpgradeable_init();        \r\n        __ERC721_init_unchained(NAME, SYMBOL);\r\n\r\n        arkreenBuilder      = builder; \r\n        tokenHART           = hArt;\r\n        tokenNative         = native;\r\n        maxRECToGreenBTC    = numBlock;\r\n\r\n        baseURI = 'https://www.arkreen.com/ESGBTC/' ;\r\n    }   \r\n\r\n    function postUpdate(uint256[] calldata order) external onlyProxy onlyOwner {\r\n        for(uint256 index; index < order.length; index++) {\r\n            levelOrder[index+1] = order[index];\r\n        }\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\r\n    {}\r\n\r\n    /** \r\n     * @dev Greenize BTC with Native token, such as MATIC.\r\n     * @param bricksToGreen The brick ID list in the format of IDn || ... || ID2 || ID1, each of which is 12 bits.\r\n     * @param deadline The deadline to cancel the transaction.\r\n     * @param badgeInfo The information to be included for climate badge.\r\n     */\r\n    function greenizeBTCNative(\r\n        uint256             bricksToGreen,      \r\n        uint256             deadline,\r\n        BadgeInfo calldata  badgeInfo\r\n    ) external payable ensure(deadline) {                       // Deadline will be checked by router, no need to check here. \r\n\r\n        address actorGreenBTC = _msgSender();\r\n        uint256 amountART = _mintESGBadge(actorGreenBTC, bricksToGreen);        \r\n        \r\n        // Wrap MATIC to WMATIC  \r\n        IWETH(tokenNative).deposit{value: msg.value}();\r\n\r\n        // actionBuilderBadge(address,address,uint256,uint256,uint256,uint256,(address,string,string,string)): 0x8D7FCEFD\r\n        uint256 modeAction = (bricksToGreen>>255)<<1;     \r\n        bytes memory callData = abi.encodeWithSelector(0x8D7FCEFD, tokenNative, tokenHART, msg.value,\r\n                                                        amountART, modeAction, deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, actorGreenBTC));     // Pay back to msg.sender already\r\n    }\r\n\r\n    function greenizeBTCNativeMVP(\r\n        uint256             bricksToGreen,   \r\n        uint256[] memory    bricksToGreenMVP,           \r\n        uint256             deadline,\r\n        BadgeInfo calldata  badgeInfo\r\n    ) external payable ensure(deadline) {                       // Deadline will be checked by router, no need to check here. \r\n\r\n        address actorGreenBTC = _msgSender();\r\n        uint256 amountART = _mintESGBadgeMVP(actorGreenBTC, bricksToGreen, bricksToGreenMVP);        \r\n        \r\n        // Wrap MATIC to WMATIC  \r\n        IWETH(tokenNative).deposit{value: msg.value}();\r\n\r\n        // actionBuilderBadge(address,address,uint256,uint256,uint256,uint256,(address,string,string,string)): 0x8D7FCEFD\r\n        uint256 modeAction = (bricksToGreen>>255)<<1;     \r\n        bytes memory callData = abi.encodeWithSelector(0x8D7FCEFD, tokenNative, tokenHART, msg.value,\r\n                                                        amountART, modeAction, deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, actorGreenBTC));     // Pay back to msg.sender already\r\n\r\n    }\r\n\r\n    /** \r\n     * @dev Greenize BTC with specified ART token\r\n     * @param tokenART Address of the ART token, which should be whitelisted in the accepted list.\r\n     * @param bricksToGreen The brick ID list in the format of IDn || ... || ID2 || ID1, each of which is 12 bits\r\n     * @param deadline The deadline to cancel the transaction\r\n     * @param badgeInfo The information to be included for climate badge\r\n     */\r\n    function greenizeBTCWithART(\r\n        address             tokenART,\r\n        uint256             bricksToGreen,   \r\n        uint256             deadline,        \r\n        BadgeInfo calldata  badgeInfo\r\n    ) external ensure(deadline) {\r\n\r\n        require(whiteARTList[tokenART], \"HSKESG: ART Not Accepted\"); \r\n\r\n        address actorGreenBTC = _msgSender();\r\n        uint256 amountART = _mintESGBadge(actorGreenBTC, bricksToGreen);\r\n\r\n        // Transfer payement \r\n        TransferHelper.safeTransferFrom(tokenART, actorGreenBTC, address(this), amountART);\r\n\r\n        // actionBuilderBadgeWithART(address,uint256,uint256,(address,string,string,string)): 0x6E556DF8\r\n        bytes memory callData = abi.encodeWithSelector(0x6E556DF8, tokenART, amountART, deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, actorGreenBTC));\r\n    }\r\n\r\n\r\n    /** \r\n     * @dev Greenize BTC with specified payment token\r\n     * @param tokenPay The token to pay for swapping ART token\r\n     * @param amountPay The maximum amount of tokenPay which will de paid\r\n     * @param bricksToGreen The brick ID list in the format of IDn || ... || ID2 || ID1, each of which is 12 bits\r\n     * @param deadline The deadline to cancel the transaction\r\n     * @param badgeInfo The information to be included for climate badge\r\n     */\r\n    function greenizeBTC(\r\n        address             tokenPay,\r\n        uint256             amountPay,\r\n        uint256             bricksToGreen,   \r\n        uint256             deadline,        \r\n        BadgeInfo calldata  badgeInfo\r\n    ) external ensure(deadline) {                               // Deadline will be checked by router, no need to check here.\r\n\r\n        address actorGreenBTC = _msgSender();\r\n        uint256 amountART = _mintESGBadge(actorGreenBTC, bricksToGreen);\r\n\r\n        // Transfer payement \r\n        TransferHelper.safeTransferFrom(tokenPay, actorGreenBTC, address(this), amountPay);\r\n        \r\n        // actionBuilderBadge(address,address,uint256,uint256,uint256,uint256,(address,string,string,string)): 0x8D7FCEFD\r\n        uint256 modeAction = (bricksToGreen>>255)<<1;\r\n        bytes memory callData = abi.encodeWithSelector(0x8D7FCEFD, tokenPay, tokenHART, amountPay,\r\n                                                        amountART, modeAction, deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, actorGreenBTC));\r\n    }\r\n\r\n    function greenizeBTCMVP(\r\n        address             tokenPay,\r\n        uint256             amountPay,\r\n        uint256             bricksToGreen,   \r\n        uint256[] memory    bricksToGreenMVP,\r\n        uint256             deadline,        \r\n        BadgeInfo calldata  badgeInfo\r\n    ) external ensure(deadline) {                               // Deadline will be checked by router, no need to check here.\r\n\r\n        address actorGreenBTC = _msgSender();\r\n        uint256 amountART = _mintESGBadgeMVP(actorGreenBTC, bricksToGreen, bricksToGreenMVP);\r\n\r\n        // Transfer payement \r\n        TransferHelper.safeTransferFrom(tokenPay, actorGreenBTC, address(this), amountPay);\r\n        \r\n        // actionBuilderBadge(address,address,uint256,uint256,uint256,uint256,(address,string,string,string)): 0x8D7FCEFD\r\n        uint256 modeAction = (bricksToGreen>>255)<<1;\r\n        bytes memory callData = abi.encodeWithSelector(0x8D7FCEFD, tokenPay, tokenHART, amountPay,\r\n                                                        amountART, modeAction, deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, actorGreenBTC));\r\n    }\r\n\r\n    /** \r\n     * @dev Greenize BTC with payment Approval.\r\n     * @param bricksToGreen The brick ID list in the format of IDn || ... || ID2 || ID1, each of which is 12 bits.\r\n     * @param badgeInfo The information to be included for climate badge.\r\n     * @param permitToPay The Permit information to approve the payment token to swap for ART token \r\n     */\r\n    function greenizeBTCPermit(\r\n        uint256             bricksToGreen,      \r\n        BadgeInfo calldata  badgeInfo,\r\n        Signature calldata  permitToPay\r\n    ) external ensure(permitToPay.deadline) {                     // Deadline will be checked by router, no need to check here. \r\n\r\n        address actorGreenBTC = _msgSender();\r\n        uint256 amountART = _mintESGBadge(actorGreenBTC, bricksToGreen);\r\n\r\n        // Permit payment token\r\n        IERC20Permit(permitToPay.token).permit(actorGreenBTC, address(this), \r\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\r\n\r\n        // Transfer payement \r\n        TransferHelper.safeTransferFrom(permitToPay.token, actorGreenBTC, address(this), permitToPay.value);\r\n\r\n        // actionBuilderBadge(address,address,uint256,uint256,uint256,uint256,(address,string,string,string)): 0x8D7FCEFD\r\n        uint256 modeAction = (bricksToGreen>>255)<<1;\r\n        bytes memory callData = abi.encodeWithSelector(0x8D7FCEFD, permitToPay.token, tokenHART, permitToPay.value,\r\n                                                        amountART, modeAction, permitToPay.deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, actorGreenBTC));\r\n    }\r\n\r\n    /** \r\n     * @dev Greenize BTC with payment Approval.\r\n     * @param bricksToGreen The brick ID list in the format of IDn || ... || ID2 || ID1, each of which is 12 bits.\r\n     * @param badgeInfo The information to be included for climate badge.\r\n     * @param permitToPay The Permit information to approve the payment token to swap for ART token \r\n     */\r\n    function greenizeBTCPermitMVP(\r\n        uint256             bricksToGreen,\r\n        uint256[] memory    bricksToGreenMVP,\r\n        BadgeInfo calldata  badgeInfo,\r\n        Signature calldata  permitToPay\r\n    ) external ensure(permitToPay.deadline) {                     // Deadline will be checked by router, no need to check here. \r\n\r\n        address actorGreenBTC = _msgSender();\r\n        uint256 amountART = _mintESGBadgeMVP(actorGreenBTC, bricksToGreen, bricksToGreenMVP);\r\n\r\n        // Permit payment token\r\n        IERC20Permit(permitToPay.token).permit(actorGreenBTC, address(this), \r\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\r\n\r\n        // Transfer payement \r\n        TransferHelper.safeTransferFrom(permitToPay.token, actorGreenBTC, address(this), permitToPay.value);\r\n\r\n        // actionBuilderBadge(address,address,uint256,uint256,uint256,uint256,(address,string,string,string)): 0x8D7FCEFD\r\n        uint256 modeAction = (bricksToGreen>>255)<<1;\r\n        bytes memory callData = abi.encodeWithSelector(0x8D7FCEFD, permitToPay.token, tokenHART, permitToPay.value,\r\n                                                        amountART, modeAction, permitToPay.deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, actorGreenBTC));\r\n    }\r\n\r\n\r\n    /** \r\n     * @dev mint ESGBadge to the greenActor\r\n     * @param actorGreenBTC The address of the actor\r\n     * @param bricksToGreen The brick ID list in the format of IDn || ... || ID2 || ID1, each of which is 12 bits\r\n     * @return uint256 The amount ART token to pay for the ESG badge\r\n     */\r\n    function _mintESGBadge(address actorGreenBTC, uint256 bricksToGreen) internal returns (uint256){\r\n        uint256 amountART;\r\n        uint256 brickID;\r\n\r\n        require( bricksToGreen > 0, \"HSKESG: Wrong IDs\");\r\n\r\n        bricksToGreen = (bricksToGreen<<4) >> 4;                            // clear 4 msb, uint252\r\n        uint256 greenId = totalSupply() + 1;\r\n        _safeMint(actorGreenBTC, greenId);\r\n        brickIds[greenId] = bricksToGreen;\r\n\r\n        while( (brickID = (bricksToGreen & MASK_ID)) != 0) {\r\n            amountART += 1;\r\n            setBrick(brickID, greenId);\r\n            bricksToGreen = bricksToGreen >> 12;\r\n        }\r\n\r\n        uint256 levelOffet = ((amountART-1)/3) * 8;\r\n        uint256 limit = (ESGBadgeLimit >> levelOffet) & 0xFF; \r\n        uint256 count = (ESGBadgeCount >> levelOffet) & 0xFF; \r\n\r\n        require( count < limit, \"HSKESG: Reach Limit\");\r\n        ESGBadgeCount += (1 << levelOffet);                     // Add count, no overflow happens here\r\n\r\n        levelOrder[greenId] = (((levelOffet/8) + 1) << 8) + (count + 1);\r\n\r\n        return amountART * 2 * (10**ART_DECIMAL);               // 1 Cell -> 2 ART token \r\n    }\r\n\r\n    /** \r\n     * @dev mint ESGBadge to the greenActor\r\n     * @param actorGreenBTC The address of the actor\r\n     * @param bricksToGreen The brick ID list in the format of IDn || ... || ID2 || ID1, each of which is 12 bits\r\n     * @return uint256 The amount ART token to pay for the ESG badge\r\n     */\r\n    function _mintESGBadgeMVP(address actorGreenBTC, uint256 bricksToGreen, uint256[] memory bricksToGreenMVP) internal returns (uint256) {\r\n        uint256 amountART;\r\n        uint256 brickID;\r\n\r\n        require( bricksToGreen > 0, \"HSKESG: Wrong IDs\");\r\n\r\n        bricksToGreen = (bricksToGreen<<4) >> 4;                            // clear 4 msb, uint252\r\n        uint256 greenId = totalSupply() + 1;\r\n        _safeMint(actorGreenBTC, greenId);\r\n\r\n        uint256 flagMVP = (bricksToGreenMVP.length > 0) ? (1<<255) : 0;\r\n        brickIds[greenId] = bricksToGreen | flagMVP;\r\n\r\n        while( (brickID = (bricksToGreen & MASK_ID)) != 0) {\r\n            amountART += 1;\r\n            setBrick(brickID, greenId);\r\n            bricksToGreen = bricksToGreen >> 12;\r\n        }\r\n        \r\n        if(bricksToGreenMVP.length > 0 ) {\r\n          require (amountART == 21, \"HSKESG: Not MVP\"); \r\n          brickIdsMVP[greenId] = bricksToGreenMVP;\r\n\r\n          for (uint256 index; index < bricksToGreenMVP.length; index++) {\r\n            bricksToGreen = (bricksToGreenMVP[index]<<4) >> 4;\r\n            while( (brickID = (bricksToGreen & MASK_ID)) != 0) {\r\n                amountART += 1;\r\n                setBrick(brickID, greenId);\r\n                bricksToGreen = bricksToGreen >> 12;\r\n            }\r\n          }\r\n        }\r\n\r\n        uint256 levelOffet = (amountART >= 22) ? 7*8 : ((amountART-1)/3) * 8;\r\n        uint256 limit = (ESGBadgeLimit >> levelOffet) & 0xFF; \r\n        uint256 count = (ESGBadgeCount >> levelOffet) & 0xFF; \r\n\r\n        require( count < limit, \"HSKESG: Reach Limit\");\r\n        ESGBadgeCount += (1 << levelOffet);                     // Add count, no overflow happens here     \r\n\r\n        levelOrder[greenId] =  (((levelOffet/8) + 1) << 8) + (count + 1);\r\n   \r\n        return amountART * 2 * (10**ART_DECIMAL);             // 1 Cell -> 2 ART token \r\n    }\r\n\r\n\r\n    /** \r\n     * @dev call actionBuilderBadge to buy ART token and mint the Arkreen cliamte badge.\r\n     * @param callData The calling data with actors address attached\r\n     */\r\n    function _actionBuilderBadge(bytes memory callData) internal {\r\n        (bool success, bytes memory returndata) = arkreenBuilder.call(callData);\r\n\r\n         if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"HSKESG: Error Call to actionBuilderBadge\");\r\n            }\r\n        }        \r\n    }\r\n\r\n    /** \r\n     * @dev set the greenId to the given brick\r\n     */\r\n    function setBrick(uint256 brickId, uint256 greenId) internal {                           //  brickId starts from 1\r\n        require((brickId != 0) || (brickId <= maxRECToGreenBTC), \"HSKESG: Wrong Brick ID\");\r\n        require( greenIdLoc[brickId] == 0,  \"HSKESG: Brick Occupied\");\r\n        greenIdLoc[brickId] = greenId;\r\n    }\r\n\r\n    /** \r\n     * @dev Return the given brick information: owner, greenId, and all sibbling bricks\r\n     */\r\n    function ownerBricks(uint256 brickId) external view returns (address owner, uint256 greenId, uint256 bricks) {\r\n        require((brickId != 0) || (brickId <= maxRECToGreenBTC), \"HSKESG: Wrong Brick ID\");\r\n        greenId = greenIdLoc[brickId];\r\n        owner = ownerOf(greenId);\r\n        bricks = brickIds[greenId];\r\n    }\r\n\r\n    /** \r\n     * @dev Check if the given brick occupied\r\n     */\r\n    function checkBrick(uint256 brickId) external view returns (bool) {         //  brickId starts from 1\r\n        require((brickId != 0) || (brickId <= maxRECToGreenBTC), \"HSKESG: Wrong Brick ID\");\r\n        return greenIdLoc[brickId] != 0;\r\n    }    \r\n\r\n\r\n    /** \r\n     * @dev Update the ESGBadgeLimit\r\n     */\r\n    function UpdateESGBadgeLimit(uint256 limit, uint256 count ) external onlyOwner {    \r\n        if(limit!=0)  ESGBadgeLimit = limit;\r\n        if(count!=0) ESGBadgeCount = count;\r\n    }    \r\n\r\n    /** \r\n     * @dev Get the all MVP blocks of the specified GreenID\r\n     */\r\n    function getMVPBlocks(uint256 greenId) external view returns (uint256[] memory bricksMVP) {         //  brickId starts from 1\r\n        return brickIdsMVP[greenId];\r\n    }       \r\n\r\n    /**\r\n     * @dev update the maximum REC number to green BTC block\r\n     * @param amountREC type of the managing account\r\n     */\r\n    function setRECAmount(uint256 amountREC) external onlyOwner {\r\n        maxRECToGreenBTC = amountREC;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the token that the  arkreenBuilder smart contract can transfer from this ESG smart contract\r\n     * @param tokens The token list\r\n     */\r\n    function approveBuilder(address[] calldata tokens) external onlyOwner {\r\n        require(arkreenBuilder != address(0), \"HSKESG: No Builder\");\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            TransferHelper.safeApprove(tokens[i], arkreenBuilder, type(uint256).max);\r\n        }\r\n    }       \r\n\r\n    /**\r\n     * @dev Add or remove the acceptable ART tokens\r\n     */\r\n    function mangeARTTokens(address[] calldata tokenARTList, bool addOrRemove) external onlyOwner {\r\n        for(uint256 i = 0; i < tokenARTList.length; i++) {\r\n            address tokenART = tokenARTList[i];\r\n\r\n            require(tokenART != address(0) && whiteARTList[tokenART] != addOrRemove, \"HSKESG: Wrong ART Status\");\r\n            whiteARTList[tokenART] = addOrRemove;\r\n        }\r\n    }      \r\n\r\n    /** \r\n     * @dev Change the BaseURI\r\n     */\r\n    function setBaseURI(string calldata newBaseURI) external virtual onlyOwner {\r\n        baseURI = newBaseURI;\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory cid = cidBadge[levelOrder[tokenId]];\r\n        if( bytes(cid).length > 0) {\r\n            return string(abi.encodePacked(\"https://\", cid, \".ipfs.w3s.link\"));\r\n        } else {\r\n            return super.tokenURI(tokenId);\r\n        }\r\n    }    \r\n\r\n    function updateCID(uint256 level, uint256 limit, bytes calldata allCID) external virtual onlyOwner {\r\n        uint256 length = allCID.length;\r\n        uint256 offset = 0;\r\n        for(uint256 idxLevel = (level & 0xFF); idxLevel <= (level >> 8); idxLevel++) {\r\n            uint256 levelLimit = limit & 0xFF;\r\n            limit = limit >> 8;\r\n            for(uint256 idxLimit = 1; idxLimit <= levelLimit; idxLimit++ ) {\r\n                uint256 badgeID = (idxLevel<<8) + idxLimit;\r\n                require( (offset+59) <= length, \"ARB: Overflowed\");\r\n                cidBadge[badgeID] = string(abi.encodePacked(allCID[offset: offset + 59]));\r\n                offset += 59;\r\n            }\r\n        }\r\n    }        \r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. Blocking transfer unless minting\r\n     */\r\n/*    \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override (ERC721EnumerableUpgradeable) {\r\n        require(from == address(0), 'ARB: Transfer Not Allowed');\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n*/\r\n\r\n    /**\r\n     * @dev get all the brick IDs with in th scope specified by the paramters\r\n     * @param tokeIDStart the starting token ID, from which all brick IDs are returned\r\n     * @param tokeIDEnd the starting token ID, till which all brick IDs are retured\r\n     */\r\n    function getAllBrickIDs(uint256 tokeIDStart, uint256 tokeIDEnd) \r\n                external view returns (uint256 totalTokens, address[] memory owners, uint256[] memory allBricks) {\r\n\r\n        totalTokens = totalSupply();\r\n        if(tokeIDEnd == 0) tokeIDEnd = totalTokens;\r\n        require( (tokeIDStart >= 1) && (tokeIDStart <= tokeIDEnd) && (tokeIDEnd <= totalTokens), 'ARB: Wrong tokeID');\r\n\r\n        owners =  new address[](tokeIDEnd - tokeIDStart + 1);\r\n        allBricks = new uint256[](tokeIDEnd - tokeIDStart + 1);\r\n        uint256 offset;\r\n        for (uint256 index = tokeIDStart; index <= tokeIDEnd; index++ ) {\r\n            owners[offset] = ownerOf(index);\r\n            allBricks[offset] = brickIds[index];\r\n            offset += 1;\r\n        }\r\n    }\r\n\r\n    function locked(uint256 tokenId) external view returns (bool) {\r\n        require((tokenId > 0) && (tokenId <= totalSupply()), 'ARB: Wrong tokenId');\r\n        return true;  \r\n    }\r\n}\r\n"
    },
    "contracts/ArkreenBuilderTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nstruct twinPair {\r\n    address     poolAB;\r\n    address     poolBA;\r\n}\r\n\r\nstruct Signature {\r\n    address     token;\r\n    uint256     value;\r\n    uint256     deadline;  \r\n    uint8       v;\r\n    bytes32     r;\r\n    bytes32     s;              \r\n}\r\n\r\nstruct SigRegister {\r\n    uint8       v;\r\n    bytes32     r;\r\n    bytes32     s;              \r\n}\r\n\r\nstruct BadgeInfo {\r\n    address     beneficiary;\r\n    string      offsetEntityID;\r\n    string      beneficiaryID;\r\n    string      offsetMessage;\r\n}"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}"
    },
    "contracts/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as th xe allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/types/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <=0.8.14;\n\nimport \"../interfaces/IERC20Permit.sol\";\nimport \"./ERC20.sol\";\nimport \"../types/EIP712.sol\";\nimport \"../libraries/ECDSA.sol\";\nimport \"../libraries/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "contracts/types/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.8.4 <=0.8.14;\n\nimport \"../libraries/SafeMath.sol\";\nimport \"../interfaces/IERC20.sol\";\n\nabstract contract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    // TODO comment actual hash value.\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256(\"ERC20Token\");\n\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 internal _totalSupply;\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal immutable _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\n        );\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from_,\n        address to_,\n        uint256 amount_\n    ) internal virtual {}\n}\n"
    },
    "contracts/types/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../libraries/ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = chainID;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        if (chainID == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, chainID, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "contracts/libraries/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/libraries/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./SafeMath.sol\";\n\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        assert(a == b * c + (a % b)); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    // Only used in the  BondingCalculator.sol\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\n        if (a > 3) {\n            c = a;\n            uint256 b = add(div(a, 2), 1);\n            while (b < c) {\n                c = b;\n                b = div(add(div(a, b), b), 2);\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/ArkreenRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\r\n\r\nimport \"./interfaces/IMinerRegister.sol\";\r\nimport \"./interfaces/IArkreenRegistry.sol\";\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./ArkreenRegistryStorage.sol\";\r\n\r\ncontract ArkreenRegistry is\r\n    OwnableUpgradeable,\r\n    PausableUpgradeable,\r\n    AccessControlUpgradeable,\r\n    UUPSUpgradeable,\r\n    ArkreenRegistryStorage\r\n{    \r\n    using AddressUpgradeable for address;\r\n\r\n    // Constants\r\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\r\n\r\n    modifier checkAddress(address addressToCheck) {\r\n        require(addressToCheck != address(0), 'Arkreen: Zero Address');\r\n        require(addressToCheck.isContract(), \"Arkreen: Wrong Contract Address\");\r\n        _;\r\n    }\r\n\r\n    /// @dev modifier that only lets the contract's owner and granted pausers pause the system\r\n    modifier onlyPausers() {\r\n        require(\r\n            hasRole(PAUSER_ROLE, msg.sender) || owner() == msg.sender,\r\n            'Arkreen: Caller Not Allowed'\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n  \r\n    function initialize() external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __Pausable_init_unchained();\r\n        __AccessControl_init_unchained();                \r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation)\r\n        internal\r\n        virtual\r\n        override\r\n        onlyOwner\r\n    {}\r\n\r\n    /// @dev Emergency function to pause the system\r\n    function pause() external virtual onlyPausers {\r\n        _pause();\r\n    }\r\n\r\n    /// @dev unpause the system\r\n    function unpause() external virtual onlyPausers {\r\n        _unpause();\r\n    }\r\n\r\n    function addRECIssuer(address issuer, address tokenREC, string memory issuerId) external virtual onlyOwner {\r\n        require(issuer != address(0), 'Arkreen: Zero Address');\r\n        require(tokenREC.isContract(), 'Arkreen: Wrong Token Address');\r\n\r\n        require(recIssuers[issuer].addTime == uint64(0), 'Arkreen: Issuer Already Added');\r\n\r\n        unchecked { ++numIssuers; }\r\n        IssuerStatus memory issuerStatus = IssuerStatus(true, uint64(block.timestamp), uint64(0), tokenREC, issuerId);\r\n        recIssuers[issuer] = issuerStatus;\r\n        tokenRECs[tokenREC] = issuer;\r\n        allIssuers[numIssuers] = issuer;\r\n    }\r\n\r\n    function removeRECIssuer(address issuer) external virtual onlyOwner {\r\n        require(issuer != address(0), 'Arkreen: Zero Address');\r\n        require(recIssuers[issuer].added, 'Arkreen: Issuer Not Added');\r\n        recIssuers[issuer].added = false;\r\n        recIssuers[issuer].removeTime = uint64(block.timestamp);\r\n        // the mapping from tokenREC to recIssuers are kept\r\n    }\r\n\r\n    function isRECIssuer(address issuer) external view virtual returns(bool) {\r\n        return recIssuers[issuer].added;\r\n    }\r\n\r\n    function newAssetAREC(string calldata idAsset, address issuer, address tokenREC, address tokenPay,\r\n                        uint128 rateToIssue, uint16 rateToLiquidize, string calldata description) external virtual onlyOwner {\r\n        numAsset += 1;\r\n        tokenRECs[tokenREC] = issuer;\r\n        allAssets[numAsset] = AssetAREC(idAsset, issuer, tokenREC, tokenPay, rateToIssue, rateToLiquidize, true, description);\r\n    }\r\n\r\n    function manageAssetAREC( uint256 idxAsset, uint256 flag, uint128 rateToIssue, uint16 rateToLiquidize, bool bActive,\r\n                                string calldata description) external {\r\n\r\n        require( (msg.sender == allAssets[idxAsset].issuer) || (owner() == msg.sender), 'Arkreen: Not Allowed');                                 \r\n        if((flag & 0x01) != 0) {\r\n            allAssets[idxAsset].rateToIssue = rateToIssue;\r\n        }\r\n        if((flag & 0x02) != 0) {\r\n            require(rateToLiquidize < 10000, \"Arkreen: Wrong liquidize rate\");\r\n            allAssets[idxAsset].rateToLiquidize = rateToLiquidize;\r\n        }\r\n        if((flag & 0x04) != 0) {\r\n            allAssets[idxAsset].bActive = bActive;\r\n        }\r\n        if((flag & 0x08) != 0) {\r\n            allAssets[idxAsset].description = description;\r\n        }        \r\n    }\r\n\r\n    function manageAssetARECExt( uint256 idxAsset, uint256 flag, string calldata idAsset, address issuer, \r\n                                address tokenREC, address tokenPay) external virtual onlyOwner {\r\n        if((flag & 0x01) != 0) {\r\n            allAssets[idxAsset].idAsset = idAsset;\r\n        }\r\n        if((flag & 0x02) != 0) {\r\n            allAssets[idxAsset].issuer = issuer;\r\n        }\r\n        if((flag & 0x04) != 0) {\r\n            allAssets[idxAsset].tokenREC = tokenREC;\r\n        }\r\n        if((flag & 0x08) != 0) {\r\n            allAssets[idxAsset].tokenPay = tokenPay;\r\n        }        \r\n    }\r\n\r\n    function getAssetInfo(uint256 idAsset) public view returns (address issuer, address tokenREC,\r\n                                    address tokenPay, uint128 rateToIssue, uint16 rateToLiquidize) {\r\n        require(allAssets[idAsset].bActive, \"Arkreen: Wrong Asset\");\r\n        issuer = allAssets[idAsset].issuer;\r\n        tokenREC = allAssets[idAsset].tokenREC;\r\n        tokenPay = allAssets[idAsset].tokenPay;\r\n        rateToIssue = allAssets[idAsset].rateToIssue;      \r\n        rateToLiquidize = allAssets[idAsset].rateToLiquidize;      \r\n    }\r\n\r\n\r\n    function getRECToken(address issuer, uint256 idAsset) external view virtual returns(address tokenREC) {\r\n        if( idAsset == 0) {\r\n            require(recIssuers[issuer].added, 'Arkreen: Issuer Not Added');\r\n            tokenREC = recIssuers[issuer].tokenREC;\r\n        } else {\r\n            tokenREC = allAssets[idAsset].tokenREC;\r\n        }\r\n    }\r\n\r\n    function setArkreenRetirement(address arkRetirement) external virtual onlyOwner checkAddress(arkRetirement) {\r\n        arkreenRECRetirement = arkRetirement;\r\n    }\r\n\r\n    function getArkreenRetirement() external view virtual returns (address) {\r\n        require(arkreenRECRetirement != address(0), 'Arkreen: Zero Retirement Address');\r\n        return arkreenRECRetirement;\r\n    }  \r\n\r\n    function setArkreenMiner(address arkMiner) external virtual onlyOwner checkAddress(arkMiner) {\r\n        arkreenMiner = arkMiner;\r\n    }\r\n\r\n    function getArkreenMiner() external view virtual returns (address) {\r\n        require(arkreenMiner != address(0), 'Arkreen: Zero Miner Address');\r\n        return arkreenMiner;\r\n    }  \r\n\r\n    function setRECIssuance(address recIssuance) external virtual onlyOwner checkAddress(recIssuance) {\r\n        arkreenRECIssuance = recIssuance;\r\n    }\r\n\r\n    function getRECIssuance() external view virtual returns (address) {\r\n        require(arkreenRECIssuance != address(0), 'Arkreen: Zero Issuance Address');\r\n        return arkreenRECIssuance;\r\n    }    \r\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IMinerRegister.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IMinerRegister {\n    function isOwner(address owner) external returns (bool);\n}\n"
    },
    "contracts/ArkreenRegistryStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n/// @dev  ArkreenRegistryStorage is to store system critical information\r\ncontract ArkreenRegistryStorage {\r\n\r\n    struct IssuerStatus {\r\n        bool      added;\r\n        uint64    addTime;\r\n        uint64    removeTime;\r\n        address   tokenREC;\r\n        string    issuerId;\r\n    }\r\n\r\n    struct AssetAREC {\r\n        string      idAsset;        \r\n        address     issuer;        \r\n        address     tokenREC;\r\n        address     tokenPay;\r\n        uint128     rateToIssue;                // Calculated based on 1 AREC, 10**9\r\n        uint16      rateToLiquidize;            // Calculated based on 10000\r\n        bool        bActive;\r\n        string      description;\r\n    }\r\n\r\n    // Arkreen Miner Contact Address\r\n    address internal arkreenMiner;\r\n\r\n    // Arkreen REC Issuance Contact Address\r\n    address internal arkreenRECIssuance;\r\n\r\n    // Arkreen REC Retirement Contract Address\r\n    address internal arkreenRECRetirement;\r\n    \r\n    // REC issuers\r\n    uint256 public numIssuers;\r\n    mapping(address => IssuerStatus) public recIssuers;     // REC issuer -> IssuerStatus\r\n    mapping(address => address) public tokenRECs;           // mapping token to issuer\r\n    mapping(uint256 => address) public allIssuers;          // All Issuers\r\n    uint256 public numAsset;\r\n    mapping(uint256 => AssetAREC) public allAssets;          // All assets\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/GreenBTCImage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n\r\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\nimport \"./libraries/FormattedStrings.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\n\r\nimport './GreenBTCType.sol';\r\n\r\ncontract GreenBTCImage {\r\n \r\n    using Strings for uint128;\r\n    using Strings for uint256;\r\n    using Strings for address;\r\n    using FormattedStrings for uint256;\r\n\r\n    function _decimalTruncate(string memory _str, uint256 decimalDigits) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(_str);\r\n        uint256 dotIndex = strBytes.length;\r\n\r\n        for (uint256 i = 0; i < strBytes.length; i++) {\r\n            if (strBytes[i] == \".\") {\r\n\r\n                if(i + decimalDigits + 1 < strBytes.length){\r\n                    dotIndex = i + decimalDigits + 1;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        bytes memory result = new bytes(dotIndex);\r\n        for (uint256 i = 0; i < dotIndex; i++) {\r\n            result[i] = strBytes[i];\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n\r\n    function getCertificateSVGBytes(GreenBTCInfo calldata gbtc) external pure returns(string memory){\r\n\r\n        string memory turncateEnergy = _decimalTruncate(gbtc.energyStr, 3);\r\n\r\n        bytes memory imgBytes = abi.encodePacked(\r\n            '<svg width=\"300\" height=\"300\" xmlns=\"http://www.w3.org/2000/svg\" font-family=\"Courier New\">'\r\n            '<rect width=\"300\" height=\"300\" rx=\"10\" fill=\"#f3f6d3\" />'\r\n            '<path fill=\"#fffef8\" d=\"M0 60h300v125H0z\" />'\r\n            '<rect y=\"240\" width=\"300\" height=\"60\" rx=\"10\" fill=\"#e5d2bd\" />'\r\n            '<path fill=\"#f6dfeb\" d=\"M0 180h300v70H0z\" />'\r\n            '<text x=\"15\" y=\"25\" class=\"prefix__medium\">GREENBTC CERTIFICATE</text>'\r\n            '<path fill=\"#8E8984\" d=\"M15 50h115v.409H15z\" />'\r\n            '<path opacity=\".1\" stroke=\"#5F5246\" stroke-width=\"20\" stroke-dasharray=\"5 5 5\" d=\"M275 208v87\" />'\r\n            '<text x=\"15\" y=\"95\" class=\"prefix__medium\">HEIGHT&gt;</text>'\r\n            '<text x=\"110\" y=\"95\" class=\"prefix__medium\">',\r\n            gbtc.height.toString(),\r\n            '</text>'\r\n            '<text x=\"15\" y=\"115\" class=\"prefix__medium\">POWER&gt;</text>'\r\n            '<text x=\"110\" y=\"115\" class=\"prefix__medium\">',\r\n            turncateEnergy,\r\n            '  kWh'\r\n            '</text>'\r\n            '<text x=\"15\" y=\"210\" class=\"prefix__medium\">OWNER:</text>'\r\n            '<text x=\"15\" y=\"230\" font-size=\"9\">',\r\n            gbtc.beneficiary.toHexString(),\r\n            '</text>'\r\n            '<g opacity=\".25\" fill=\"#FFC736\">'\r\n            '<path d=\"M223.859 16.717h-.26V0H203.51v16.717h-20.096v123.824h20.096v16.733h20.089v-16.733h.26v-26.773H210.2V90.342h13.659V63.57H210.2V43.49h13.659V16.717zM236.579 63.57h17.148c5.547 0 10.044-4.495 10.044-10.04 0-5.545-4.497-10.04-10.044-10.04h-17.148V0h20.071v16.832c18.974 1.489 33.907 17.35 33.907 36.698a36.655 36.655 0 01-8.866 23.957 38.316 38.316 0 018.866 24.568c0 19.7-14.809 35.943-33.907 38.214v17.005h-20.071v-43.506h15.473c6.473 0 11.719-5.244 11.719-11.713 0-6.469-5.246-11.713-11.719-11.713h-15.473V63.57z\" />'\r\n            '</g>'\r\n            '<style>.prefix__medium{font-size:16px}</style>'\r\n            '</svg>'\r\n        );\r\n\r\n        return  string(Base64.encode(imgBytes));\r\n    }\r\n\r\n\r\n    function getGreenTreeSVGBytes() external pure returns(string memory) {\r\n        // bytes memory imgBytes = abi.encodePacked(\r\n        //     '<svg width=\"320\" height=\"320\" viewBox=\"0 0 320 320\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">'\r\n        //     '<rect x=\"160\" y=\"40\" width=\"20\" height=\"20\" fill=\"#8BF887\"/>'\r\n        //     '<rect x=\"160\" y=\"40\" width=\"20\" height=\"20\" fill=\"#8BF887\"/>'\r\n        //     '<rect x=\"160\" y=\"40\" width=\"20\" height=\"20\" fill=\"#8BF887\"/>'\r\n        //     '<rect x=\"160\" y=\"20\" width=\"20\" height=\"20\" fill=\"#85E9BF\"/>'\r\n        //     '<rect x=\"140\" y=\"20\" width=\"20\" height=\"20\" fill=\"#B2F887\"/>'\r\n        //     '<rect x=\"140\" y=\"40\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"160\" y=\"60\" width=\"20\" height=\"20\" fill=\"#8AF188\"/>'\r\n        //     '<rect x=\"160\" y=\"80\" width=\"20\" height=\"20\" fill=\"#8AF188\"/>'\r\n        //     '<rect x=\"160\" y=\"100\" width=\"20\" height=\"20\" fill=\"#7DE088\"/>'\r\n        //     '<rect x=\"160\" y=\"120\" width=\"20\" height=\"20\" fill=\"#86DE8F\"/>'\r\n        //     '<rect x=\"160\" y=\"140\" width=\"20\" height=\"20\" fill=\"#7EE188\"/>'\r\n        //     '<rect x=\"160\" y=\"160\" width=\"20\" height=\"20\" fill=\"#77EB73\"/>'\r\n        //     '<rect x=\"160\" y=\"200\" width=\"20\" height=\"20\" fill=\"#7EE188\"/>'\r\n        //     '<rect x=\"160\" y=\"240\" width=\"20\" height=\"20\" fill=\"#60C3B6\"/>'\r\n        //     '<rect x=\"160\" y=\"180\" width=\"20\" height=\"20\" fill=\"#9CEB8F\"/>'\r\n        //     '<rect x=\"160\" y=\"220\" width=\"20\" height=\"20\" fill=\"#6ACEA7\"/>'\r\n        //     '<rect x=\"160\" y=\"260\" width=\"20\" height=\"20\" fill=\"#63C0B1\"/>'\r\n        //     '<rect x=\"160\" y=\"280\" width=\"20\" height=\"20\" fill=\"#DB946C\"/>'\r\n        //     '<rect x=\"140\" y=\"60\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"140\" y=\"80\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"80\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"100\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"120\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"140\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"100\" y=\"140\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"160\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"200\" width=\"20\" height=\"20\" fill=\"#C7F7A1\"/>'\r\n        //     '<rect x=\"100\" y=\"200\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"100\" y=\"240\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"80\" y=\"240\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"80\" y=\"220\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"240\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"100\" y=\"160\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"180\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"120\" y=\"220\" width=\"20\" height=\"20\" fill=\"#80E383\"/>'\r\n        //     '<rect x=\"120\" y=\"260\" width=\"20\" height=\"20\" fill=\"#60C3B6\"/>'\r\n        //     '<rect x=\"100\" y=\"180\" width=\"20\" height=\"20\" fill=\"#DAFF98\"/>'\r\n        //     '<rect x=\"100\" y=\"220\" width=\"20\" height=\"20\" fill=\"#A9ED91\"/>'\r\n        //     '<rect x=\"100\" y=\"260\" width=\"20\" height=\"20\" fill=\"#60C3B6\"/>'\r\n        //     '<rect x=\"140\" y=\"100\" width=\"20\" height=\"20\" fill=\"#C7F7A1\"/>'\r\n        //     '<rect x=\"140\" y=\"120\" width=\"20\" height=\"20\" fill=\"#9CEB8F\"/>'\r\n        //     '<rect x=\"140\" y=\"140\" width=\"20\" height=\"20\" fill=\"#9CEB8F\"/>'\r\n        //     '<rect x=\"140\" y=\"160\" width=\"20\" height=\"20\" fill=\"#9CEB8F\"/>'\r\n        //     '<rect x=\"140\" y=\"200\" width=\"20\" height=\"20\" fill=\"#C7F7A1\"/>'\r\n        //     '<rect x=\"140\" y=\"240\" width=\"20\" height=\"20\" fill=\"#61C4B4\"/>'\r\n        //     '<rect x=\"120\" y=\"240\" width=\"20\" height=\"20\" fill=\"#70CD9B\"/>'\r\n        //     '<rect x=\"140\" y=\"180\" width=\"20\" height=\"20\" fill=\"#D5FE95\"/>'\r\n        //     '<rect x=\"140\" y=\"220\" width=\"20\" height=\"20\" fill=\"#7EE187\"/>'\r\n        //     '<rect x=\"140\" y=\"260\" width=\"20\" height=\"20\" fill=\"#60C3B6\"/>'\r\n        //     '<rect x=\"180\" y=\"40\" width=\"20\" height=\"20\" fill=\"#62D1B6\"/>'\r\n        //     '<rect x=\"180\" y=\"60\" width=\"20\" height=\"20\" fill=\"#62D1B6\"/>'\r\n        //     '<rect x=\"180\" y=\"80\" width=\"20\" height=\"20\" fill=\"#68DAA2\"/>'\r\n        //     '<rect x=\"180\" y=\"100\" width=\"20\" height=\"20\" fill=\"#61CEB7\"/>'\r\n        //     '<rect x=\"180\" y=\"120\" width=\"20\" height=\"20\" fill=\"#61CEB7\"/>'\r\n        //     '<rect x=\"180\" y=\"140\" width=\"20\" height=\"20\" fill=\"#61CEB7\"/>'\r\n        //     '<rect x=\"180\" y=\"160\" width=\"20\" height=\"20\" fill=\"#73D69A\"/>'\r\n        //     '<rect x=\"180\" y=\"200\" width=\"20\" height=\"20\" fill=\"#7EE188\"/>'\r\n        //     '<rect x=\"180\" y=\"240\" width=\"20\" height=\"20\" fill=\"#53B5B7\"/>'\r\n        //     '<rect x=\"180\" y=\"180\" width=\"20\" height=\"20\" fill=\"#7EE188\"/>'\r\n        //     '<rect x=\"180\" y=\"220\" width=\"20\" height=\"20\" fill=\"#60C3B6\"/>'\r\n        //     '<rect x=\"180\" y=\"260\" width=\"20\" height=\"20\" fill=\"#60C3B6\"/>'\r\n        //     '<rect x=\"200\" y=\"120\" width=\"20\" height=\"20\" fill=\"#55BEB9\"/>'\r\n        //     '<rect x=\"200\" y=\"140\" width=\"20\" height=\"20\" fill=\"#5FCCB7\"/>'\r\n        //     '<rect x=\"200\" y=\"160\" width=\"20\" height=\"20\" fill=\"#5FCCB7\"/>'\r\n        //     '<rect x=\"200\" y=\"200\" width=\"20\" height=\"20\" fill=\"#60C3B5\"/>'\r\n        //     '<rect x=\"200\" y=\"240\" width=\"20\" height=\"20\" fill=\"#53B5B7\"/>'\r\n        //     '<rect x=\"200\" y=\"180\" width=\"20\" height=\"20\" fill=\"#5FCCB7\"/>'\r\n        //     '<rect x=\"200\" y=\"220\" width=\"20\" height=\"20\" fill=\"#50B2B7\"/>'\r\n        //     '<rect x=\"200\" y=\"260\" width=\"20\" height=\"20\" fill=\"#5FCCB7\"/>'\r\n        //     '<rect x=\"220\" y=\"160\" width=\"20\" height=\"20\" fill=\"#64CDC8\"/>'\r\n        //     '<rect x=\"220\" y=\"200\" width=\"20\" height=\"20\" fill=\"#53B5B7\"/>'\r\n        //     '<rect x=\"220\" y=\"240\" width=\"20\" height=\"20\" fill=\"#57C0B9\"/>'\r\n        //     '<rect x=\"220\" y=\"180\" width=\"20\" height=\"20\" fill=\"#57C0B9\"/>'\r\n        //     '<rect x=\"220\" y=\"220\" width=\"20\" height=\"20\" fill=\"#53B5B7\"/>'\r\n        //     '<rect x=\"220\" y=\"260\" width=\"20\" height=\"20\" fill=\"#93E1D7\"/>'\r\n        //     '<rect x=\"160\" y=\"160\" width=\"20\" height=\"20\" fill=\"#FFFEF8\"/>'\r\n        //     '<rect x=\"160\" y=\"200\" width=\"20\" height=\"20\" fill=\"#FFFEF8\"/>'\r\n        //     '<rect x=\"160\" y=\"240\" width=\"20\" height=\"20\" fill=\"#FFFEF8\"/>'\r\n        //     '<rect x=\"140\" y=\"160\" width=\"20\" height=\"20\" fill=\"#FFFEF8\"/>'\r\n        //     '<rect x=\"180\" y=\"160\" width=\"20\" height=\"20\" fill=\"#FFFEF8\"/>'\r\n        //     '<rect x=\"180\" y=\"180\" width=\"20\" height=\"20\" fill=\"#FFFEF8\"/>'\r\n        //     '</svg>'\r\n\r\n        // );\r\n\r\n        bytes memory imgBytes = abi.encodePacked(\r\n            '<svg width=\"320\" height=\"320\" viewBox=\"0 0 320 320\" xmlns=\"http://www.w3.org/2000/svg\" shape-rendering=\"crispEdges\">'\r\n            '<rect width=\"100%\" height=\"100%\" fill=\"none\"/>'\r\n            '<rect width=\"320\" height=\"10\" x=\"0\" y=\"0\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"320\" height=\"10\" x=\"0\" y=\"10\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"150\" height=\"10\" x=\"0\" y=\"20\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"20\" fill=\"#234f38\"/>'\r\n            '<rect width=\"150\" height=\"10\" x=\"170\" y=\"20\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"140\" height=\"10\" x=\"0\" y=\"30\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"140\" y=\"30\" fill=\"#234f38\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"30\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"170\" y=\"30\" fill=\"#234f38\"/>'\r\n            '<rect width=\"140\" height=\"10\" x=\"180\" y=\"30\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"130\" height=\"10\" x=\"0\" y=\"40\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"130\" y=\"40\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"140\" y=\"40\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"40\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"170\" y=\"40\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"180\" y=\"40\" fill=\"#234f38\"/>'\r\n            '<rect width=\"130\" height=\"10\" x=\"190\" y=\"40\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"130\" height=\"10\" x=\"0\" y=\"50\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"130\" y=\"50\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"140\" y=\"50\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"50\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"170\" y=\"50\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"180\" y=\"50\" fill=\"#234f38\"/>'\r\n            '<rect width=\"130\" height=\"10\" x=\"190\" y=\"50\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"120\" height=\"10\" x=\"0\" y=\"60\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"120\" y=\"60\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"130\" y=\"60\" fill=\"#006b54\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"140\" y=\"60\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"150\" y=\"60\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"180\" y=\"60\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"60\" fill=\"#234f38\"/>'\r\n            '<rect width=\"120\" height=\"10\" x=\"200\" y=\"60\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"120\" height=\"10\" x=\"0\" y=\"70\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"120\" y=\"70\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"130\" y=\"70\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"140\" y=\"70\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"180\" y=\"70\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"70\" fill=\"#234f38\"/>'\r\n            '<rect width=\"120\" height=\"10\" x=\"200\" y=\"70\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"110\" height=\"10\" x=\"0\" y=\"80\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"110\" y=\"80\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"120\" y=\"80\" fill=\"#006b54\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"130\" y=\"80\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"80\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"200\" y=\"80\" fill=\"#234f38\"/>'\r\n            '<rect width=\"110\" height=\"10\" x=\"210\" y=\"80\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"100\" height=\"10\" x=\"0\" y=\"90\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"100\" y=\"90\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"110\" y=\"90\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"120\" y=\"90\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"140\" y=\"90\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"190\" y=\"90\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"210\" y=\"90\" fill=\"#234f38\"/>'\r\n            '<rect width=\"100\" height=\"10\" x=\"220\" y=\"90\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"0\" y=\"100\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"90\" y=\"100\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"100\" y=\"100\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"110\" y=\"100\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"130\" y=\"100\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"180\" y=\"100\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"220\" y=\"100\" fill=\"#234f38\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"230\" y=\"100\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"100\" height=\"10\" x=\"0\" y=\"110\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"100\" y=\"110\" fill=\"#234f38\"/>'\r\n            '<rect width=\"80\" height=\"10\" x=\"120\" y=\"110\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"200\" y=\"110\" fill=\"#234f38\"/>'\r\n            '<rect width=\"100\" height=\"10\" x=\"220\" y=\"110\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"0\" y=\"120\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"90\" y=\"120\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"100\" y=\"120\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"110\" y=\"120\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"130\" y=\"120\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"180\" y=\"120\" fill=\"#32f600\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"120\" fill=\"#33f600\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"200\" y=\"120\" fill=\"#37f501\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"220\" y=\"120\" fill=\"#234f38\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"230\" y=\"120\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"80\" height=\"10\" x=\"0\" y=\"130\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"80\" y=\"130\" fill=\"#234f38\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"90\" y=\"130\" fill=\"#006b54\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"110\" y=\"130\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"120\" y=\"130\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"140\" y=\"130\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"180\" y=\"130\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"210\" y=\"130\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"230\" y=\"130\" fill=\"#234f38\"/>'\r\n            '<rect width=\"80\" height=\"10\" x=\"240\" y=\"130\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"0\" y=\"140\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"90\" y=\"140\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"100\" y=\"140\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"110\" y=\"140\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"130\" y=\"140\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"190\" y=\"140\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"220\" y=\"140\" fill=\"#234f38\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"230\" y=\"140\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"80\" height=\"10\" x=\"0\" y=\"150\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"80\" y=\"150\" fill=\"#234f38\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"90\" y=\"150\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"110\" y=\"150\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"130\" y=\"150\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"150\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"170\" y=\"150\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"190\" y=\"150\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"220\" y=\"150\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"230\" y=\"150\" fill=\"#234f38\"/>'\r\n            '<rect width=\"80\" height=\"10\" x=\"240\" y=\"150\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"0\" y=\"160\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"70\" y=\"160\" fill=\"#234f38\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"80\" y=\"160\" fill=\"#006b54\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"100\" y=\"160\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"130\" y=\"160\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"160\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"170\" y=\"160\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"160\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"200\" y=\"160\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"240\" y=\"160\" fill=\"#234f38\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"250\" y=\"160\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"0\" y=\"170\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"60\" y=\"170\" fill=\"#234f38\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"70\" y=\"170\" fill=\"#006b54\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"110\" y=\"170\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"120\" y=\"170\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"170\" y=\"170\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"190\" y=\"170\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"240\" y=\"170\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"250\" y=\"170\" fill=\"#234f38\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"260\" y=\"170\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"0\" y=\"180\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"70\" y=\"180\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"100\" y=\"180\" fill=\"#006b54\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"110\" y=\"180\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"160\" y=\"180\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"180\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"200\" y=\"180\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"220\" y=\"180\" fill=\"#234f38\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"250\" y=\"180\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"80\" height=\"10\" x=\"0\" y=\"190\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"80\" y=\"190\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"90\" y=\"190\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"100\" y=\"190\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"120\" y=\"190\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"150\" y=\"190\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"180\" y=\"190\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"200\" y=\"190\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"230\" y=\"190\" fill=\"#234f38\"/>'\r\n            '<rect width=\"80\" height=\"10\" x=\"240\" y=\"190\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"0\" y=\"200\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"70\" y=\"200\" fill=\"#234f38\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"80\" y=\"200\" fill=\"#006b54\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"100\" y=\"200\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"130\" y=\"200\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"200\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"170\" y=\"200\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"230\" y=\"200\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"240\" y=\"200\" fill=\"#234f38\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"250\" y=\"200\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"0\" y=\"210\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"60\" y=\"210\" fill=\"#234f38\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"70\" y=\"210\" fill=\"#006b54\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"90\" y=\"210\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"120\" y=\"210\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"210\" y=\"210\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"250\" y=\"210\" fill=\"#234f38\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"260\" y=\"210\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"0\" y=\"220\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"70\" y=\"220\" fill=\"#234f38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"80\" y=\"220\" fill=\"#006b54\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"90\" y=\"220\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"220\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"170\" y=\"220\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"230\" y=\"220\" fill=\"#234f38\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"250\" y=\"220\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"0\" y=\"230\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"50\" y=\"230\" fill=\"#234f38\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"70\" y=\"230\" fill=\"#006b54\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"90\" y=\"230\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"110\" y=\"230\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"150\" y=\"230\" fill=\"#ffffff\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"170\" y=\"230\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"200\" y=\"230\" fill=\"#36f800\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"250\" y=\"230\" fill=\"#234f38\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"270\" y=\"230\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"0\" y=\"240\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"40\" y=\"240\" fill=\"#234f38\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"50\" y=\"240\" fill=\"#006b54\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"80\" y=\"240\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"110\" height=\"10\" x=\"120\" y=\"240\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"230\" y=\"240\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"270\" y=\"240\" fill=\"#234f38\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"280\" y=\"240\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"0\" y=\"250\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"50\" y=\"250\" fill=\"#234f38\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"60\" y=\"250\" fill=\"#006b54\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"90\" y=\"250\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"70\" height=\"10\" x=\"150\" y=\"250\" fill=\"#12b81b\"/>'\r\n            '<rect width=\"40\" height=\"10\" x=\"220\" y=\"250\" fill=\"#36f800\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"260\" y=\"250\" fill=\"#234f38\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"270\" y=\"250\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"0\" y=\"260\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"60\" y=\"260\" fill=\"#234f38\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"90\" y=\"260\" fill=\"#006b54\"/>'\r\n            '<rect width=\"80\" height=\"10\" x=\"150\" y=\"260\" fill=\"#0a7c35\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"230\" y=\"260\" fill=\"#234f38\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"260\" y=\"260\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"0\" y=\"270\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"140\" height=\"10\" x=\"90\" y=\"270\" fill=\"#234f38\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"230\" y=\"270\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"120\" height=\"10\" x=\"0\" y=\"280\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"120\" y=\"280\" fill=\"#71431d\"/>'\r\n            '<rect width=\"60\" height=\"10\" x=\"130\" y=\"280\" fill=\"#956c38\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"280\" fill=\"#71431d\"/>'\r\n            '<rect width=\"120\" height=\"10\" x=\"200\" y=\"280\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"100\" height=\"10\" x=\"0\" y=\"290\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"100\" y=\"290\" fill=\"#868ea1\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"120\" y=\"290\" fill=\"#71431d\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"130\" y=\"290\" fill=\"#956c38\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"140\" y=\"290\" fill=\"#bb8d37\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"170\" y=\"290\" fill=\"#bb8b39\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"180\" y=\"290\" fill=\"#ba8c37\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"290\" fill=\"#71431d\"/>'\r\n            '<rect width=\"20\" height=\"10\" x=\"200\" y=\"290\" fill=\"#868ea1\"/>'\r\n            '<rect width=\"100\" height=\"10\" x=\"220\" y=\"290\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"0\" y=\"300\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"90\" y=\"300\" fill=\"#868ea1\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"120\" y=\"300\" fill=\"#71431d\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"130\" y=\"300\" fill=\"#956c38\"/>'\r\n            '<rect width=\"50\" height=\"10\" x=\"140\" y=\"300\" fill=\"#ba8c37\"/>'\r\n            '<rect width=\"10\" height=\"10\" x=\"190\" y=\"300\" fill=\"#71431d\"/>'\r\n            '<rect width=\"30\" height=\"10\" x=\"200\" y=\"300\" fill=\"#868ea1\"/>'\r\n            '<rect width=\"90\" height=\"10\" x=\"230\" y=\"300\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"100\" height=\"10\" x=\"0\" y=\"310\" fill=\"#b0bec9\"/>'\r\n            '<rect width=\"120\" height=\"10\" x=\"100\" y=\"310\" fill=\"#868ea1\"/>'\r\n            '<rect width=\"100\" height=\"10\" x=\"220\" y=\"310\" fill=\"#b0bec9\"/>'\r\n            '</svg>'\r\n        );\r\n        \r\n\r\n        return  string(Base64.encode(imgBytes));\r\n    }\r\n\r\n    function getBlindBoxSVGBytes(uint256 num) external pure returns(string memory){\r\n        bytes memory imgBytes = abi.encodePacked(\r\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 192\" preserveAspectRatio=\"xMinYMin meet\" fill=\"none\">'\r\n            '<style>.f{font-family:Montserrat,arial,sans-serif;dominant-baseline:middle;text-anchor:middle}</style>'\r\n            '<path d=\"M96.864 172.667L33.356 136v56.833L96.863 246v-73.333zM160.4 135.997l-63.51 36.667v73.333l63.51-76.54v-33.46z\"/>'\r\n            '<path d=\"M96.86 99.33L33.352 62.665v73.333l63.508 36.667V99.33z\" fill=\"#E8C684\"/>'\r\n            '<path d=\"M160.395 62.67L96.887 99.335v73.333l63.508-36.667V62.67z\" fill=\"#D7A94F\"/>'\r\n            '<path d=\"M160.395 62.667L96.887 26 33.378 62.667l63.509 36.666 63.508-36.666z\" fill=\"#EEDEA6\"/>'\r\n            '<text class=\"f\" x=\"118\" y=\"7\" transform=\"rotate(30.5) skewX(-30)\" fill=\"#98601e\" font-size=\"16\" font-weight=\"400\">',\r\n            num.toString(),\r\n            \"</text>\"\r\n            '<text class=\"f\" x=\"68\" y=\"82\" transform=\"skewY(26.83) scale(.92718 1.07853)\" fill=\"rgba(255,255,255,.5)\" font-size=\"42\">?</text>'\r\n            \"</svg>\"\r\n        );\r\n\r\n        return  string(Base64.encode(imgBytes));\r\n    }\r\n\r\n}"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/libraries/FormattedStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nlibrary FormattedStrings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n            Base on OpenZeppelin `toString` method from `String` library\r\n     */\r\n    function toFormattedString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        uint256 pos;\r\n        uint256 comas = digits / 3;\r\n        digits = digits + (digits % 3 == 0 ? comas - 1 : comas);\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            if (pos == 3) {\r\n                buffer[digits] = \",\";\r\n                pos = 0;\r\n            } else {\r\n                buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n                value /= 10;\r\n                pos++;\r\n            }\r\n        }\r\n        return string(buffer);\r\n    }\r\n}"
    },
    "contracts/GreenBTCType.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nstruct GreenBTCInfo {\r\n    uint128     height;\r\n    uint128     ARTCount;\r\n    address     beneficiary;\r\n    uint8       greenType;\r\n    string      blockTime;          // For NFT display\r\n    string      energyStr;          // For NTT display\r\n}\r\n\r\nstruct NFTStaus {\r\n    address     owner;\r\n    uint64      blockHeight;\r\n    bool        open;\r\n    bool        reveal;\r\n    bool        won;\r\n    uint256     hash;\r\n}\r\n\r\nstruct OpenInfo {\r\n    uint64      tokenID;            // The token ID of the NFT opened\r\n    uint64      openHeight;         // The height of the block opening the NFT\r\n}\r\n\r\nstruct Sig {\r\n    uint8       v;\r\n    bytes32     r;\r\n    bytes32     s;              \r\n}\r\n\r\nstruct PayInfo {\r\n    address     token;\r\n    uint256     amount;\r\n}\r\n\r\nstruct BadgeInfo {\r\n    address     beneficiary;\r\n    string      offsetEntityID;\r\n    string      beneficiaryID;\r\n    string      offsetMessage;\r\n}"
    },
    "contracts/interfaces/IGreenBTCImage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '../GreenBTCType.sol';\r\n\r\ninterface IGreenBTCImage {\r\n    function getCertificateSVGBytes(GreenBTCInfo calldata gbtc) external pure returns(string memory);\r\n    function getGreenTreeSVGBytes() external pure returns(string memory);\r\n    function getBlindBoxSVGBytes(uint256 num) external pure returns(string memory);\r\n\r\n}\r\n"
    },
    "contracts/GreenBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\r\n\r\nimport \"./libraries/FormattedStrings.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\n\r\nimport \"./interfaces/IWETH.sol\";\r\nimport './interfaces/IGreenBTCImage.sol';\r\nimport './interfaces/IArkreenBuilder.sol';\r\nimport './interfaces/IArkreenRECBank.sol';\r\nimport './GreenBTCType.sol';\r\n\r\ncontract GreenBTC is \r\n    ContextUpgradeable,\r\n    UUPSUpgradeable,\r\n    OwnableUpgradeable,\r\n    ERC721EnumerableUpgradeable\r\n{\r\n\r\n    using Strings for uint256;\r\n    using Strings for address;\r\n    using FormattedStrings for uint256;\r\n\r\n    //keccak256(\"GreenBitCoin(uint256 height,string energyStr,uint256 artCount,string blockTime,address beneficiary,uint8 greenType)\");\r\n    bytes32 constant GREEN_BTC_TYPEHASH = 0x2cc287d531f97592968321a2680791d868f5cafdc02c8f9f059c431e7ef0f086;\r\n    string  constant NAME = \"GreenBTC\";\r\n    string  constant SYMBOL = \"GBTC\";\r\n    string  constant VERSION = \"1\";\r\n\r\n    uint256 constant RATE_WINNING  = 20;  \r\n\r\n    bytes32 public  DOMAIN_SEPARATOR;\r\n\r\n    address public manager;\r\n    address public authorizer;\r\n\r\n    address public greenBtcImage;\r\n    address public arkreenBuilder;\r\n    address public tokenCART;                       // CART token is bought to greenize Bitcoin by default while some other token is paid.\r\n    address public tokenNative;              \r\n\r\n    OpenInfo[] internal openingBoxList;             // Box in this list could be openned internally with just a trigger command \r\n    OpenInfo[] internal overtimeBoxList;            // Box in this list need to be revealed with external hash information\r\n\r\n    mapping (uint256 => GreenBTCInfo)  public dataGBTC;\r\n    mapping (uint256 => NFTStaus)  public dataNFT;\r\n    mapping(address => bool) public whiteARTList;   // ART token -> true/false\r\n\r\n    event GreenBitCoin(uint256 height, uint256 ARTCount, address beneficiary, uint8 greenType);\r\n    event OpenBox(address openner, uint256 tokenID, uint256 blockNumber);\r\n\r\n    event RevealBoxes(uint256[] revealList, bool[] wonList);\r\n\r\n    modifier ensure(uint256 deadline) {\r\n        require(deadline >= block.timestamp, 'GBTC: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager(){\r\n        require(msg.sender == manager, 'GBTC: Not Manager');\r\n        _;\r\n    }\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    //initialize\r\n    function initialize(address authorizer_, address builder, address cART, address native)\r\n        external\r\n        virtual\r\n        initializer\r\n    {\r\n        __UUPSUpgradeable_init();\r\n        __Ownable_init_unchained();\r\n        __ERC721_init_unchained(NAME, SYMBOL);\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(NAME)),\r\n                keccak256(bytes(VERSION)),\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );  \r\n\r\n        // manager = msg.sender;\r\n        manager         = owner();\r\n        authorizer      = authorizer_;\r\n        arkreenBuilder  = builder;\r\n        tokenCART       = cART;\r\n        tokenNative     = native;\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\r\n    {}\r\n\r\n    function setManager(address newManager) public onlyOwner{\r\n        require(newManager != address(0), \"GBTC: Zero Address\"); \r\n        manager = newManager;\r\n    }\r\n\r\n    function setAuthorizer(address newAuthAddress) public onlyManager {\r\n        require(newAuthAddress != address(0), \"GBTC: Zero Address\"); \r\n        authorizer = newAuthAddress;\r\n    }\r\n\r\n    function setImageContract(address newImageContract) public onlyManager {\r\n        require(newImageContract != address(0), 'GBTC: Zero Address');\r\n        greenBtcImage = newImageContract;\r\n    }\r\n\r\n    function setCARTContract(address newCARTToken) public onlyManager {\r\n        require(newCARTToken != address(0), 'GBTC: Zero Address');\r\n        tokenCART = newCARTToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the tokens which can be transferred from this GreenBTC contract by arkreenBuilder\r\n     * @param tokens The token list\r\n     */\r\n    function approveBuilder(address[] calldata tokens) public onlyManager {\r\n        require(arkreenBuilder != address(0), \"GBTC: No Builder\");\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            TransferHelper.safeApprove(tokens[i], arkreenBuilder, type(uint256).max);\r\n        }\r\n    }   \r\n\r\n    /** \r\n     * @dev Greenize BTC with the native token\r\n     * @param gbtc Bitcoin block info to be greenized\r\n     * @param sig Signature of the authority to Bitcoin block info\r\n     * @param badgeInfo Information that will logged in Arkreen climate badge\r\n     * @param deadline The deadline to cancel the transaction\r\n     */\r\n    function authMintGreenBTCWithNative(\r\n        GreenBTCInfo    calldata gbtc,\r\n        Sig             calldata sig,\r\n        BadgeInfo       calldata badgeInfo,\r\n        uint256                  deadline\r\n    ) public payable ensure(deadline) {\r\n\r\n        require(dataGBTC[gbtc.height].ARTCount == 0, \"GBTC: Already Minted\");\r\n        \r\n        _authVerify(gbtc, sig);                         //verify signature\r\n\r\n        IWETH(tokenNative).deposit{value: msg.value}(); // Wrap MATIC to WMATIC \r\n\r\n        uint256 modeAction = 0x03;                      // bit0 = 1: exact payment amount; bit1 = 1: ArkreenBank is used to get CART token\r\n\r\n        // actionBuilderBadge(address,address,uint256,uint256,uint256,uint256,(address,string,string,string)): 0x8D7FCEFD                                            \r\n        bytes memory callData = abi.encodeWithSelector( 0x8D7FCEFD, tokenNative, tokenCART, msg.value,\r\n                                                        gbtc.ARTCount, modeAction, deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, gbtc.beneficiary));     // Pay back to msg.sender already\r\n\r\n        _mintNFT(gbtc);\r\n\r\n        emit GreenBitCoin(gbtc.height, gbtc.ARTCount, gbtc.beneficiary, gbtc.greenType);\r\n    }\r\n\r\n    /** \r\n     * @dev Greenize BTC with the token/amount that the user has approved\r\n     * @param gbtc Bitcoin block info to be greenized\r\n     * @param sig Signature of the authority to Bitcoin block info\r\n     * @param badgeInfo Information that will logged in Arkreen climate badge\r\n     * @param payInfo Address and amount of the token that will be used to pay for offsetting ART\r\n     * @param deadline The deadline to cancel the transaction\r\n     */\r\n    function authMintGreenBTCWithApprove(\r\n        GreenBTCInfo    calldata gbtc, \r\n        Sig             calldata sig, \r\n        BadgeInfo       calldata badgeInfo, \r\n        PayInfo         calldata payInfo,\r\n        uint256                  deadline\r\n    ) external ensure(deadline) {\r\n\r\n        require(dataGBTC[gbtc.height].ARTCount == 0, \"GBTC: Already Minted\");\r\n       \r\n        // _authVerify(gbtc, sig);                         // verify signature // Remove for test\r\n\r\n        TransferHelper.safeTransferFrom(payInfo.token, msg.sender, address(this), payInfo.amount);\r\n\r\n        uint256 modeAction = 0x03;                      // bit0 = 1: exact payment amount; bit1 = 1: ArkreenBank is used to get CART token\r\n\r\n        // actionBuilderBadge(address,address,uint256,uint256,uint256,uint256,(address,string,string,string)): 0x8D7FCEFD                                            \r\n        bytes memory callData = abi.encodeWithSelector( 0x8D7FCEFD, payInfo.token, tokenCART, payInfo.amount,\r\n                                                        gbtc.ARTCount, modeAction, deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, gbtc.beneficiary));     // Pay back to msg.sender already ??\r\n\r\n        _mintNFT(gbtc);\r\n\r\n        emit GreenBitCoin(gbtc.height, gbtc.ARTCount, gbtc.beneficiary, gbtc.greenType);\r\n    }\r\n\r\n    /** \r\n     * @dev Greenize BTC with specified ART token\r\n     * @param gbtc Bitcoin block info to be greenized\r\n     * @param sig Signature of the authority to Bitcoin block info\r\n     * @param badgeInfo Information that will logged in Arkreen climate badge\r\n     * @param tokenART Address of the ART token, which should be whitelisted in the accepted list.\r\n     * @param deadline The deadline to cancel the transaction\r\n     */\r\n    function authMintGreenBTCWithART(\r\n        GreenBTCInfo    calldata gbtc, \r\n        Sig             calldata sig, \r\n        BadgeInfo       calldata badgeInfo,\r\n        address                  tokenART, \r\n        uint256                  deadline\r\n    )  public  ensure(deadline) {\r\n\r\n        require(dataGBTC[gbtc.height].ARTCount == 0, \"GBTC: Already Minted\");\r\n        require(whiteARTList[tokenART], \"GBTC: ART Not Accepted\"); \r\n\r\n        _authVerify(gbtc, sig);                                                 // verify signature\r\n\r\n        uint256  amountART = gbtc.ARTCount;\r\n        TransferHelper.safeTransferFrom(tokenART, msg.sender, address(this), amountART);\r\n\r\n        // actionBuilderBadgeWithART(address,uint256,uint256,(address,string,string,string)): 0x6E556DF8\r\n        bytes memory callData = abi.encodeWithSelector(0x6E556DF8, tokenART, amountART, deadline, badgeInfo);\r\n\r\n        _actionBuilderBadge(abi.encodePacked(callData, gbtc.beneficiary));\r\n\r\n        _mintNFT(gbtc);\r\n\r\n        emit GreenBitCoin(gbtc.height, gbtc.ARTCount, gbtc.beneficiary, gbtc.greenType);\r\n    }\r\n\r\n    /**\r\n     * @dev Open the Green Bitcoin box, only thw owner of the box acceptable.\r\n     * @param tokenID ID of the NFT token to be opened\r\n     */\r\n    function openBox(uint256 tokenID) public {\r\n        require(msg.sender == ownerOf(tokenID), \"GBTC: Not Owner\");\r\n        require(dataNFT[tokenID].open == false, \"GBTC: Already Opened\");\r\n\r\n        OpenInfo memory openInfo = OpenInfo(uint64(tokenID), uint64(block.number));\r\n        openingBoxList.push(openInfo);\r\n\r\n        dataNFT[tokenID].open = true;\r\n\r\n        emit OpenBox(msg.sender, tokenID, block.number);\r\n    }\r\n\r\n    /**\r\n     * @dev Reveal all the opened boxes stored internally. All overtime boxes will be moved to another list. \r\n     * waiting for another revealing with hash value.\r\n     */\r\n    function revealBoxes() public {                                     // onlyManager?\r\n\r\n        uint256 openingListLength = openingBoxList.length;\r\n        require (openingListLength != 0, 'GBTC: Empty List');\r\n\r\n        uint256[] memory revealList = new uint256[](openingListLength);\r\n        bool[] memory wonList = new bool[](openingListLength);\r\n        OpenInfo[] memory skipList = new OpenInfo[](openingListLength);\r\n\r\n        uint256 revealCount;\r\n        uint256 skipCount;\r\n\r\n        for (uint256 index = 0; index < openingListLength; index++) {\r\n            OpenInfo memory openInfo = openingBoxList[index];\r\n            uint256 tokenID = openInfo.tokenID;\r\n            uint256 openHeight = openInfo.openHeight + 1;               // Hash of the next block determining the result\r\n\r\n            if (block.number <= openHeight) {\r\n                skipList[skipCount++] = openInfo;\r\n            } else if ( block.number <= openHeight + 256 ) {\r\n                uint256 random = uint256(keccak256(abi.encodePacked(tokenID, ownerOf(tokenID), blockhash(openHeight))));\r\n\r\n                if ((random % 100) < RATE_WINNING) { \r\n                  dataNFT[tokenID].won = true;\r\n                  wonList[revealCount] = true;\r\n                }\r\n\r\n                dataNFT[tokenID].reveal = true;\r\n                dataNFT[tokenID].hash = random;\r\n\r\n                revealList[revealCount++] = tokenID;                    // Prepare for return data \r\n\r\n            } else {\r\n                overtimeBoxList.push(openInfo);\r\n                dataNFT[tokenID].hash = overtimeBoxList.length - 1;     // Save index to make it easy to reveal with hash value\r\n            } \r\n        }\r\n\r\n        delete openingBoxList;                                          // delete the while list\r\n\r\n        for (uint256 index = 0; index < skipCount; index++) {           // Also works for empty skipList\r\n            openingBoxList.push(skipList[index]);\r\n        }\r\n\r\n        // Set the final reveal length if necessary\r\n        if (revealCount < openingListLength) {\r\n          assembly {\r\n              mstore(revealList, revealCount)\r\n              mstore(wonList, revealCount)\r\n          }\r\n        }\r\n\r\n        emit RevealBoxes(revealList, wonList);\r\n    }\r\n\r\n    /**\r\n     * @dev Reveal the overtime boxes given in the input list.\r\n     * @param tokenList All the token IDs of the NFT to be revealed.\r\n     * @param hashList All the hash values of the block next after to block the NFT is minted.\r\n     */\r\n    function revealBoxesWithHash(uint256[] calldata tokenList, uint256[] calldata hashList) public onlyManager {\r\n\r\n        uint256 lengthReveal = hashList.length; \r\n        require( tokenList.length == lengthReveal,  \"GBTC: Wrong Length\" );\r\n\r\n        uint256 overtimeListLength = overtimeBoxList.length;\r\n        require (overtimeListLength != 0, 'GBTC: Empty Overtime List');\r\n\r\n        uint256[] memory revealList = new uint256[](overtimeListLength);\r\n        bool[] memory wonList = new bool[](overtimeListLength);\r\n\r\n        uint256 revealCount;\r\n        for (uint256 index = 0; index < lengthReveal; index++) {\r\n\r\n            uint256 tokenID = tokenList[index];\r\n\r\n            // Can not repeat revealing, and can not reveal while not opened\r\n            require(dataNFT[tokenID].open != dataNFT[tokenID].reveal, 'GBTC: Wrong Overtime Status' );  \r\n\r\n            uint256 indexOvertime = dataNFT[tokenID].hash;                  // hash is re-used to store the index in overtime list\r\n\r\n            address owner = ownerOf(tokenID);\r\n            uint256 random = uint256(keccak256(abi.encodePacked(tokenID, owner, hashList[index])));\r\n\r\n            if((random % 100) < RATE_WINNING) {\r\n                dataNFT[tokenID].won = true;\r\n                wonList[revealCount] = true;\r\n            }\r\n\r\n            dataNFT[tokenID].reveal = true;\r\n            dataNFT[tokenID].hash = random;\r\n\r\n            // Remove the revealed item by replacing with the last item\r\n            uint256 overtimeLast = overtimeBoxList.length - 1;\r\n            if( indexOvertime < overtimeLast) {\r\n                OpenInfo memory openInfo = overtimeBoxList[overtimeLast];\r\n                overtimeBoxList[indexOvertime] = openInfo;\r\n                dataNFT[openInfo.tokenID].hash = indexOvertime;\r\n            }\r\n            overtimeBoxList.pop();\r\n\r\n            revealList[revealCount++] = tokenID;                            // Prepare for return data \r\n        }\r\n\r\n        // Set the final reveal length\r\n        assembly {\r\n            mstore(revealList, revealCount)     \r\n        }\r\n\r\n        emit RevealBoxes(revealList, wonList);\r\n    }\r\n\r\n    /**\r\n     * @dev Return all the boxes waiting for revealing.\r\n     */\r\n    function getOpeningBoxList() public view returns (OpenInfo[] memory) {\r\n        return openingBoxList;\r\n    }\r\n\r\n    /**\r\n     * @dev Return all the boxes waiting for revealing with hash value\r\n     */\r\n    function getOvertimeBoxList() public view returns (OpenInfo[] memory) {\r\n        return overtimeBoxList;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n/*     \r\n    function tokenURI(uint256 tokenId) public view override returns (string memory){\r\n\r\n        require(dataGBTC[tokenId].height != 0, \"GBTC: Not Minted\");\r\n\r\n        string memory svgData;\r\n        if(dataNFT[tokenId].open == false) { \r\n            svgData = IGreenBTCImage(greenBtcImage).getBlindBoxSVGBytes(tokenId);\r\n        } else {\r\n            if(!dataNFT[tokenId].won) {\r\n                svgData = IGreenBTCImage(greenBtcImage).getCertificateSVGBytes(dataGBTC[tokenId]);    \r\n            } else {\r\n                svgData = IGreenBTCImage(greenBtcImage).getGreenTreeSVGBytes();\r\n            }            \r\n        }\r\n\r\n        bytes memory dataURI = abi.encodePacked(\r\n            '{\"name\": \"Green BTC #',\r\n            tokenId.toString(),\r\n            '\",\"description\": \"GreenBTC: Green Bitcoin\",\"image\": \"data:image/svg+xml;base64,',\r\n            svgData,\r\n            '\"}'\r\n        );\r\n        return string(abi.encodePacked(\"data:application/json;base64,\", Base64.encode(dataURI)));\r\n    }\r\n*/\r\n\r\n    function setLuck(uint256 tokenId) public onlyManager {\r\n        dataNFT[tokenId].won = true;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory){\r\n\r\n        require(dataGBTC[tokenId].height != 0, \"GBTC: Not Minted\");\r\n\r\n        string memory svgData;\r\n        if(dataNFT[tokenId].open == false) { \r\n            svgData = IGreenBTCImage(greenBtcImage).getBlindBoxSVGBytes(tokenId);\r\n        } else {\r\n            if(!dataNFT[tokenId].won) {\r\n                svgData = IGreenBTCImage(greenBtcImage).getCertificateSVGBytes(dataGBTC[tokenId]);    \r\n            } else {\r\n                svgData = IGreenBTCImage(greenBtcImage).getGreenTreeSVGBytes();\r\n            }            \r\n        }\r\n\r\n        bytes memory dataURI;\r\n        if(dataNFT[tokenId].open == false) { \r\n            dataURI = abi.encodePacked(\r\n              '{\"name\": \"Green BTC #',\r\n              tokenId.toString(),\r\n              '\",\"description\": \"GreenBTC: Green Bitcoin\"',\r\n              '\"attributes\": [{\"trait_type\": \"Status\",\"value\": \"Sealed\"},{\"trait_type\": \"Height\",\"value\": \"',\r\n              tokenId.toString(),\r\n              '\"}]',\r\n              '\"image\": \"data:image/svg+xml;base64,',\r\n              svgData,\r\n              '\"}'\r\n          );\r\n        } else if(!dataNFT[tokenId].won) {\r\n            dataURI = abi.encodePacked(\r\n              '{\"name\": \"Green BTC #',\r\n              tokenId.toString(),\r\n              '\",\"description\": \"GreenBTC: Green Bitcoin\"',\r\n              '\"attributes\": [{\"trait_type\": \"Status\",\"value\": \"Opened\"},{\"trait_type\": \"Height\",\"value\": \"',\r\n              tokenId.toString(),\r\n              '\"}, {\"trait_type\": \"Power\",\"value\": \"12.354 MWh\"}, {\"trait_type\": \"Location\",\"value\": \"Beijing\"}]',\r\n              '\"image\": \"data:image/svg+xml;base64,',\r\n              svgData,\r\n              '\"}'\r\n            );\r\n        } else {\r\n            dataURI = abi.encodePacked(\r\n              '{\"name\": \"Green BTC #',\r\n              tokenId.toString(),\r\n              '\",\"description\": \"GreenBTC: Green Bitcoin\"',\r\n              '\"attributes\": [{\"trait_type\": \"Status\",\"value\": \"Opened\"},{\"trait_type\": \"Height\",\"value\": \"',\r\n              tokenId.toString(),\r\n              '\"}, {\"trait_type\": \"Power\",\"value\": \"25.666 MWh\"}, {\"trait_type\": \"Location\",\"value\": \"Singapore\"}, ',\r\n              '{\"trait_type\": \"Hat\",\"value\": \"Cowboy hat\"}, {\"trait_type\": \"T-Shirt\",\"value\": \"Suit Vest\"}]',\r\n              '\"image\": \"data:image/svg+xml;base64,',\r\n              svgData,\r\n              '\"}'\r\n            );\r\n        }\r\n\r\n        return string(abi.encodePacked(\"data:application/json;base64,\", Base64.encode(dataURI)));\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Return if the specified token is sold and openned\r\n     */\r\n    function isUnPacking(uint256 tokenID) public view returns(bool, bool) {\r\n\r\n        if(dataGBTC[tokenID].ARTCount == 0){\r\n            return (false, false);\r\n        }else{\r\n            return (true, dataNFT[tokenID].open);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mint the GreenBTC NFT based on the GreenBTC info\r\n     * @param gbtc Green BTC information\r\n     */\r\n    function _mintNFT(GreenBTCInfo calldata gbtc) internal {\r\n\r\n        dataGBTC[gbtc.height] = gbtc;\r\n\r\n        NFTStaus memory nft;\r\n        nft.owner = gbtc.beneficiary;\r\n        nft.blockHeight = uint64(gbtc.height);\r\n        dataNFT[gbtc.height] = nft;\r\n\r\n        _mint(gbtc.beneficiary, gbtc.height);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify the signature of authority based on the GreenBTC info\r\n     * @param gbtc Green BTC information\r\n     * @param sig Signature of the authority\r\n     */\r\n    function _authVerify(GreenBTCInfo calldata gbtc, Sig calldata sig) internal view {\r\n\r\n        bytes32 greenBTCHash = keccak256(abi.encode(GREEN_BTC_TYPEHASH, gbtc.height, gbtc.energyStr, gbtc.ARTCount, gbtc.blockTime, gbtc.beneficiary, gbtc.greenType));\r\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, greenBTCHash));\r\n        address recoveredAddress = ecrecover(digest, sig.v, sig.r, sig.s);\r\n\r\n        require(recoveredAddress == authorizer, \"GBTC: Invalid Singature\");\r\n    }\r\n\r\n    /**\r\n     * @dev Add or remove the acceptable ART tokens\r\n     * @param tokenARTList ART list to add or rmeove\r\n     * @param addOrRemove = 0, to remove; = 1, to add\r\n     */\r\n    function mangeARTTokens(address[] calldata tokenARTList, bool addOrRemove) external onlyOwner {\r\n        for(uint256 i = 0; i < tokenARTList.length; i++) {\r\n            address tokenART = tokenARTList[i];\r\n\r\n            require(tokenART != address(0) && whiteARTList[tokenART] != addOrRemove, \"HSKESG: Wrong ART Status\");\r\n            whiteARTList[tokenART] = addOrRemove;\r\n        }\r\n    }   \r\n\r\n    /**\r\n     * @dev Call arkreenBuilder with the specified calldata\r\n     * @param callData Call data passed to arkreenBuilder\r\n     */\r\n    function _actionBuilderBadge(bytes memory callData) internal {\r\n        (bool success, bytes memory returndata) = arkreenBuilder.call(callData);\r\n\r\n         if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"GBTC: Error Call to actionBuilderBadge\");\r\n            }\r\n        }        \r\n    }\r\n\r\n    /**\r\n     * @dev Get the price and sold amount of the specified ART versus the payment token \r\n     * @param tokenART ART token\r\n     * @param tokenPay Payment token\r\n     */\r\n    function getPrice(address tokenART, address tokenPay) external view returns(uint128 price, uint128 received) {\r\n        address artBank = IArkreenBuilder(arkreenBuilder).artBank();\r\n        (price, received) = IArkreenRECBank(artBank).saleIncome(tokenART, tokenPay);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IArkreenBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IArkreenBuilder {\r\n\r\n    function artBank() external view returns (address);\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IArkreenRECBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IArkreenRECBank {\r\n\r\n    struct Signature {\r\n        address     token;\r\n        uint256     value;\r\n        uint256     deadline;  \r\n        uint8       v;\r\n        bytes32     r;\r\n        bytes32     s;              \r\n    }\r\n\r\n    function buyART(\r\n        address             tokenPay,\r\n        address             tokenART,\r\n        uint256             amountPay,\r\n        uint256             amountART,\r\n        bool                isExactPay\r\n    ) external;\r\n\r\n    function buyARTNative(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        bool                isExactPay\r\n    ) external payable; \r\n\r\n\r\n    function buyARTWithPermit(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        bool                isExactPay,\r\n        Signature calldata  permitToPay\r\n    ) external;\r\n\r\n    function saleIncome(\r\n        address             tokenART,\r\n        address             tokenPay     \r\n    ) external view returns (uint128 priceForSale, uint128 amountReceived);\r\n}\r\n"
    },
    "contracts/ArkreenBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\n\r\nimport './ArkreenBuilderStorage.sol';\r\nimport \"./interfaces/IPausable.sol\";\r\n\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./interfaces/IWETH.sol\";\r\n\r\nimport \"./interfaces/IERC20Permit.sol\";\r\nimport \"./ArkreenBuilderTypes.sol\";\r\nimport \"./interfaces/IArkreenRECBank.sol\";\r\nimport \"./interfaces/IFeSwapRouter.sol\";\r\nimport \"./interfaces/IArkreenRECToken.sol\";\r\n\r\n// Import this file to use console.log\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract ArkreenBuilder is\r\n    OwnableUpgradeable,\r\n    UUPSUpgradeable,\r\n    ArkreenBuilderStorage\r\n{\r\n    using AddressUpgradeable for address;\r\n\r\n    // Public variables\r\n    string public constant NAME = 'Arkreen Climate Actor';\r\n\r\n    // Events\r\n\r\n    // Modifiers\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'ARB: EXPIRED');\r\n        _;\r\n    }\r\n  \r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address router, address sales, address native) external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __UUPSUpgradeable_init();     \r\n        routerSwap = router;\r\n        artBank = sales;\r\n        tokenNative = native;\r\n    }   \r\n\r\n    function postUpdate(address sales) external onlyProxy onlyOwner {\r\n        artBank = sales;\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\r\n    {}\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == tokenNative); // only accept WMATIC via fallback from the WMATIC contract\r\n    }  \r\n\r\n    /** \r\n     * @dev Offset the specified amount of ART tokens to create a climate action.\r\n     * @param tokenART Address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\r\n     * @param amountART Amount of the ART token to offset.\r\n     * @param deadline Deadline to handle the transaction.\r\n     */\r\n    function actionBuilderWithART(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        uint256             deadline\r\n    ) external ensure(deadline) {\r\n\r\n        // Transfer payement: bytes4(keccak256(bytes('transferFrom(address from ,address to ,uint256 amount)')));\r\n        bytes memory data1 = abi.encodeWithSelector(0x23b872dd, msg.sender, address(this), amountART);\r\n        (bool success, bytes memory data) = tokenART.call(abi.encodePacked(data1, address(this)));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n\r\n        // commitOffset(uint256 amount): 0xe8fef571\r\n        bytes memory callData = abi.encodeWithSelector(0xe8fef571, amountART);\r\n\r\n        _offsetART(tokenART, abi.encodePacked(callData, _msgSender()));\r\n    }\r\n   \r\n\r\n    /** \r\n     * @dev Buy the ART token with specified token, then offset the bought ART to create a climate action.\r\n     * @param tokenPay The address of the token to pay for the ART token.\r\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\r\n     * @param amountPay The amount of the payment token. \r\n     *                  if modeAction bit0 is true, amountPay should be paid to swap tokenART.\r\n     *                  if modeAction bit0 is false, amountPay means the maximum amount to pay. \r\n     * @param amountART The amount of the ART token.\r\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\r\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\r\n     * @param modeAction Which amount is the exact amount, and which source to get ART\r\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\r\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\r\n     *                  bit1 = 0, Swap ART from Dex\r\n     *                  bit1 = 1, But ART from art sales bank\r\n     */\r\n    function actionBuilder(\r\n        address             tokenPay,\r\n        address             tokenART,\r\n        uint256             amountPay,\r\n        uint256             amountART,\r\n        uint256             modeAction,\r\n        uint256             deadline\r\n    ) external {               // Deadline will be checked by router, no need to check here. //ensure(permitToPay.deadline)\r\n\r\n        // Transfer payement \r\n        TransferHelper.safeTransferFrom(tokenPay, msg.sender, address(this), amountPay);\r\n        _actionBuilder (tokenPay, tokenART, amountPay, amountART, modeAction, deadline);\r\n    }\r\n\r\n    /** \r\n     * @dev Buy the ART token with Native token, then offset the bought ART.\r\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in the AREC ecosystem.\r\n     * @param amountART The amount of the ART token.\r\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\r\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\r\n     * @param modeAction Which amount is the exact amount, and which source to get ART\r\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\r\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\r\n     *                  bit1 = 0, Swap ART from Dex\r\n     *                  bit1 = 1, But ART from art sales bank\r\n     */\r\n    function actionBuilderNative(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        uint256             modeAction,\r\n        uint256             deadline\r\n    ) external payable {               // Deadline will be checked by router, no need to check here.\r\n\r\n        // Wrap MATIC to WMATIC  \r\n        IWETH(tokenNative).deposit{value: msg.value}();\r\n        _actionBuilder(tokenNative, tokenART, msg.value, amountART, modeAction, deadline);\r\n    }   \r\n\r\n   /** \r\n     * @dev Buy the ART token with specified token, then offset the bought ART.\r\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\r\n     * @param amountART The amount of the ART token.\r\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\r\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\r\n     * @param modeAction Which amount is the exact amount, and which source to get ART\r\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\r\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\r\n     *                  bit1 = 0, Swap ART from Dex\r\n     *                  bit1 = 1, But ART from art sales bank\r\n     * @param permitToPay The permit information to approve the payment token to swap for ART token \r\n     */\r\n    function actionBuilderWithPermit(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        uint256             modeAction,\r\n        Signature calldata  permitToPay\r\n    ) external  {                       // Deadline will be checked by router, no need to check here.\r\n        // Permit payment token\r\n        address payer = _msgSender();\r\n        IERC20Permit(permitToPay.token).permit(payer, address(this), \r\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\r\n\r\n        // Transfer payement \r\n        TransferHelper.safeTransferFrom(permitToPay.token, payer, address(this), permitToPay.value);\r\n        _actionBuilder(permitToPay.token, tokenART, permitToPay.value, amountART, modeAction, permitToPay.deadline);\r\n    }\r\n\r\n    /** \r\n     * @dev Offset the specified amount of ART tokens to create a climate action.\r\n     * @param tokenART Address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\r\n     * @param amountART Amount of the ART token to offset.\r\n     * @param deadline Deadline to handle the transaction.\r\n     * @param badgeInfo The information to be included for climate badge.\r\n     */\r\n    function actionBuilderBadgeWithART(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        uint256             deadline,\r\n        BadgeInfo calldata  badgeInfo\r\n    ) external ensure(deadline) {\r\n\r\n        // Transfer payement: bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        bytes memory data1 = abi.encodeWithSelector(0x23b872dd, msg.sender, address(this), amountART);\r\n        (bool success, bytes memory data) = tokenART.call(abi.encodePacked(data1, address(this)));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n\r\n        // offsetAndMintCertificate(address beneficiary,string offsetEntityID,string beneficiaryID,string offsetMessage,uint256 amount)\r\n        // offsetAndMintCertificate(address,string,string,string,uint256): signature = 0x0fba6a8d\r\n        bytes memory callData = abi.encodeWithSelector(0x0fba6a8d, badgeInfo.beneficiary, badgeInfo.offsetEntityID, \r\n                                            badgeInfo.beneficiaryID, badgeInfo.offsetMessage, amountART);\r\n\r\n        _offsetART(tokenART, abi.encodePacked(callData, _msgSender()));\r\n    }    \r\n\r\n    /** \r\n     * @dev Buy the ART token, then offset the bought ART and mint a cliamte badge.\r\n     * @param tokenPay The address of the token to pay for the ART token.\r\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\r\n     * @param amountPay The amount of the payment token. \r\n     *                  if modeAction bit0 is true, amountPay should be same as the value in permitToPay.\r\n     *                  if modeAction bit0 is false, amountPay means the maximum amount available to pay, if it not zero. \r\n     * @param amountART The amount of the ART token.\r\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\r\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\r\n     * @param modeAction Which amount is the exact amount, and which source to get ART\r\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\r\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\r\n     *                  bit1 = 0, Swap ART from Dex\r\n     *                  bit1 = 1, But ART from art sales bank     \r\n     * @param badgeInfo The information to be included for climate badge.\r\n     */\r\n    function actionBuilderBadge(\r\n        address             tokenPay,\r\n        address             tokenART,\r\n        uint256             amountPay,\r\n        uint256             amountART,\r\n        uint256             modeAction,\r\n        uint256             deadline,\r\n        BadgeInfo calldata  badgeInfo\r\n    ) external {               // Deadline will be checked by router, no need to check here. //ensure(permitToPay.deadline)\r\n\r\n        // Transfer payement\r\n        TransferHelper.safeTransferFrom(tokenPay, msg.sender, address(this), amountPay);\r\n\r\n        _actionBuilderBadge (tokenPay, tokenART, amountPay, amountART, modeAction, deadline, badgeInfo);\r\n    }\r\n\r\n    /** \r\n     * @dev Buy the ART token, then offset the bought ART and mint a cliamte badge.\r\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\r\n     * @param amountART The amount of the ART token.\r\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\r\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\r\n     * @param modeAction Which amount is the exact amount, and which source to get ART\r\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\r\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\r\n     *                  bit1 = 0, Swap ART from Dex\r\n     *                  bit1 = 1, But ART from art sales bank   \r\n     * @param badgeInfo The information to be included for climate badge.\r\n     */\r\n    function actionBuilderBadgeNative(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        uint256             modeAction,\r\n        uint256             deadline,\r\n        BadgeInfo calldata  badgeInfo\r\n    ) external payable {               // Deadline will be checked by router, no need to check here. //ensure(permitToPay.deadline)\r\n\r\n        // Wrap MATIC to WMATIC  \r\n        IWETH(tokenNative).deposit{value: msg.value}();\r\n        _actionBuilderBadge(tokenNative, tokenART, msg.value, amountART, modeAction, deadline, badgeInfo);\r\n    }\r\n\r\n   /** \r\n     * @dev Buy the ART token, then offset the bought ART and mint a cliamte badge.\r\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\r\n     * @param amountART The amount of the ART token.\r\n     *                  if modeAction bit0 is true, amountART means the minumum ART token to receive, which may be zero for no checking.\r\n     *                  if modeAction bit0 is false, amountART is the amount of ART token to receive.\r\n     * @param modeAction Which amount is the exact amount, and which source to get ART\r\n     *                  bit0 = 1, amountPay is the exact amount of the payment token to pay.\r\n     *                  bit0 = 0, amountART is the exact amount of the ART token to receive.\r\n     *                  bit1 = 0, Swap ART from Dex\r\n     *                  bit1 = 1, But ART from art sales bank   \r\n     * @param badgeInfo The information to be included for climate badge.\r\n     * @param permitToPay The permit information to approve the payment token to swap for ART token \r\n     */\r\n    function actionBuilderBadgeWithPermit(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        uint256             modeAction,\r\n        BadgeInfo calldata  badgeInfo,\r\n        Signature calldata  permitToPay\r\n    ) external  {               // Deadline will be checked by router, no need to check here. //ensure(permitToPay.deadline)\r\n\r\n        // Permit payment token\r\n        address payer = _msgSender();\r\n        IERC20Permit(permitToPay.token).permit(payer, address(this), \r\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\r\n\r\n        // Transfer payement \r\n        TransferHelper.safeTransferFrom(permitToPay.token, payer, address(this), permitToPay.value);\r\n        _actionBuilderBadge(permitToPay.token, tokenART, permitToPay.value, amountART, modeAction, permitToPay.deadline, badgeInfo);\r\n    }\r\n\r\n    function _actionBuilder(\r\n        address             tokenPay,\r\n        address             tokenART,\r\n        uint256             amountPay,\r\n        uint256             amountART,\r\n        uint256             modeAction,\r\n        uint256             deadline\r\n    ) internal {\r\n\r\n        bool isExact = (modeAction&0x01) == 0x01;\r\n        if(modeAction & 0x02 != 0x00) {\r\n            IArkreenRECBank(artBank).buyART(tokenPay, tokenART, amountPay, amountART, isExact);\r\n        } else {\r\n          address[] memory swapPath = new address[](2);\r\n          swapPath[0] = tokenPay;\r\n          swapPath[1] = tokenART;\r\n\r\n          if(isExact) {\r\n              IFeSwapRouter(routerSwap).swapExactTokensForTokens(amountPay, amountART, swapPath, address(this), deadline);\r\n          } else {\r\n              IFeSwapRouter(routerSwap).swapTokensForExactTokens(amountART, amountPay, swapPath, address(this), deadline);\r\n          }\r\n        }\r\n\r\n        uint256 amountOffset = amountART;  \r\n        if(isExact)  amountOffset = IERC20(tokenART).balanceOf(address(this));    // Pleae do not send ART to this contract\r\n \r\n        // commitOffset(uint256 amount): 0xe8fef571\r\n        bytes memory callData = abi.encodeWithSelector(0xe8fef571, amountOffset);\r\n\r\n        address payer = _msgSender();\r\n        _offsetART(tokenART, abi.encodePacked(callData, payer));\r\n \r\n        // Repay more payment back  \r\n        if(modeAction & 0x01 == 0x00) {        \r\n            uint256 amountPayLeft = IERC20(tokenPay).balanceOf(address(this));\r\n            if(amountPayLeft > 0) {\r\n                if(tokenPay == tokenNative) {\r\n                    IWETH(tokenNative).withdraw(amountPayLeft);\r\n                    TransferHelper.safeTransferETH(payer, amountPayLeft);               \r\n                } else {\r\n                    TransferHelper.safeTransfer(tokenPay, payer, amountPayLeft);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _actionBuilderBadge(\r\n        address             tokenPay,\r\n        address             tokenART,\r\n        uint256             amountPay,\r\n        uint256             amountART,\r\n        uint256             modeAction,\r\n        uint256             deadline,\r\n        BadgeInfo calldata  badgeInfo\r\n    ) internal {\r\n\r\n        bool isExact = (modeAction&0x01) == 0x01;\r\n        if(modeAction & 0x02 != 0x00) {\r\n            IArkreenRECBank(artBank).buyART(tokenPay, tokenART, amountPay, amountART, isExact);\r\n        } else {\r\n          address[] memory swapPath = new address[](2);\r\n          swapPath[0] = tokenPay;\r\n          swapPath[1] = tokenART;\r\n\r\n          if(modeAction & 0x01 != 0x00) {\r\n              IFeSwapRouter(routerSwap).swapExactTokensForTokens(amountPay, amountART, swapPath, address(this), deadline);\r\n          } else {\r\n              IFeSwapRouter(routerSwap).swapTokensForExactTokens(amountART, amountPay, swapPath, address(this), deadline);\r\n          }\r\n        }\r\n\r\n        uint256 amountOffset = amountART;  \r\n        if(isExact)  amountOffset = IERC20(tokenART).balanceOf(address(this));        \r\n\r\n        // offsetAndMintCertificate(address beneficiary,string offsetEntityID,string beneficiaryID,string offsetMessage,uint256 amount)\r\n        // offsetAndMintCertificate(address,string,string,string,uint256): signature = 0x0fba6a8d\r\n        bytes memory callData = abi.encodeWithSelector(0x0fba6a8d, badgeInfo.beneficiary, badgeInfo.offsetEntityID, \r\n                                            badgeInfo.beneficiaryID, badgeInfo.offsetMessage, amountOffset);\r\n\r\n        address payer = _msgSender();\r\n        _offsetART(tokenART, abi.encodePacked(callData, payer));\r\n  \r\n        // Repay more payment back  \r\n        if(modeAction & 0x01 == 0x00) {      \r\n            uint256 amountPayLeft = IERC20(tokenPay).balanceOf(address(this));\r\n            if(amountPayLeft > 0) {\r\n                if(tokenPay == tokenNative) {\r\n                    IWETH(tokenNative).withdraw(amountPayLeft);\r\n                    TransferHelper.safeTransferETH(payer, amountPayLeft);\r\n                    console.log(\"33333333333\", payer, amountPayLeft);               \r\n                } else {\r\n                    TransferHelper.safeTransfer(tokenPay, payer, amountPayLeft);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @dev Call ART token contract to offset the ART token, and optoinally mint the climate badge according to calldata.\r\n     * @param tokenART Address of the ART token contract. \r\n     * @param callData Calldata to call ART token.\r\n     */\r\n    function _offsetART(\r\n        address         tokenART,\r\n        bytes   memory  callData\r\n    ) internal {\r\n\r\n        (bool success, bytes memory returndata) = tokenART.call(abi.encodePacked(callData, _msgSender()));\r\n\r\n        if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"BLD: Error Call to offsetAndMintCertificate\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _msgSender() internal override view returns (address signer) {\r\n        signer = msg.sender;\r\n        if (msg.data.length>=20 && trustedForwarders[signer]) {\r\n            assembly {\r\n                signer := shr(96,calldataload(sub(calldatasize(),20)))\r\n            }\r\n        }    \r\n    }    \r\n\r\n    function mangeTrustedForwarder(address forwarder, bool addOrRemove) external onlyOwner {\r\n        require(forwarder != address(0), \"BLD: Zero Forwarder\");\r\n        trustedForwarders[forwarder] = addOrRemove;\r\n    }      \r\n \r\n    function approveRouter(address[] memory tokens) external onlyOwner {\r\n        require(routerSwap != address(0), \"BLD: No Router\");\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            TransferHelper.safeApprove(tokens[i], routerSwap, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function approveArtBank(address[] memory tokens) external onlyOwner {\r\n        require(artBank != address(0), \"BLD: No Banker\");\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            TransferHelper.safeApprove(tokens[i], artBank, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function getVersion() external pure virtual returns (string memory) {\r\n        return \"0.2.0\";\r\n    }\r\n}\r\n"
    },
    "contracts/ArkreenBuilderStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./ArkreenBuilderTypes.sol\";  \n\nabstract contract ArkreenBuilderStorage {\n\n    address public routerSwap;            // Address of the DEX router\n    address public tokenNative;           // The wrapped token of the Native token, such as WETH, WMATIC\n\n    mapping(address => bool) public trustedForwarders;         // List of trusted Forwarders\n    address public artBank;               // Address of the ART sales bank contract\n\n//  mapping(address => mapping(address => twinPair)) public pools;             // ART token => (pair token => two LP pools) \n\n}"
    },
    "contracts/interfaces/IFeSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\ninterface IFeSwapRouter {\n\n    struct AddLiquidityParams {\n        address tokenA;\n        address tokenB;\n        uint    amountADesired;\n        uint    amountBDesired;\n        uint    amountAMin;\n        uint    amountBMin;\n        uint    ratio;\n    }\n\n    struct AddLiquidityETHParams {\n        address token;\n        uint    amountTokenDesired;\n        uint    amountTokenMin;\n        uint    amountETHMin;\n        uint    ratio;\n    }\n\n    struct RemoveLiquidityParams {\n        address tokenA;\n        address tokenB;\n        uint    liquidityAAB;\n        uint    liquidityABB;        \n        uint    amountAMin;\n        uint    amountBMin;\n    }\n\n    struct Signature {\n        uint8       v;\n        bytes32     r;\n        bytes32     s;\n    }\n\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        AddLiquidityParams calldata addParams,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidityAAB, uint liquidityABB);\n\n    function addLiquidityETH(\n        AddLiquidityETHParams calldata addParams,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidityTTE, uint liquidityTEE);\n\n    function removeLiquidity(\n        RemoveLiquidityParams calldata removeParams,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function removeLiquidityETH(\n        RemoveLiquidityParams calldata removeParams,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n\n    function removeLiquidityWithPermit(\n        RemoveLiquidityParams calldata removeParams,\n        address to,\n        uint deadline,\n        bool approveMax, \n        Signature   calldata sigAAB,\n        Signature   calldata sigABB\n    ) external returns (uint amountA, uint amountB);        \n\n    function removeLiquidityETHWithPermit(\n        RemoveLiquidityParams calldata removeParams,\n        address to,\n        uint deadline,\n        bool approveMax, \n        Signature   calldata sigTTE,\n        Signature   calldata sigTEE\n    ) external returns (uint amountToken, uint amountETH);\n\n    function removeLiquidityETHFeeOnTransfer(\n        RemoveLiquidityParams calldata removeParams,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n\n    function removeLiquidityETHWithPermitFeeOnTransfer(\n        RemoveLiquidityParams calldata removeParams,\n        address to,\n        uint deadline,\n        bool approveMax, \n        Signature   calldata sigTTE,\n        Signature   calldata sigTEE\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint amountOut,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);     \n\n    function swapExactTokensForTokensFeeOnTransfer(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensFeeOnTransfer(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHFeeOnTransfer(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    \n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function estimateAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function estimateAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/interfaces/IArkreenRECToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IArkreenRECToken {\n    function commitOffset(uint256) external returns (uint256); \n    function commitOffsetFrom(address, uint256) external returns (uint256);     \n    function offsetAndMintCertificate(  address beneficiary, string calldata offsetEntityID,\n                                        string calldata beneficiaryID, string calldata offsetMessage, uint256 amount) external;\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/ArkreenRECBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\n\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./interfaces/IERC20Permit.sol\";\r\nimport \"./interfaces/IWETH.sol\";\r\n\r\n// Import this file to use console.log\r\n//import \"hardhat/console.sol\";\r\n\r\nstruct IncomeInfo {\r\n    uint128     priceForSale;           // 1 ART -> X Payment token\r\n    uint128     amountReceived;         // Amount of payment token received\r\n}\r\n\r\nstruct SaleInfo {\r\n    address     controller;             // Address of the ART token controller\r\n    address     fundReceiver;           // Address of the receiver while withdrawing the sale income  \r\n    uint128     amountDeposited;        // The amount of ART deposited to this bank contract\r\n    uint128     amountSold;             // The amount of ART already sold out\r\n}\r\n\r\nstruct Signature {\r\n    address     token;\r\n    uint256     value;\r\n    uint256     deadline;  \r\n    uint8       v;\r\n    bytes32     r;\r\n    bytes32     s;              \r\n}\r\n\r\ncontract ArkreenRECBank is\r\n    OwnableUpgradeable,\r\n    UUPSUpgradeable\r\n{\r\n    // Public variables\r\n    address public tokenNative;                                             // The wrapped token of the Native token, such as WETH, WMATIC\r\n    mapping(address => bool) public forwarders;                             // All forwarders acceptable\r\n    mapping(address => mapping(address => IncomeInfo)) public saleIncome;   // Mapping X-ART -> Payment Token -> SaleInfo, price zero means not-supported\r\n    mapping(address => SaleInfo) public artSaleInfo;                        // All ART deposit and sale info. If deposit is zero, it means not-supported\r\n\r\n    // Events\r\n    event ARTSold(address indexed artToken, address indexed payToken, uint256 artAmount, uint256 payAmount);\r\n    event ARTPriceChanged(address indexed artToken, address indexed payToken, uint256 newPrice);   \r\n    event Deposit(address indexed artToken, uint256 amountDeposit);    \r\n    event Withdraw(address indexed artToken, address indexed payToken, uint256 balance);   \r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address native) external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __UUPSUpgradeable_init(); \r\n        tokenNative = native;       \r\n    }\r\n\r\n    function postUpdate() external onlyProxy onlyOwner \r\n    {}\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\r\n    {}    \r\n\r\n    receive() external payable {\r\n        assert(msg.sender == tokenNative); // only accept WMATIC via fallback from the WMATIC contract\r\n    }  \r\n\r\n    function buyART(\r\n        address             tokenPay,\r\n        address             tokenART,\r\n        uint256             amountPay,\r\n        uint256             amountART,\r\n        bool                isExactPay\r\n    ) external {\r\n        _buyART (msg.sender, _msgSender(), tokenPay, tokenART, amountPay, amountART, isExactPay);\r\n    }\r\n\r\n    /** \r\n     * @dev Buy the ART token, then offset the bought ART and mint a cliamte badge.\r\n     * @param tokenART The address of the ART token. There may be serveral different ART tokens in AREC ecosystem.\r\n     * @param amountART The amount of the ART token.\r\n     *                  if isExactPay is true, amountART means the minumum ART token to receive, which may be zero for no checking.\r\n     *                  if isExactPay is false, amountART is the amount of ART token to receive.\r\n     * @param isExactPay Which amount is the exact amount\r\n     *                  = true,  msg.value is the exact amount of the payment token to pay.\r\n     *                  = false, amountART is the exact amount of the ART token to receive.\r\n     */\r\n    function buyARTNative(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        bool                isExactPay\r\n    ) external payable {\r\n\r\n        uint256 priceSale = saleIncome[tokenART][tokenNative].priceForSale;\r\n        require (priceSale !=0, 'ARBK: Payment token not allowed');\r\n        \r\n        uint256 amountPay =  msg.value;\r\n        address receiver = _msgSender();\r\n        if(isExactPay) {\r\n            uint256 amountARTReal = amountPay * (10**9) / priceSale;                    // ART decimal is always 9, so hardcoded here\r\n            require (amountARTReal >= amountART, 'ARBK: Get Less');\r\n\r\n            saleIncome[tokenART][tokenNative].amountReceived += uint128(amountPay);     // Native Token already received\r\n\r\n            TransferHelper.safeTransfer(tokenART, receiver, amountARTReal);\r\n            artSaleInfo[tokenART].amountSold += uint128(amountARTReal);\r\n\r\n            emit ARTSold(tokenART, tokenNative, amountARTReal, amountPay);\r\n        } else {\r\n            uint256 amountPayReal = (amountART * priceSale + (10**9) -1) / (10**9);       // ART decimal is always 9, so hardcoded here\r\n            require (amountPay >= amountPayReal, 'ARBK: Pay Less');                       // amountPay plays as the maximum to pay\r\n\r\n            saleIncome[tokenART][tokenNative].amountReceived += uint128(amountPayReal);\r\n\r\n            TransferHelper.safeTransfer(tokenART, receiver, amountART);\r\n            artSaleInfo[tokenART].amountSold += uint128(amountART);\r\n\r\n            if(amountPay > amountPayReal) TransferHelper.safeTransferETH(msg.sender, amountPay - amountPayReal);\r\n\r\n            emit ARTSold(tokenART, tokenNative, amountART, amountPayReal);\r\n        }\r\n    }\r\n\r\n    function buyARTWithPermit(\r\n        address             tokenART,\r\n        uint256             amountART,\r\n        bool                isExactPay,\r\n        Signature calldata  permitToPay\r\n    ) external  {                       // Deadline will be checked by router, no need to check here.\r\n        // Permit payment token\r\n        address payer = _msgSender();\r\n        IERC20Permit(permitToPay.token).permit(payer, address(this), \r\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\r\n\r\n        // Transfer payement \r\n        _buyART(payer, payer, permitToPay.token, tokenART, permitToPay.value, amountART, isExactPay);\r\n    }\r\n\r\n    function _buyART(\r\n        address             payer,\r\n        address             receiver,\r\n        address             tokenPay,\r\n        address             tokenART,\r\n        uint256             amountPay,\r\n        uint256             amountART,\r\n        bool                isExactPay\r\n    ) internal {\r\n\r\n        // priceSale: 1 ART = priceSale (Payment Tokens), for example:\r\n        // 1 ART = 5 USDC, priceSale = 5 000 000\r\n        // 1 ART = 8 MATIC, priceSale = 8 * (10**18), as decial of MATIC is 18 \r\n        uint256 priceSale = saleIncome[tokenART][tokenPay].priceForSale;\r\n        require (priceSale != 0, 'ARBK: Payment token not allowed');\r\n        \r\n        if(isExactPay) {\r\n            uint256 amountARTReal = amountPay * (10**9) / priceSale;          // ART decimal is always 9, so hardcoded here\r\n            require (amountARTReal >= amountART, 'ARBK: Get Less');           // amountART is the minimum ART desired to receive\r\n\r\n            TransferHelper.safeTransferFrom(tokenPay, payer, address(this), amountPay);\r\n            saleIncome[tokenART][tokenPay].amountReceived += uint128(amountPay);    // Assmume never overflow, as it is big as (3.4 *10**20)\r\n\r\n            TransferHelper.safeTransfer(tokenART, receiver, amountARTReal);\r\n            artSaleInfo[tokenART].amountSold += uint128(amountARTReal);\r\n\r\n            emit ARTSold(tokenART, tokenPay, amountARTReal, amountPay);\r\n        } else {\r\n            // The minimum payment is 1 (Payment Token) to avoid attack buying very small amount of ART tokens\r\n            uint256 amountPayReal = (amountART * priceSale + (10**9) -1 ) / (10**9);    // ART decimal is always 9, so hardcoded here            \r\n            require (amountPayReal <= amountPay, 'ARBK: Pay Less');                     // amountPay is the maximum payment \r\n\r\n            TransferHelper.safeTransferFrom(tokenPay, payer, address(this), amountPayReal);\r\n            saleIncome[tokenART][tokenPay].amountReceived += uint128(amountPayReal);    // Assmume never overflow\r\n\r\n            TransferHelper.safeTransfer(tokenART, receiver, amountART);\r\n            artSaleInfo[tokenART].amountSold += uint128(amountART);\r\n\r\n            emit ARTSold(tokenART, tokenPay, amountART, amountPayReal);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Change the ART sale price based on the buyInToken. Price-zero means not-supporting\r\n     * @param artToken Address of the ART token to sell. The bank contract support multiple ART tokens.\r\n     * @param buyInToken Address of the payment token used to buy ART. \r\n     * @param price Price of the ART token priced in payment token, 1 ART = X payment token.  \r\n    */\r\n    function changeSalePrice(address artToken, address buyInToken, uint256 price ) external {\r\n        require (msg.sender == artSaleInfo[artToken].controller, \"ARBK: Not allowed\");\r\n        saleIncome[artToken][buyInToken].priceForSale = uint128(price);\r\n        emit ARTPriceChanged(artToken, buyInToken, price);    \r\n    }  \r\n\r\n    /**\r\n     * @dev Add new type of ART token and the controller, only can be called by the owner\r\n     * @param artToken Token address of the ART to add\r\n     * @param controller Address of the controller of the ART token\r\n     */\r\n    function addNewART(address artToken, address controller) external onlyOwner {\r\n        require (controller != address(0), \"ARBK: Zero Address\");\r\n        require (artSaleInfo[artToken].controller == address(0), \"ARBK: Already Added\");\r\n        artSaleInfo[artToken].controller = controller;\r\n    }  \r\n\r\n    /**\r\n     * @dev Change/shift the controller of the ART token\r\n     * @param artToken Address of the ART token to change controller\r\n     * @param newController Address of the new controller\r\n     */\r\n    function changeARTOwner(address artToken, address newController) external {\r\n        address caller = msg.sender;\r\n        require( caller ==  owner() || caller == artSaleInfo[artToken].controller, \"ARBK: Not allowed\");\r\n        require (newController != address(0), \"ARBK: Zero Address\");\r\n\r\n        artSaleInfo[artToken].controller = newController;\r\n    }  \r\n\r\n    /**\r\n     * @dev Deposit various ART token to the bank, only callable by the controller.\r\n     * @param artToken Token address of the ART to deposit. \r\n     * @param amountDeposit Amount of the ART to deposit.\r\n     */\r\n    function depositART(address artToken, uint256 amountDeposit) external {\r\n        require (msg.sender == artSaleInfo[artToken].controller, \"ARBK: Not allowed\");\r\n\r\n        uint256 amount = artSaleInfo[artToken].amountDeposited;\r\n        require ((amount = (amount + amountDeposit)) < type(uint128).max, \"ARBK: Deposit overflowed\" );\r\n\r\n        TransferHelper.safeTransferFrom(artToken, msg.sender, address(this), amountDeposit);\r\n        artSaleInfo[artToken].amountDeposited = uint128(amount);\r\n        emit Deposit(artToken, amountDeposit);\r\n    }  \r\n\r\n    /**\r\n     * @dev Withdraw all the sales income\r\n     * @param artToken Address of the ART token to withdraw\r\n     * @param payToken Address of the payment token to withdraw\r\n     */\r\n    function withdraw(address artToken, address payToken) external {\r\n        require (msg.sender == artSaleInfo[artToken].controller, \"ARBK: Not allowed\");\r\n\r\n        address receiver = artSaleInfo[artToken].fundReceiver;\r\n        if (receiver == address(0)) receiver = msg.sender;\r\n\r\n        uint256 balance = saleIncome[artToken][payToken].amountReceived;\r\n        if (payToken == tokenNative) {\r\n            uint256 amountNative=  IERC20(tokenNative).balanceOf(address(this));\r\n            IWETH(tokenNative).withdraw(amountNative);\r\n            TransferHelper.safeTransferETH(receiver, balance);\r\n        }    \r\n        else {\r\n            TransferHelper.safeTransfer(payToken, receiver, balance);\r\n        }\r\n        emit Withdraw(artToken, payToken, balance);    \r\n    }\r\n\r\n    /**\r\n     * @dev Set the income receiver address\r\n     * @param artToken Address of the ART token to set receiver\r\n     * @param receiver Address of the receiver\r\n     */\r\n    function setFundReceiver(address artToken, address receiver) external {\r\n        require (msg.sender == artSaleInfo[artToken].controller, \"ARBK: Not allowed\");\r\n        artSaleInfo[artToken].fundReceiver = receiver;\r\n    } \r\n\r\n    function _msgSender() internal override view returns (address sender) {\r\n        sender = msg.sender;\r\n        if (msg.data.length >= 20 && forwarders[sender]) {\r\n            assembly {\r\n                sender := shr(96,calldataload(sub(calldatasize(),20)))\r\n            }\r\n        }    \r\n    }\r\n\r\n    function setForwarder(address forwarder, bool active) external onlyOwner {\r\n        forwarders[forwarder] = active;\r\n    }\r\n\r\n}"
    },
    "contracts/ArkreenToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol';\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\n\n\ncontract ArkreenToken is \n    ContextUpgradeable,\n    ERC20BurnableUpgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    IERC20Permit,\n    UUPSUpgradeable\n{\n    using AddressUpgradeable for address;\n\n    string  private constant _NAME = 'Arkreen Token';\n    string  private constant _SYMBOL = 'AKRE';\n    string  private constant _VERSION = '1';\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    \n    bytes32 private _DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(uint256 amount, address foundationAddr, string calldata name, string calldata symbol)\n        external\n        virtual\n        initializer\n    {\n        __UUPSUpgradeable_init_unchained();\n        __ERC1967Upgrade_init_unchained();\n        __ERC20Burnable_init_unchained();\n        __Context_init_unchained();\n        \n        if(bytes(name).length == 0 || bytes(symbol).length == 0) {\n          __ERC20_init_unchained(_NAME, _SYMBOL);\n        } else {\n          __ERC20_init_unchained(name, symbol);          \n        }\n\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n \n        _DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(_NAME)),\n                keccak256(bytes(_VERSION)),\n                block.chainid,\n                address(this)\n            )\n        );  \n\n        _mint(foundationAddr, amount * 10 ** decimals());\n    }\n\n    function pause() external onlyOwner{\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external{\n\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, nonces[owner], deadline));\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', _DOMAIN_SEPARATOR, structHash));\n        address signer = ECDSA.recover(digest, v, r, s);\n\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n        nonces[owner] += 1;\n\n        _approve(owner, spender, value);\n    }\n\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32){\n        return _DOMAIN_SEPARATOR;\n    }\n\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override whenNotPaused {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        override\n        onlyOwner\n    {}\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/ArkreenReward.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport \"./ArkreenToken.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract ArkreenReward is \n        ContextUpgradeable,\n        OwnableUpgradeable, \n        PausableUpgradeable,\n        UUPSUpgradeable\n{\n    using AddressUpgradeable for address;\n\n    string  private constant _NAME = 'Arkreen Reward';\n    string  private constant _VERSION = '1';\n    bytes32 private constant _REWARD_TYPEHASH = \n        keccak256(\"Reward(address receiver,uint256 value,uint256 nonce)\");\n    \n    bytes32                     private _DOMAIN_SEPARATOR;\n    address                     public validationAddress;\n    ArkreenToken                public ERC20Contract;\n    mapping(address => uint256) public nonces;\n\n    //events\n    event UserWithdraw(address indexed receiver, uint256 indexed value, uint256  indexed nonce);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address tokenAKRE, address validationAddr)\n        external\n        virtual\n        initializer\n    {\n        __Ownable_init_unchained();\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n        __UUPSUpgradeable_init();\n\n        ERC20Contract = ArkreenToken(tokenAKRE);\n        validationAddress = validationAddr;\n        \n        // address owner = _msgSender();\n        // assembly {\n        //     sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, owner)\n        // }\n \n        _DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(_NAME)),\n                keccak256(bytes(_VERSION)),\n                block.chainid,\n                address(this)\n            )\n        );  \n\n    }   \n\n    function pause() external onlyOwner{\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setERC20ContractAddress(address addr)public onlyOwner{\n        require(addr != address(0), \"zero address is not allowed\");\n        require(addr.isContract(), \"is not a contract address\");\n        ERC20Contract = ArkreenToken(addr);\n    }\n\n    function setValidationAddress(address addr)public onlyOwner{\n        require(addr != address(0), \"zero address is not allowed\");\n        validationAddress = addr;\n    }\n\n    function withdraw(\n        address receiver,\n        uint256 value,\n        uint256 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual whenNotPaused{\n\n        require(validationAddress != address(0) && address(ERC20Contract) != address(0), \"address error\");\n        require(receiver == _msgSender(), \"only receiver can withdraw token\");\n        require(nonce == nonces[_msgSender()], \"nonce does not macth\");\n\n        bytes32 withdrawHash = keccak256(abi.encode(_REWARD_TYPEHASH, receiver, value, nonce));\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', _DOMAIN_SEPARATOR, withdrawHash));\n        address recoveredAddress = ecrecover(digest, v, r, s);\n\n        require(recoveredAddress == validationAddress, \"signer doesn't not match or singature error\");\n        nonces[_msgSender()] += 1;\n        ERC20Contract.transfer(receiver, value);\n\n        emit UserWithdraw(receiver, value, nonce);\n    }\n\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Dex/Governance/FeswaNFTPatch.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"./utils/TransferHelper.sol\";\nimport \"./patch/NFTPatchCaller.sol\";\nimport \"./patch/DestroyController.sol\";\n\n    interface IFeSwapFactory {\n        function createUpdatePair(address tokenA, address tokenB, address pairOwner, uint256 rateTrigger, uint256 switchOracle) \n                                    external returns (address pairAAB,address pairABB);\n    }\n\n    enum PoolRunningPhase {\n        BidToStart,\n        BidPhase, \n        BidDelaying,\n        BidSettled,\n        PoolHolding, \n        PoolForSale\n    }\n\n    struct FeswaPair {\n        address tokenA;\n        address tokenB;\n        uint128 currentPrice;\n        uint48  timeCreated;\n        uint48  lastBidTime; \n        PoolRunningPhase  poolState;\n    }\n\n/**\n * @title FeswaNFT contract\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n */\n\ncontract FeswaNFTBasic is ERC721, ERC721Enumerable, Ownable, NFTPatchCaller { \n    //    using SafeMath for uint256;\t// seems not necessary\n\n    // Public variables\n    string public constant NAME = 'FeSwap Pool NFT';\n    string public constant SYMBOL = 'FESN';\n\n    // Price offering duration: two weeks \n    uint256 public constant OPEN_BID_DURATION = (3600 * 24 * 3);\n\n    uint256 public constant RECLAIM_DURATION  = (3600 * 24 * 4);    // NFT will be reclaimed if the token pair is not created in the duration \n\n    // Price offering waiting duration: 2 Hours\n    uint256 public constant CLOSE_BID_DELAY = (3600 * 2);           \n\n    // Airdrop for the first tender: 1000 FESW\n    // uint256 public constant AIRDROP_FOR_FIRST    = 1000e18;             // BNB:      1000\n    uint256 public constant AIRDROP_FOR_FIRST       = 3000e18;             // MATIC:    3000\n    // uint256 public constant AIRDROP_FOR_FIRST    = 5000e18;             // Avalanche: 5000\n\n    // BNB = 1; MATIC = 100; Arbitrum, Rinkeby = 0.25; Avalanche=5, HT = 20, Fantom = 80, Harmony = 500\n\n    // Airdrop for the next tender: 10000 FESW/BNB\n    uint256 public constant AIRDROP_RATE_FOR_NEXT_BIDDER = 10_000 / 100;      // 10_000 / 1, BNB = 1; MATIC = 100 ; Arbitrum: 40_000\n\n    // Airdrop rate for Bid winner: 50000 FESW/BNB\n    uint256 public constant AIRDROP_RATE_FOR_WINNER = 50_000 / 100;           // 50_000 / 1; Arbitrum: 200_000\n\n    // Minimum price increase for tender: 0.02 BNB, 2 MATIC\n    uint256 public constant MINIMUM_PRICE_INCREACE = 2e16 * 100;              //  2e16 * 1; Arbitrum: 5e15\n\n    // Max price for NFT sale: 100,000 BNB/ 100M MATIC \n    uint256 public constant MAX_SALE_PRICE = 1000_000e18 * 100;               // 1000_000e18 * 1; Arbitrum: 250_000e18\n\n    // Bidding airdrop cap : 2500 BNB\n    // uint256 private constant BIDDING_AIRDROP_CAP = 2500e18;             // BNB:     2500 BNB\n    uint256 private constant BIDDING_AIRDROP_CAP    = 2800e18 * 100;       // MATIC:   280,000 MATIC\n\n    // contract of Feswap DAO Token\n    address public immutable FeswapToken;\n\n    // contract of Token Pair Factory\n    address public immutable PairFactory;\n\n    // Sale start timestamp\n    uint256 public immutable SaleStartTime;                                   //2021/09/28 08:00\n\n    uint128 public TotalBidValue;\n    uint64  public AirdropDepletionTime;\n\n    // Mapping from token ID to token pair infomation\n    mapping (uint256 => FeswaPair) public ListPools;\n \n    // Events\n    event PairCreadted(address indexed tokenA, address indexed tokenB, uint256 tokenID);\n  \n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (address feswaToken, address pairFactory, uint256 saleStartTime ) \n        ERC721(NAME, SYMBOL)\n    {\n        FeswapToken = feswaToken;\n        PairFactory = pairFactory;\n        SaleStartTime = saleStartTime;\n    }\n\n    /**\n     * @dev Bid for the token-pair swap pool with higher price. \n     * Create the new NFT for the fisrt-time calling with initial price \n     */\n    function BidFeswaPair(address tokenA, address tokenB, address to) external payable returns (uint256 tokenID) {\n        require(block.timestamp > SaleStartTime, 'FESN: BID NOT STARTED');\n        require(tokenA != address(0) && tokenB != address(0) && to != address(0) , 'FeSwap: ZERO_ADDRESS');\n        require(tokenA != tokenB, 'FESN: IDENTICAL_ADDRESSES');\n        require(Address.isContract(tokenA) && Address.isContract(tokenB), 'FESN: Must be token');\n        require(!Address.isContract(msg.sender), 'FESN: Contract Not Allowed');\n        if(to != msg.sender) require(!Address.isContract(to), 'FESN: Contract Not Allowed');\n\n        (address token0, address token1) = (tokenA <= tokenB) ? (tokenA, tokenB) : (tokenB, tokenA);\n        tokenID  = uint256(keccak256(abi.encodePacked(address(this), token0, token1)));\n\n        uint256 airdropAmount = 0;\n\n        if(_exists(tokenID )){\n            bool isReclaimable = false;\n            address preOwner = ownerOf(tokenID);\n            FeswaPair storage pairInfo = ListPools[tokenID]; \n\n            if(pairInfo.poolState == PoolRunningPhase.BidPhase){\n                if( block.timestamp > (pairInfo.timeCreated + OPEN_BID_DURATION + RECLAIM_DURATION)) {\n                    isReclaimable = true;\n                }\n                else{\n                    require(block.timestamp <= pairInfo.timeCreated + OPEN_BID_DURATION, 'FESN: BID TOO LATE 1');  // Bid keep open for 3 days\n                    if(block.timestamp >= (pairInfo.timeCreated + OPEN_BID_DURATION - CLOSE_BID_DELAY)) {\n                        pairInfo.poolState = PoolRunningPhase.BidDelaying;\n                    }\n                }\n            } else {\n                require(pairInfo.poolState == PoolRunningPhase.BidDelaying, 'FESN: BID COMPLETED');\n                if( block.timestamp > (pairInfo.lastBidTime + CLOSE_BID_DELAY + RECLAIM_DURATION)) {\n                    isReclaimable = true;\n                }\n                else{\n                    require(block.timestamp <= pairInfo.lastBidTime + CLOSE_BID_DELAY, 'FESN: BID TOO LATE 2');\n                }\n            }\n\n            if(!isReclaimable)\n            {\n                require(msg.value >= pairInfo.currentPrice * 102 / 100, 'FESN: PAY LESS 1');  // minimum 2% increase\n                require(msg.value >= pairInfo.currentPrice + MINIMUM_PRICE_INCREACE, 'FESN: PAY LESS 2');  // minimum 0.02 BNB increase\n\n                // calculate airdrop amount, may be zero if airdrop depleted\n                airdropAmount = getAirDropAmount(msg.value - pairInfo.currentPrice);\n\n                // repay amount\n                uint256 repayAmount = pairInfo.currentPrice;\n                \n                // Change the token owner\n                _transfer(preOwner, to, tokenID);\n                \n                // update pairInfo information\n                pairInfo.lastBidTime = uint48(block.timestamp);\n                pairInfo.currentPrice = uint128(msg.value);\n\n                // Airdrop to the next coming tenders\n                if(airdropAmount > 0) TransferHelper.safeTransfer(FeswapToken, to, airdropAmount);\n\n                // Repay the previous owner             \n                TransferHelper.safeTransferETH(preOwner, repayAmount);\n                return tokenID;\n            }\n\n            // Prepare to reclaim the swap token-pair, half of the bidding price will be returned\n            uint256 returnPrice = pairInfo.currentPrice / 2;\n\n            // Change the token owner\n            _transfer(preOwner, to, tokenID);\n            \n            // return back 50% of the previous price\n            if( returnPrice > 0 ){\n                if((AirdropDepletionTime==0) || (pairInfo.timeCreated <= AirdropDepletionTime))\n                    TransferHelper.safeTransfer(FeswapToken, preOwner, returnPrice * AIRDROP_RATE_FOR_WINNER);\n\n                // As preOwner cannot be contact, re-entry not possible here       \n                TransferHelper.safeTransferETH(preOwner, returnPrice);\n            }\n        } else {\n            // _mint will check 'to' not be Zero, and tokenID not repeated.\n            _mint(to, tokenID);\n            emit PairCreadted(token0, token1, tokenID);             // (token0, token1, tokenID)\n            \n            // Only creators of the first 50,000 token pairs will receive the airdrop\n//          if (totalSupply() <= 50_000) airdropAmount = AIRDROP_FOR_FIRST;     // BNB\n            if (totalSupply() <= 10_000) airdropAmount = AIRDROP_FOR_FIRST;     // MATIC\n//          if (totalSupply() <= 4_000) airdropAmount = AIRDROP_FOR_FIRST;      // AVALANCHE\n  \n        }\n            \n        // Prepare swap token-pair infomation for initial creation or re-bidding\n        FeswaPair memory newPairInfo;\n        newPairInfo.tokenA = token0;\n        newPairInfo.tokenB = token1;\n        newPairInfo.currentPrice = uint128(msg.value);              \n        newPairInfo.timeCreated = uint48(block.timestamp);\n        newPairInfo.lastBidTime = uint48(block.timestamp);\n        newPairInfo.poolState = PoolRunningPhase.BidPhase;\n        ListPools[tokenID] = newPairInfo;\n\n        if(msg.value > 0) airdropAmount += getAirDropAmount(msg.value);\n\n        // Airdrop to the first tender, airdropAmount maybe 0 after 50K/10K token pair created\n        if(airdropAmount > 0) TransferHelper.safeTransfer(FeswapToken, to, airdropAmount);\n    }\n\n    function getAirDropAmount(uint256 userBidValue) internal returns (uint256 airdropAmount) {\n        airdropAmount = 0;\n        if(AirdropDepletionTime == 0) {\n            uint256 availableAirdrop = BIDDING_AIRDROP_CAP - TotalBidValue;\n            uint256 airdropValue = userBidValue;\n            if(availableAirdrop <= airdropValue) {\n                airdropValue = availableAirdrop;\n                AirdropDepletionTime = uint64(block.timestamp);\n            }\n            airdropAmount = airdropValue * AIRDROP_RATE_FOR_NEXT_BIDDER;\n        }\n        TotalBidValue += uint128(userBidValue);\n        return airdropAmount;\n    }\n\n    /**\n     * @dev Settle the bid for the swap pair. \n     */\n    function ManageFeswaPair( uint256 tokenID, address pairProfitReceiver, uint256 rateTrigger, uint256 switchOracleOn ) \n                external returns (address pairAAB, address pairABB) \n    {\n        require(msg.sender == ownerOf(tokenID), 'FESN: NOT TOKEN OWNER');       // ownerOf checked if tokenID existing\n\n        FeswaPair storage pairInfo = ListPools[tokenID]; \n        if(pairInfo.poolState < PoolRunningPhase.BidSettled){\n            if(pairInfo.poolState == PoolRunningPhase.BidPhase){\n                require(block.timestamp > pairInfo.timeCreated + OPEN_BID_DURATION, 'FESN: BID ON GOING 1');  \n            } else {\n                assert(pairInfo.poolState == PoolRunningPhase.BidDelaying); \n                require(block.timestamp > pairInfo.lastBidTime + CLOSE_BID_DELAY, 'FESN: BID ON GOING 2');\n            }\n\n            // could prevent recursive calling\n            pairInfo.poolState = PoolRunningPhase.BidSettled;\n\n            // Airdrop to the NFT owner, may be over airdropped, the over part paid from FeSwap Fund\n            if(pairInfo.currentPrice > 0) { \n                if((AirdropDepletionTime == 0) || (pairInfo.timeCreated <= AirdropDepletionTime))\n                    TransferHelper.safeTransfer(FeswapToken, msg.sender, pairInfo.currentPrice * AIRDROP_RATE_FOR_WINNER);\n            }    \n        }\n\n        (address tokenA, address tokenB) = (pairInfo.tokenA, pairInfo.tokenB);\n\n        // Create or Update the Pair settings \n        (pairAAB, pairABB) = IFeSwapFactory(PairFactory).createUpdatePair(tokenA, tokenB, pairProfitReceiver, rateTrigger, switchOracleOn); \n    }\n\n\n    /**\n     * @dev Sell the Pair with the specified Price. \n     */\n    function FeswaPairForSale(uint256 tokenID, uint256 pairPrice) external returns (uint256 newPrice) {\n        require(msg.sender == ownerOf(tokenID), 'FESN: NOT TOKEN OWNER');       // ownerOf checked if tokenID existing\n        \n        FeswaPair storage pairInfo = ListPools[tokenID]; \n        require(pairInfo.poolState >= PoolRunningPhase.BidSettled, 'FESN: BID NOT SETTLED'); \n\n        if(pairPrice != 0){\n            require(pairPrice <= MAX_SALE_PRICE, 'FESN: PRICE TOO HIGH'); \n            pairInfo.poolState = PoolRunningPhase.PoolForSale;\n            pairInfo.currentPrice = uint128(pairPrice);\n        } else {\n            pairInfo.poolState = PoolRunningPhase.PoolHolding;\n        }\n        \n        return pairPrice;\n    }    \n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\n        internal\n        override(ERC721, ERC721Enumerable)\n    {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    } \n\n\n}\n\n/**\n * @title FeswaNFT contract\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n */\n\ncontract FeswaNFTPatch is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable, DestroyController { \n    //    using SafeMath for uint256;\t// seems not necessary\n\n    // Public variables\n    string public constant NAME = 'FeSwap Pool NFT';\n    string public constant SYMBOL = 'FESN';\n\n    // Price offering duration: two weeks \n    uint256 public constant OPEN_BID_DURATION = (3600 * 24 * 3);\n\n    uint256 public constant RECLAIM_DURATION  = (3600 * 24 * 4);    // NFT will be reclaimed if the token pair is not created in the duration \n\n    // Price offering waiting duration: 2 Hours\n    uint256 public constant CLOSE_BID_DELAY = (3600 * 2);           \n\n    // Airdrop for the first tender: 1000 FESW\n    // uint256 public constant AIRDROP_FOR_FIRST    = 1000e18;             // BNB:      1000\n    uint256 public constant AIRDROP_FOR_FIRST       = 3000e18;             // MATIC:    3000\n    // uint256 public constant AIRDROP_FOR_FIRST    = 5000e18;             // Avalanche: 5000\n\n    // BNB = 1; MATIC = 100; Arbitrum, Rinkeby = 0.25; Avalanche=5, HT = 20, Fantom = 80, Harmony = 500\n\n    // Airdrop for the next tender: 10000 FESW/BNB\n    uint256 public constant AIRDROP_RATE_FOR_NEXT_BIDDER = 10_000 / 100;      // 10_000 / 1, BNB = 1; MATIC = 100 ; Arbitrum: 40_000\n\n    // Airdrop rate for Bid winner: 50000 FESW/BNB\n    uint256 public constant AIRDROP_RATE_FOR_WINNER = 50_000 / 100;           // 50_000 / 1; Arbitrum: 200_000\n\n    // Minimum price increase for tender: 0.02 BNB, 2 MATIC\n    uint256 public constant MINIMUM_PRICE_INCREACE = 2e16 * 100;              //  2e16 * 1; Arbitrum: 5e15\n\n    // Max price for NFT sale: 100,000 BNB/ 100M MATIC \n    uint256 public constant MAX_SALE_PRICE = 1000_000e18 * 100;               // 1000_000e18 * 1; Arbitrum: 250_000e18\n\n    // Bidding airdrop cap : 2500 BNB\n    // uint256 private constant BIDDING_AIRDROP_CAP = 2500e18;             // BNB:     2500 BNB\n    uint256 private constant BIDDING_AIRDROP_CAP    = 2800e18 * 100;       // MATIC:   280,000 MATIC\n\n    // contract of Feswap DAO Token\n    address public immutable FeswapToken;\n\n    // contract of Token Pair Factory\n    address public immutable PairFactory;\n\n    // Sale start timestamp\n    uint256 public immutable SaleStartTime;                                   //2021/09/28 08:00\n\n    uint128 public TotalBidValue;\n    uint64  public AirdropDepletionTime;\n\n    // Mapping from token ID to token pair infomation\n    mapping (uint256 => FeswaPair) public ListPools;\n \n    // Events\n    event PairCreadted(address indexed tokenA, address indexed tokenB, uint256 tokenID);\n  \n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (address feswaToken, address pairFactory, uint256 saleStartTime ) \n        ERC721(NAME, SYMBOL)\n    {\n        FeswapToken = feswaToken;\n        PairFactory = pairFactory;\n        SaleStartTime = saleStartTime;\n    }\n  \n    /**\n     * @dev Sell the Pair with the specified Price. \n     */\n    function FeswaPairBuyInPatch(uint256 tokenID, uint256 newPrice, address to) external payable returns (uint256 getPrice) {\n        require(to != address(0), 'FeSwap: ZERO_ADDRESS');\n        require(_exists(tokenID), 'FESN: TOKEN NOT CREATED');\n        FeswaPair storage pairInfo = ListPools[tokenID]; \n        require(pairInfo.poolState == PoolRunningPhase.PoolForSale, 'FESN: NOT FOR SALE');\n\n        uint256  currentPrice = pairInfo.currentPrice;\n        require(msg.value >= currentPrice, 'FESN: PAY LESS');  \n        require(newPrice <= MAX_SALE_PRICE, 'FESN: PRICE TOO HIGH'); \n\n        // Change the token owner\n        address preOwner = ownerOf(tokenID);\n        _transfer(preOwner, to, tokenID);\n\n        if(newPrice != 0){\n            pairInfo.currentPrice = uint128(newPrice);\n        } else {\n            pairInfo.poolState = PoolRunningPhase.PoolHolding;\n        }\n\n        // Modify the profit receiver \n        IFeSwapFactory(PairFactory).createUpdatePair(pairInfo.tokenA, pairInfo.tokenB, to, 0, 0);     \n\n        // Send ETH to the owner                    \n        TransferHelper.safeTransferETH(preOwner, currentPrice);\n        if( msg.value > currentPrice) \n            TransferHelper.safeTransferETH(msg.sender, msg.value - currentPrice);\n\n        return currentPrice;\n    }    \n\n    /**\n     * @dev Return the token-pair information \n     */\n    function getPoolInfoByTokens(address tokenA, address tokenB) external view returns (uint256 tokenID, address nftOwner, FeswaPair memory pairInfo) {\n        (address token0, address token1) = (tokenA < tokenB) ? (tokenA, tokenB) : (tokenB, tokenA);\n        tokenID = uint256(keccak256(abi.encodePacked(address(this), token0, token1)));\n        (nftOwner, pairInfo) = getPoolInfo(tokenID);\n    }\n\n    /**\n     * @dev Return the token pair addresses by TokenID \n     */\n    function getPoolInfo(uint256 tokenID) public view returns (address nftOwner, FeswaPair memory pairInfo) {\n        if(_exists(tokenID)){\n            nftOwner = ownerOf(tokenID);\n            pairInfo = ListPools[tokenID];\n        }\n    }\n\n    /**\n     * @dev Withdraw\n     */\n    function withdraw(address to, uint256 value) public onlyOwner{\n        require(address(this).balance >= value, 'FESN: INSUFFICIENT BALANCE');\n        TransferHelper.safeTransferETH(to, value);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\n        internal\n        override(ERC721, ERC721Enumerable)\n    {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n        super._burn(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    } \n\n    /**\n     * @dev @dev Set the prefix for the tokenURIs.\n     */\n//    function setTokenURIPrefix(string memory prefix) public onlyOwner {\n//        _setBaseURI(prefix);\n//    }\n\n//    function setTokenURI(uint256 tokenID, string memory tokenURI) public {\n//        require(msg.sender == ownerOf(tokenID), 'FESN: NOT TOKEN OWNER');       // ownerOf checked if tokenID existing\n//        _setTokenURI(tokenID, tokenURI);\n//    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/Dex/Governance/utils/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    },
    "contracts/Dex/Governance/patch/NFTPatchCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to the patch \n *      using the EVM instruction `delegatecall`. The success and return data of the delegated call \n *      will be returned back to the caller of the proxy.\n */\nabstract contract NFTPatchCaller {\n    // DELEGATE_TARGET = uint160(                      // downcast to match the address type.\n    //                      uint256(                    // convert to uint to truncate upper digits.\n    //                          keccak256(                // compute the CREATE2 hash using 4 inputs.\n    //                              abi.encodePacked(       // pack all inputs to the hash together.\n    //                                  hex\"ff\",              // start with 0xff to distinguish from RLP.\n    //                                  address(this),        // this contract will be the caller.\n    //                                  salt,                 // pass in the supplied salt value.\n    //                                  _metamorphicContractInitializationCodeHash // the init code hash.\n    //                              )\n    //                          )\n    //                      )\n    //                   )\n    //\n    // salt = keccak256(\"Feswap NFT Patch\") = 0x291AD4D300CBA1259F2807167DE059F45F0EA7EDC76A99BE5290E88E498EC62B\n    // metamorphicContractInitializationCode = 0x60006020816004601c335a63aaf10f428752fa60185780fd5b808151803b80938091923cf3\n    // _metamorphicContractInitializationCodeHash = keccak256(metamorphicContractInitializationCode)\n    //                                            = 0x15bfb1132dc67a984de77a9eef294f7e58964d02c62a359fd6f3c0c1d443e35c \n    // address(this): 0x84e924C5E04438D2c1Df1A981f7E7104952e6de1 (Test) \n    // address(this): 0x6A8FE4753AB456e85E1379432d92ABF1fB49B5Df (Rinkeby/BSC/Polygon/Harmoney/Arbitrum/Fantom/Avalance/Heco Testnet) \n    // address(this): 0x8565570A7cB2b2508F9180AD83e8f58F25e41596 (Goerli) \n    // address(this): 0x0528D7de63aafdF748a5ef530949C80c4e8fbeC7 (Polygon Mainnet) \n   \n//  address public constant DELEGATE_TARGET = 0x92DD76703DACF9BE7F61CBC7ADAF77319084DBF8;   // (Goerli)\n//  address public constant DELEGATE_TARGET = 0x0c30E7e5361533961CC651ba4F32EA222C0D214B;   // (Test)\n//  address public constant DELEGATE_TARGET = 0x90ccE03b617AAA4924bEabc41856973f52684B9B;   // (BSC/MATIC Testnet)\n    address public constant DELEGATE_TARGET = 0x90A52bC0Ed546Cd90CD0C1BF271a497746874A9f;   // (Polygon Mainnet)\n\n    /**\n     * @dev Delegates the current call to `DELEGATE_TARGET`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n\n    receive() external virtual payable {\n        revert(\"Refused!\");\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n       // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), DELEGATE_TARGET, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n}\n"
    },
    "contracts/Dex/Governance/patch/DestroyController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nabstract contract DestroyController{\n    // For Test \n//  address public constant ROOT_CONTRACT = 0xaC8444e7d45c34110B34Ed269AD86248884E78C7;\n//  address public constant DESTROY_CONTROLLER = 0x63FC2aD3d021a4D7e64323529a55a9442C444dA0;\n\n    // For Deploy \n//  address public constant ROOT_CONTRACT         = 0xf6475c3143574F4d84c627fea3df81036ceeDAC4;     // MATIC Testnet\n//  address public constant DESTROY_CONTROLLER    = 0x8d832f73D678cFd2dA04401b18973Ed146Db1ABA;     // MATIC Testnet\n    address public constant ROOT_CONTRACT         = 0xA2f089377f4Dddf971ba65a69Fb4DFDD5fAf16Bb;     // MATIC Mainnet: NFT \n    address public constant DESTROY_CONTROLLER    = 0x8De31B9958995792414d34F8De24713e3267DE45;     // MATIC Mainnet: Deployer\n       \n    function destroy(address payable to) public {\n        require(address(this) != ROOT_CONTRACT, \"Root not destroyable!\");\n        require(msg.sender == DESTROY_CONTROLLER, \"Destroy not permitted!\");\n        selfdestruct(to);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/Dex/Governance/FeswaNFTPatchPure.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2021-08-20\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"./patch/DestroyController.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n}\n\n\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n}\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n\n    interface IFeSwapFactory {\n        function createUpdatePair(address tokenA, address tokenB, address pairOwner, uint256 rateTrigger, uint256 switchOracle) \n                                    external returns (address pairAAB,address pairABB);\n    }\n\n    enum PoolRunningPhase {\n        BidToStart,\n        BidPhase, \n        BidDelaying,\n        BidSettled,\n        PoolHolding, \n        PoolForSale\n    }\n\n    struct FeswaPair {\n        address tokenA;\n        address tokenB;\n        uint128 currentPrice;\n        uint48  timeCreated;\n        uint48  lastBidTime; \n        PoolRunningPhase  poolState;\n    }\n\n/**\n * @title FeswaNFT contract\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n */\n\ncontract FeswaNFTPatchPure is ERC721, Ownable, DestroyController { \n\n    //    using SafeMath for uint256;\t// seems not necessary\n\n    // Public variables\n    string public constant NAME = 'FeSwap Pool NFT';\n    string public constant SYMBOL = 'FESN';\n\n    // Price offering duration: two weeks \n    uint256 public constant OPEN_BID_DURATION = (3600 * 24 * 3);\n\n    uint256 public constant RECLAIM_DURATION  = (3600 * 24 * 4);    // NFT will be reclaimed if the token pair is not created in the duration \n\n    // Price offering waiting duration: 2 Hours\n    uint256 public constant CLOSE_BID_DELAY = (3600 * 2);           \n\n    // Airdrop for the first tender: 1000 FESW\n    // uint256 public constant AIRDROP_FOR_FIRST    = 1000e18;             // BNB:      1000\n    uint256 public constant AIRDROP_FOR_FIRST       = 3000e18;             // MATIC:    3000\n    // uint256 public constant AIRDROP_FOR_FIRST    = 5000e18;             // Avalanche: 5000\n\n    // BNB = 1; MATIC = 100; Arbitrum, Rinkeby = 0.25; Avalanche=5, HT = 20, Fantom = 80, Harmony = 500\n\n    // Airdrop for the next tender: 10000 FESW/BNB\n    uint256 public constant AIRDROP_RATE_FOR_NEXT_BIDDER = 10_000 / 100;      // 10_000 / 1, BNB = 1; MATIC = 100 ; Arbitrum: 40_000\n\n    // Airdrop rate for Bid winner: 50000 FESW/BNB\n    uint256 public constant AIRDROP_RATE_FOR_WINNER = 50_000 / 100;           // 50_000 / 1; Arbitrum: 200_000\n\n    // Minimum price increase for tender: 0.02 BNB, 2 MATIC\n    uint256 public constant MINIMUM_PRICE_INCREACE = 2e16 * 100;              //  2e16 * 1; Arbitrum: 5e15\n\n    // Max price for NFT sale: 100,000 BNB/ 100M MATIC \n    uint256 public constant MAX_SALE_PRICE = 1000_000e18 * 100;               // 1000_000e18 * 1; Arbitrum: 250_000e18\n\n    // Bidding airdrop cap : 2500 BNB\n    // uint256 private constant BIDDING_AIRDROP_CAP = 2500e18;             // BNB:     2500 BNB\n    uint256 private constant BIDDING_AIRDROP_CAP    = 2800e18 * 100;       // MATIC:   280,000 MATIC\n\n    // contract of Feswap DAO Token\n//    address public immutable FeswapToken;\n\n    // contract of Token Pair Factory\n    address private immutable PairFactory = 0xFDFEF9D10d929cB3905C71400ce6be1990EA0F34;     // hardcoded for test\n\n    // Sale start timestamp\n//    uint256 public immutable SaleStartTime;                                   //2021/09/28 08:00\n\n    uint128 public TotalBidValue;\n    uint64  public AirdropDepletionTime;\n\n    // Mapping from token ID to token pair infomation\n    mapping (uint256 => FeswaPair) public ListPools;\n \n    // Events\n    event PairCreadted(address indexed tokenA, address indexed tokenB, uint256 tokenID);\n  \n    /**\n     * @dev Sell the Pair with the specified Price. \n     */\n    function FeswaPairBuyInPatch(uint256 tokenID, uint256 newPrice, address to) external payable returns (uint256 getPrice) {\n        require(to != address(0), 'FeSwap: ZERO_ADDRESS');\n        require(_exists(tokenID), 'FESN: TOKEN NOT CREATED');\n        FeswaPair storage pairInfo = ListPools[tokenID]; \n        require(pairInfo.poolState == PoolRunningPhase.PoolForSale, 'FESN: NOT FOR SALE');\n\n        uint256  currentPrice = pairInfo.currentPrice;\n        require(msg.value >= currentPrice, 'FESN: PAY LESS');  \n        require(newPrice <= MAX_SALE_PRICE, 'FESN: PRICE TOO HIGH'); \n\n        // Change the token owner\n        address preOwner = ownerOf(tokenID);\n        _transfer(preOwner, to, tokenID);\n\n        if(newPrice != 0){\n            pairInfo.currentPrice = uint128(newPrice);\n        } else {\n            pairInfo.poolState = PoolRunningPhase.PoolHolding;\n        }\n\n        // Modify the profit receiver \n        IFeSwapFactory(PairFactory).createUpdatePair(pairInfo.tokenA, pairInfo.tokenB, to, 0, 0);     \n\n        // Send ETH to the owner                    \n        TransferHelper.safeTransferETH(preOwner, currentPrice);\n        if( msg.value > currentPrice) \n            TransferHelper.safeTransferETH(msg.sender, msg.value - currentPrice);\n\n        return currentPrice;\n    }    \n\n    /**\n     * @dev Return the token-pair information \n     */\n    function getPoolInfoByTokens(address tokenA, address tokenB) external view returns (uint256 tokenID, address nftOwner, FeswaPair memory pairInfo) {\n        (address token0, address token1) = (tokenA < tokenB) ? (tokenA, tokenB) : (tokenB, tokenA);\n        tokenID = uint256(keccak256(abi.encodePacked(address(this), token0, token1)));\n        (nftOwner, pairInfo) = getPoolInfo(tokenID);\n    }\n\n    /**\n     * @dev Return the token pair addresses by TokenID \n     */\n    function getPoolInfo(uint256 tokenID) public view returns (address nftOwner, FeswaPair memory pairInfo) {\n        if(_exists(tokenID)){\n            nftOwner = ownerOf(tokenID);\n            pairInfo = ListPools[tokenID];\n        }\n    }\n\n    /**\n     * @dev Withdraw\n     */\n    function withdraw(address to, uint256 value) public onlyOwner{\n        require(address(this).balance >= value, 'FESN: INSUFFICIENT BALANCE');\n        TransferHelper.safeTransferETH(to, value);\n    }\n\n    /**\n     * @dev @dev Set the prefix for the tokenURIs.\n     */\n    function setTokenURIPrefix(string memory prefix) public onlyOwner {\n        _setBaseURI(prefix);\n    }\n\n    function setTokenURI(uint256 tokenID, string memory tokenURI) public {\n        require(msg.sender == ownerOf(tokenID), 'FESN: NOT TOKEN OWNER');       // ownerOf checked if tokenID existing\n        _setTokenURI(tokenID, tokenURI);\n    }\n}\n"
    },
    "contracts/Dex/Governance/FeswaNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\n\nimport \"./utils/TransferHelper.sol\";\nimport \"./patch/NFTPatchCaller.sol\";\n\n    interface IFeSwapFactory {\n        function createUpdatePair(address tokenA, address tokenB, address pairOwner, uint256 rateTrigger, uint256 switchOracle) \n                                    external returns (address pairAAB,address pairABB);\n    }\n\n    enum PoolRunningPhase {\n        BidToStart,\n        BidPhase, \n        BidDelaying,\n        BidSettled,\n        PoolHolding, \n        PoolForSale\n    }\n\n    struct FeswaPair {\n        address tokenA;\n        address tokenB;\n        uint128 currentPrice;\n        uint48  timeCreated;\n        uint48  lastBidTime; \n        PoolRunningPhase  poolState;\n    }\n\n/**\n * @title FeswaNFT contract\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n */\n\ncontract FeswaNFT is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable, NFTPatchCaller { \n    //    using SafeMath for uint256;\t// seems not necessary\n\n    // Public variables\n    string public constant NAME = 'FeSwap Pool NFT';\n    string public constant SYMBOL = 'FESN';\n\n    // Price offering duration: two weeks \n    uint256 public constant OPEN_BID_DURATION = (3600 * 24 * 3);\n\n    uint256 public constant RECLAIM_DURATION  = (3600 * 24 * 4);    // NFT will be reclaimed if the token pair is not created in the duration \n\n    // Price offering waiting duration: 2 Hours\n    uint256 public constant CLOSE_BID_DELAY = (3600 * 2);           \n\n    // Airdrop for the first tender: 1000 FESW\n    // uint256 public constant AIRDROP_FOR_FIRST    = 1000e18;             // BNB:      1000\n    uint256 public constant AIRDROP_FOR_FIRST       = 3000e18;             // MATIC:    3000\n    // uint256 public constant AIRDROP_FOR_FIRST    = 5000e18;             // Avalanche: 5000\n\n    // BNB = 1; MATIC = 100; Arbitrum, Rinkeby = 0.25; Avalanche=5, HT = 20, Fantom = 80, Harmony = 500\n\n    // Airdrop for the next tender: 10000 FESW/BNB\n    uint256 public constant AIRDROP_RATE_FOR_NEXT_BIDDER = 10_000 / 100;      // 10_000 / 1, BNB = 1; MATIC = 100 ; Arbitrum: 40_000\n\n    // Airdrop rate for Bid winner: 50000 FESW/BNB\n    uint256 public constant AIRDROP_RATE_FOR_WINNER = 50_000 / 100;           // 50_000 / 1; Arbitrum: 200_000\n\n    // Minimum price increase for tender: 0.02 BNB, 2 MATIC\n    uint256 public constant MINIMUM_PRICE_INCREACE = 2e16 * 100;              //  2e16 * 1; Arbitrum: 5e15\n\n    // Max price for NFT sale: 100,000 BNB/ 100M MATIC \n    uint256 public constant MAX_SALE_PRICE = 1000_000e18 * 100;               // 1000_000e18 * 1; Arbitrum: 250_000e18\n\n    // Bidding airdrop cap : 2500 BNB\n    // uint256 private constant BIDDING_AIRDROP_CAP = 2500e18;             // BNB:     2500 BNB\n    uint256 private constant BIDDING_AIRDROP_CAP    = 2800e18 * 100;       // MATIC:   280,000 MATIC\n\n    // contract of Feswap DAO Token\n    address public immutable FeswapToken;\n\n    // contract of Token Pair Factory\n    address public immutable PairFactory;\n\n    // Sale start timestamp\n    uint256 public immutable SaleStartTime;                                   //2021/09/28 08:00\n\n    uint128 public TotalBidValue;\n    uint64  public AirdropDepletionTime;\n\n    // Mapping from token ID to token pair infomation\n    mapping (uint256 => FeswaPair) public ListPools;\n \n    // Events\n    event PairCreadted(address indexed tokenA, address indexed tokenB, uint256 tokenID);\n  \n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (address feswaToken, address pairFactory, uint256 saleStartTime ) \n        ERC721(NAME, SYMBOL)\n    {\n        FeswapToken = feswaToken;\n        PairFactory = pairFactory;\n        SaleStartTime = saleStartTime;\n    }\n\n    /**\n     * @dev Bid for the token-pair swap pool with higher price. \n     * Create the new NFT for the fisrt-time calling with initial price \n     */\n    function BidFeswaPair(address tokenA, address tokenB, address to) external payable returns (uint256 tokenID) {\n        require(block.timestamp > SaleStartTime, 'FESN: BID NOT STARTED');\n        require(tokenA != address(0) && tokenB != address(0) && to != address(0) , 'FeSwap: ZERO_ADDRESS');\n        require(tokenA != tokenB, 'FESN: IDENTICAL_ADDRESSES');\n        require(Address.isContract(tokenA) && Address.isContract(tokenB), 'FESN: Must be token');\n        require(!Address.isContract(msg.sender), 'FESN: Contract Not Allowed');\n        if(to != msg.sender) require(!Address.isContract(to), 'FESN: Contract Not Allowed');\n\n        (address token0, address token1) = (tokenA <= tokenB) ? (tokenA, tokenB) : (tokenB, tokenA);\n        tokenID  = uint256(keccak256(abi.encodePacked(address(this), token0, token1)));\n\n        uint256 airdropAmount = 0;\n\n        if(_exists(tokenID )){\n            bool isReclaimable = false;\n            address preOwner = ownerOf(tokenID);\n            FeswaPair storage pairInfo = ListPools[tokenID]; \n\n            if(pairInfo.poolState == PoolRunningPhase.BidPhase){\n                if( block.timestamp > (pairInfo.timeCreated + OPEN_BID_DURATION + RECLAIM_DURATION)) {\n                    isReclaimable = true;\n                }\n                else{\n                    require(block.timestamp <= pairInfo.timeCreated + OPEN_BID_DURATION, 'FESN: BID TOO LATE 1');  // Bid keep open for 3 days\n                    if(block.timestamp >= (pairInfo.timeCreated + OPEN_BID_DURATION - CLOSE_BID_DELAY)) {\n                        pairInfo.poolState = PoolRunningPhase.BidDelaying;\n                    }\n                }\n            } else {\n                require(pairInfo.poolState == PoolRunningPhase.BidDelaying, 'FESN: BID COMPLETED');\n                if( block.timestamp > (pairInfo.lastBidTime + CLOSE_BID_DELAY + RECLAIM_DURATION)) {\n                    isReclaimable = true;\n                }\n                else{\n                    require(block.timestamp <= pairInfo.lastBidTime + CLOSE_BID_DELAY, 'FESN: BID TOO LATE 2');\n                }\n            }\n\n            if(!isReclaimable)\n            {\n                require(msg.value >= pairInfo.currentPrice * 102 / 100, 'FESN: PAY LESS 1');  // minimum 2% increase\n                require(msg.value >= pairInfo.currentPrice + MINIMUM_PRICE_INCREACE, 'FESN: PAY LESS 2');  // minimum 0.02 BNB increase\n\n                // calculate airdrop amount, may be zero if airdrop depleted\n                airdropAmount = getAirDropAmount(msg.value - pairInfo.currentPrice);\n\n                // repay amount\n                uint256 repayAmount = pairInfo.currentPrice;\n                \n                // Change the token owner\n                _transfer(preOwner, to, tokenID);\n                \n                // update pairInfo information\n                pairInfo.lastBidTime = uint48(block.timestamp);\n                pairInfo.currentPrice = uint128(msg.value);\n\n                // Airdrop to the next coming tenders\n                if(airdropAmount > 0) TransferHelper.safeTransfer(FeswapToken, to, airdropAmount);\n\n                // Repay the previous owner             \n                TransferHelper.safeTransferETH(preOwner, repayAmount);\n                return tokenID;\n            }\n\n            // Prepare to reclaim the swap token-pair, half of the bidding price will be returned\n            uint256 returnPrice = pairInfo.currentPrice / 2;\n\n            // Change the token owner\n            _transfer(preOwner, to, tokenID);\n            \n            // return back 50% of the previous price\n            if( returnPrice > 0 ){\n                if((AirdropDepletionTime==0) || (pairInfo.timeCreated <= AirdropDepletionTime))\n                    TransferHelper.safeTransfer(FeswapToken, preOwner, returnPrice * AIRDROP_RATE_FOR_WINNER);\n\n                // As preOwner cannot be contact, re-entry not possible here       \n                TransferHelper.safeTransferETH(preOwner, returnPrice);\n            }\n        } else {\n            // _mint will check 'to' not be Zero, and tokenID not repeated.\n            _mint(to, tokenID);\n            emit PairCreadted(token0, token1, tokenID);             // (token0, token1, tokenID)\n            \n            // Only creators of the first 50,000 token pairs will receive the airdrop\n//          if (totalSupply() <= 50_000) airdropAmount = AIRDROP_FOR_FIRST;     // BNB\n            if (totalSupply() <= 10_000) airdropAmount = AIRDROP_FOR_FIRST;     // MATIC\n//          if (totalSupply() <= 4_000) airdropAmount = AIRDROP_FOR_FIRST;      // AVALANCHE\n  \n        }\n            \n        // Prepare swap token-pair infomation for initial creation or re-bidding\n        FeswaPair memory newPairInfo;\n        newPairInfo.tokenA = token0;\n        newPairInfo.tokenB = token1;\n        newPairInfo.currentPrice = uint128(msg.value);              \n        newPairInfo.timeCreated = uint48(block.timestamp);\n        newPairInfo.lastBidTime = uint48(block.timestamp);\n        newPairInfo.poolState = PoolRunningPhase.BidPhase;\n        ListPools[tokenID] = newPairInfo;\n\n        if(msg.value > 0) airdropAmount += getAirDropAmount(msg.value);\n\n        // Airdrop to the first tender, airdropAmount maybe 0 after 50K/10K token pair created\n        if(airdropAmount > 0) TransferHelper.safeTransfer(FeswapToken, to, airdropAmount);\n    }\n\n    function getAirDropAmount(uint256 userBidValue) internal returns (uint256 airdropAmount) {\n        airdropAmount = 0;\n        if(AirdropDepletionTime == 0) {\n            uint256 availableAirdrop = BIDDING_AIRDROP_CAP - TotalBidValue;\n            uint256 airdropValue = userBidValue;\n            if(availableAirdrop <= airdropValue) {\n                airdropValue = availableAirdrop;\n                AirdropDepletionTime = uint64(block.timestamp);\n            }\n            airdropAmount = airdropValue * AIRDROP_RATE_FOR_NEXT_BIDDER;\n        }\n        TotalBidValue += uint128(userBidValue);\n        return airdropAmount;\n    }\n\n    /**\n     * @dev Settle the bid for the swap pair. \n     */\n    function ManageFeswaPair( uint256 tokenID, address pairProfitReceiver, uint256 rateTrigger, uint256 switchOracleOn ) \n                external returns (address pairAAB, address pairABB) \n    {\n        require(msg.sender == ownerOf(tokenID), 'FESN: NOT TOKEN OWNER');       // ownerOf checked if tokenID existing\n\n        FeswaPair storage pairInfo = ListPools[tokenID]; \n        if(pairInfo.poolState < PoolRunningPhase.BidSettled){\n            if(pairInfo.poolState == PoolRunningPhase.BidPhase){\n                require(block.timestamp > pairInfo.timeCreated + OPEN_BID_DURATION, 'FESN: BID ON GOING 1');  \n            } else {\n                assert(pairInfo.poolState == PoolRunningPhase.BidDelaying); \n                require(block.timestamp > pairInfo.lastBidTime + CLOSE_BID_DELAY, 'FESN: BID ON GOING 2');\n            }\n\n            // could prevent recursive calling\n            pairInfo.poolState = PoolRunningPhase.BidSettled;\n\n            // Airdrop to the NFT owner, may be over airdropped, the over part paid from FeSwap Fund\n            if(pairInfo.currentPrice > 0) { \n                if((AirdropDepletionTime == 0) || (pairInfo.timeCreated <= AirdropDepletionTime))\n                    TransferHelper.safeTransfer(FeswapToken, msg.sender, pairInfo.currentPrice * AIRDROP_RATE_FOR_WINNER);\n            }    \n        }\n\n        (address tokenA, address tokenB) = (pairInfo.tokenA, pairInfo.tokenB);\n\n        // Create or Update the Pair settings \n        (pairAAB, pairABB) = IFeSwapFactory(PairFactory).createUpdatePair(tokenA, tokenB, pairProfitReceiver, rateTrigger, switchOracleOn); \n    }\n\n\n    /**\n     * @dev Sell the Pair with the specified Price. \n     */\n    function FeswaPairForSale(uint256 tokenID, uint256 pairPrice) external returns (uint256 newPrice) {\n        require(msg.sender == ownerOf(tokenID), 'FESN: NOT TOKEN OWNER');       // ownerOf checked if tokenID existing\n        \n        FeswaPair storage pairInfo = ListPools[tokenID]; \n        require(pairInfo.poolState >= PoolRunningPhase.BidSettled, 'FESN: BID NOT SETTLED'); \n\n        if(pairPrice != 0){\n            require(pairPrice <= MAX_SALE_PRICE, 'FESN: PRICE TOO HIGH'); \n            pairInfo.poolState = PoolRunningPhase.PoolForSale;\n            pairInfo.currentPrice = uint128(pairPrice);\n        } else {\n            pairInfo.poolState = PoolRunningPhase.PoolHolding;\n        }\n        \n        return pairPrice;\n    }    \n\n    /**\n     * @dev Sell the Pair with the specified Price. \n     */\n    function FeswaPairBuyIn(uint256 tokenID, uint256 newPrice, address to) external payable returns (uint256 getPrice) {\n        require(_exists(tokenID), 'FESN: TOKEN NOT CREATED');\n        FeswaPair storage pairInfo = ListPools[tokenID]; \n        require(pairInfo.poolState == PoolRunningPhase.PoolForSale, 'FESN: NOT FOR SALE');\n\n        uint256  currentPrice = pairInfo.currentPrice;\n        require(msg.value >= currentPrice, 'FESN: PAY LESS');  \n        require(newPrice <= MAX_SALE_PRICE, 'FESN: PRICE TOO HIGH'); \n\n        // Change the token owner\n        address preOwner = ownerOf(tokenID);\n\n        // send NFT to msg.sender, not to `to` Address\n        _transfer(preOwner, msg.sender, tokenID);\n\n        if(newPrice != 0){\n            pairInfo.currentPrice = uint128(newPrice);\n        } else {\n            pairInfo.poolState = PoolRunningPhase.PoolHolding;\n        }\n\n        // Modify the profit receiver \n        IFeSwapFactory(PairFactory).createUpdatePair(pairInfo.tokenA, pairInfo.tokenB, to, 0, 0);     \n\n        // Send ETH to the owner                    \n        TransferHelper.safeTransferETH(preOwner, currentPrice);\n        if( msg.value > currentPrice) \n            TransferHelper.safeTransferETH(msg.sender, msg.value - currentPrice);\n\n        return currentPrice;\n    }    \n\n    /**\n     * @dev Return the token-pair information \n     */\n    function getPoolInfoByTokens(address tokenA, address tokenB) external view returns (uint256 tokenID, address nftOwner, FeswaPair memory pairInfo) {\n        (address token0, address token1) = (tokenA < tokenB) ? (tokenA, tokenB) : (tokenB, tokenA);\n        tokenID = uint256(keccak256(abi.encodePacked(address(this), token0, token1)));\n        (nftOwner, pairInfo) = getPoolInfo(tokenID);\n    }\n\n    /**\n     * @dev Return the token pair addresses by TokenID \n     */\n    function getPoolInfo(uint256 tokenID) public view returns (address nftOwner, FeswaPair memory pairInfo) {\n        if(_exists(tokenID)){\n            nftOwner = ownerOf(tokenID);\n            pairInfo = ListPools[tokenID];\n        }\n    }\n\n    /**\n     * @dev Withdraw\n     */\n    function withdraw(address to, uint256 value) public onlyOwner{\n        require(address(this).balance >= value, 'FESN: INSUFFICIENT BALANCE');\n        TransferHelper.safeTransferETH(to, value);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\n        internal\n        override(ERC721, ERC721Enumerable)\n    {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n        super._burn(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }    \n\n    /**\n     * @dev @dev Set the prefix for the tokenURIs.\n     */\n//    function setTokenURIPrefix(string memory prefix) public onlyOwner {\n//        _setBaseURI(prefix);\n//    }\n\n//    function setTokenURI(uint256 tokenID, string memory tokenURI) public {\n//        require(msg.sender == ownerOf(tokenID), 'FESN: NOT TOKEN OWNER');       // ownerOf checked if tokenID existing\n//        _setTokenURI(tokenID, tokenURI);\n//    }\n}\n"
    },
    "contracts/Dex/Governance/FeswSponsor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./utils/SafeMath.sol\";\nimport \"./utils/TransferHelper.sol\";\n\n/**\n * @title FeswSponsor contract\n * @dev To raise sponsor and give away FESW\n */\n\ncontract FeswSponsor { \n\n    using SafeMath for uint256;\n\n    // Public variables\n    // FeSwap sponsor raising target: 1000 ETH\n    uint256 public constant TARGET_RAISING_ETH = 1_000e18;    \n\n    // FeSwap sponsor raising cap: 1001 ETH\n    uint256 public constant MIN_GUARANTEE_ETH = 1e18;    \n\n    // Initial FESW giveaway rate per ETH: 100K FESW/ETH\n    uint256 public constant INITIAL_FESW_RATE_PER_ETH = 100_000;    \n\n    // FESW giveaway change rate for total sponsored ETH, corresponding granulity is 0.05ETH\n    uint256 public constant FESW_CHANGE_RATE_VERSUS_ETH = 20; \n\n    // FESW sponsor raising duration: 30 days \n    uint256 public constant SPONSOR_DURATION = 30 * 24 * 3600;     \n\n    // contract of Feswap DAO Token\n    address public FeswapToken;     \n\n    // Feswap foundation address\n    address public FeswapFund;     \n\n    // Feswap Burner address\n    address public FeswapBurner;     \n\n    // Total received ETH\n    uint256 public TotalETHReceived;   \n\n    // Current giveaway rate\n    uint256 public CurrentGiveRate;    \n\n    // Sponsor start timestamp\n    uint64 public SponsorStartTime;\n\n    // Last block timestamp\n    uint64 public LastBlockTime;\n\n    // If sponsor raising finalized\n    uint64 public SponsorFinalized;\n\n    // Events for received sponsor\n    event EvtSponsorReceived(address indexed from, address indexed to, uint256 ethValue);\n\n    // Events for finalized sponsor\n    event EvtSponsorFinalized(address indexed to, uint256 ethValue);\n  \n    /**\n     * @dev Initializes the contract with fund and burner address\n     */\n    constructor (address feswapToken, address feswapFund, address feswapBurner, uint256 sponsorStartTime ) \n    {\n        FeswapToken         = feswapToken;\n        FeswapFund          = feswapFund; \n        FeswapBurner        = feswapBurner; \n        SponsorStartTime    = uint64(sponsorStartTime);\n    }\n\n    /**\n     * @dev Receive the sponsorship\n     * @param feswapReceiver The address receiving the giveaway FESW token\n     */\n    function Sponsor(address feswapReceiver) external payable returns (uint256 sponsorAccepted) {\n        require(block.timestamp >= SponsorStartTime, 'FESW: SPONSOR NOT STARTED');\n        require(block.timestamp < (SponsorStartTime + SPONSOR_DURATION), 'FESW: SPONSOR ENDED');\n        require(TotalETHReceived < TARGET_RAISING_ETH, 'FESW: SPONSOR COMPLETED');\n\n        // calculate the giveaway rate\n        uint256 feswGiveRate;\n        if(block.timestamp > LastBlockTime) {\n            // granulity is 0.05 ETH\n            feswGiveRate = INITIAL_FESW_RATE_PER_ETH - TotalETHReceived.mul(FESW_CHANGE_RATE_VERSUS_ETH).div(1e18);\n            CurrentGiveRate = feswGiveRate;\n            LastBlockTime = uint64(block.timestamp);\n        } else {\n            feswGiveRate = CurrentGiveRate;\n        }\n\n        // Maximum 1001 ETH accepted, extra ETH will be returned back\n        sponsorAccepted = TARGET_RAISING_ETH - TotalETHReceived;\n        if(sponsorAccepted < MIN_GUARANTEE_ETH){\n            sponsorAccepted = MIN_GUARANTEE_ETH;\n        }\n        if (msg.value < sponsorAccepted){\n            sponsorAccepted = msg.value;          \n        }                                                        \n\n        // Accumulate total ETH sponsored\n        TotalETHReceived += sponsorAccepted;                                                              \n\n        // FESW give away\n        uint256 feswapGiveaway = sponsorAccepted.mul(feswGiveRate);\n        TransferHelper.safeTransfer(FeswapToken, feswapReceiver, feswapGiveaway);\n \n        // return back extra ETH\n        if(msg.value > sponsorAccepted){\n            TransferHelper.safeTransferETH(msg.sender, msg.value - sponsorAccepted);\n        }    \n        \n        emit EvtSponsorReceived(msg.sender, feswapReceiver, sponsorAccepted);\n    }\n\n    /**\n     * @dev Finalize Feswap sponsor raising\n     */\n    function finalizeSponsor() public {\n        require(SponsorFinalized == 0, 'FESW: SPONSOR FINALIZED');\n        require(msg.sender == FeswapFund, 'FESW: NOT ALLOWED');\n        require( (block.timestamp >= (SponsorStartTime + SPONSOR_DURATION)) \n                    || (TotalETHReceived >= TARGET_RAISING_ETH), 'FESW: SPONSOR ONGOING');\n\n        // If sponsor raising succeeded, burning left FESW\n        address to = FeswapBurner;\n\n        // If sponsor raising failed \n        if(TotalETHReceived < TARGET_RAISING_ETH) to = FeswapFund;\n\n        // Claim or burn the left FESW\n        uint256 feswLeft = IERC20(FeswapToken).balanceOf(address(this));\n        TransferHelper.safeTransfer(FeswapToken, to, feswLeft);\n\n        // Claim the raised sponsor\n        TransferHelper.safeTransferETH(FeswapFund, address(this).balance );\n        SponsorFinalized = 0xA5;\n\n        emit EvtSponsorFinalized(FeswapFund, TotalETHReceived);\n    }\n}"
    },
    "contracts/Dex/Governance/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "contracts/Dex/Governance/utils/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n// Subject to the MIT license.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction underflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    },
    "contracts/Dex/Governance/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./utils/SafeMath.sol\";\n\ncontract Timelock {\n    using SafeMath for uint;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint indexed newDelay);\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\n\n    uint public constant GRACE_PERIOD = 14 days;\n    uint public constant MINIMUM_DELAY = 2 days;\n    uint public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint public delay;\n\n    mapping (bytes32 => bool) public queuedTransactions;\n\n    constructor(address admin_, uint delay_) {\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n\n        admin = admin_;\n        delay = delay_;\n    }\n\n    receive() external payable { }  \n\n    function setDelay(uint delay_) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n       \n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value:value}(callData);\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}"
    },
    "contracts/Dex/Governance/test/TimelockHarness.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../Timelock.sol\";\n\ninterface Administered {\n    function _acceptAdmin() external returns (uint);\n}\n\ncontract TimelockHarness is Timelock {\n    constructor(address admin_, uint delay_)\n        Timelock(admin_, delay_) {\n    }\n\n    function harnessSetPendingAdmin(address pendingAdmin_) public {\n        pendingAdmin = pendingAdmin_;\n    }\n\n    function harnessSetAdmin(address admin_) public {\n        admin = admin_;\n    }\n}\n\ncontract TimelockTest is Timelock {\n    constructor(address admin_, uint delay_) Timelock(admin_, 2 days) {\n        delay = delay_;\n    }\n\n    function harnessSetAdmin(address admin_) public {\n        require(msg.sender == admin);\n        admin = admin_;\n    }\n\n    function harnessAcceptAdmin(Administered administered) public {\n        administered._acceptAdmin();\n    }\n}\n"
    },
    "contracts/Dex/Governance/FeswVester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./utils/SafeMath.sol\";\n\ninterface IFeswap {\n    function balanceOf(address account) external view returns (uint);\n    function transfer(address dst, uint rawAmount) external returns (bool);\n}\n\ncontract FeswVester {\n    using SafeMath for uint;\n\n    address public Fesw;\n    address public recipient;\n\n    uint public vestingAmount;\n    uint public vestingBegin;\n    uint public vestingCliff;\n    uint public vestingEnd;\n\n    uint public lastUpdate;\n\n    constructor(\n        address Fesw_,\n        address recipient_,\n        uint vestingAmount_,\n        uint vestingBegin_,\n        uint vestingCliff_,\n        uint vestingEnd_\n    ) {\n        require(vestingBegin_ >= block.timestamp, 'FeswVester::constructor: vesting begin too early');\n        require(vestingCliff_ >= vestingBegin_, 'FeswVester::constructor: cliff is too early');\n        require(vestingEnd_ > vestingCliff_, 'FeswVester::constructor: end is too early');\n\n        Fesw = Fesw_;\n        recipient = recipient_;\n\n        vestingAmount = vestingAmount_;\n        vestingBegin = vestingBegin_;\n        vestingCliff = vestingCliff_;\n        vestingEnd = vestingEnd_;\n\n        lastUpdate = vestingBegin;\n    }\n\n    function setRecipient(address recipient_) public {\n        require(msg.sender == recipient, 'FeswVester::setRecipient: unauthorized');\n        recipient = recipient_;\n    }\n\n    function claim() public {\n        require(block.timestamp >= vestingCliff, 'FeswVester::claim: not time yet');\n        uint amount;\n        if (block.timestamp >= vestingEnd) {\n            amount = IFeswap(Fesw).balanceOf(address(this));\n        } else {\n            amount = vestingAmount.mul(block.timestamp - lastUpdate).div(vestingEnd - vestingBegin);\n            lastUpdate = block.timestamp;\n        }\n        IFeswap(Fesw).transfer(recipient, amount);\n    }\n}\n"
    },
    "contracts/Dex/Governance/Feswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"./utils/SafeMath.sol\";\nimport \"./patch/FeswPatchCaller.sol\";\n\ncontract Fesw is FeswPatchCaller{\n    /// @notice EIP-20 token name for this token\n    string public constant name = \"FeSwap DAO\";\n\n    /// @notice EIP-20 token symbol for this token\n    string public symbol;\n\n    /// @notice EIP-20 token decimals for this token\n    uint8 public constant decimals = 18;\n\n    /// @notice Total number of tokens in circulation\n    uint public totalSupply = 1_000_000_000e18;     // 1 billion FESW\n\n    /// @notice Address which may mint and burn FESW tokens\n    address public minterBurner;\n\n    /// @notice The timestamp after which minting may occur\n    uint public mintingAllowedAfter;\n\n    /// @notice Minimum time between mints\n    uint32 public constant minimumTimeBetweenMints = 1 days * 365;\n\n    /// @notice Cap that can be minted at each mint after 5 years\n    uint public mintCap = 10_000_000e18;      // 10 million FESW\n\n    // @notice Allowance amounts on behalf of others\n    // Documentation tag @notice not valid for non-public state variables\n    mapping (address => mapping (address => uint96)) internal allowances;\n\n    // @notice Official record of token balances for each account\n    mapping (address => uint96) internal balances;\n\n    /// @notice A record of each accounts delegate\n    mapping (address => address) public delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint96 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint) public nonces;\n\n    /// @notice An event thats emitted when the minterBurner address is changed\n    event MinterBurnerChanged(address minterBurner, address newMinterBurner);\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n    /// @notice The standard EIP-20 transfer event\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /// @notice The standard EIP-20 approval event\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /**\n     * @notice Construct a new FESW token\n     * @param account The initial account to grant all the tokens\n     * @param minterBurner_ The account with minting/burning ability\n     * @param mintingAllowedAfter_ The timestamp after which minting may occur\n     */\n    constructor(address account, address minterBurner_, uint mintingAllowedAfter_, string memory _symbol) {\n        require(mintingAllowedAfter_ >= block.timestamp, \"FESW::constructor: minting can only begin after deployment\");\n\n        symbol = _symbol;\n        balances[account] = uint96(totalSupply);\n        emit Transfer(address(0), account, totalSupply);\n        minterBurner = minterBurner_;\n        emit MinterBurnerChanged(address(0), minterBurner);\n        mintingAllowedAfter = mintingAllowedAfter_;\n    }\n\n    /**\n     * @notice Change the minter/burner address\n     * @param minterBurner_ The address of the new minter/burner\n     */\n    function setMinterBurner(address minterBurner_) external {\n        require(msg.sender == minterBurner, \"FESW::setMinter: only the minter can change the minter address\");\n        emit MinterBurnerChanged(minterBurner, minterBurner_);\n        minterBurner = minterBurner_;\n    }\n\n    /**\n     * @notice Mint new tokens\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to be minted\n     */\n    function mint(address dst, uint rawAmount) external {\n        require(msg.sender == minterBurner, \"FESW::mint: only the minter can mint\");\n        require(block.timestamp >= mintingAllowedAfter, \"FESW::mint: minting not allowed yet\");\n        require(dst != address(0), \"FESW::mint: cannot transfer to the zero address\");\n        //maximum 8 times minting\n        require(mintCap >= 50_000e18, \"FESW::mint: minting not allowed any more\");   \n\n        // record the mint\n        mintingAllowedAfter = SafeMath.add(block.timestamp, minimumTimeBetweenMints);\n\n        // mint the amount\n        uint96 amount = safe96(rawAmount, \"FESW::mint: amount exceeds 96 bits\");\n        require(amount <= mintCap, \"FESW::mint: exceeded mint cap\");\n        mintCap = mintCap / 2;\n        totalSupply = safe96(SafeMath.add(totalSupply, amount), \"FESW::mint: totalSupply exceeds 96 bits\");\n\n        // transfer the amount to the recipient\n        balances[dst] = add96(balances[dst], amount, \"FESW::mint: transfer amount overflows\");\n        emit Transfer(address(0), dst, amount);\n\n        // move delegates\n        _moveDelegates(address(0), delegates[dst], amount);\n    }\n\n    /**\n     * @notice Burn some tokens\n     */\n    function burn() external {\n        require(msg.sender == minterBurner, \"FESW::burn: Only the burner can burn\");\n\n        // burn the amount\n        uint96 amount = balances[minterBurner];\n        require(amount != 0, \"FESW::burn: No FESW token to burn\");\n\n        balances[minterBurner] = 0;\n        totalSupply = SafeMath.sub(totalSupply, amount);\n        emit Transfer(minterBurner, address(0), amount);\n\n        // move delegates\n        _moveDelegates(delegates[minterBurner], address(0), amount);\n    }\n\n    /**\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n     * @param account The address of the account holding the funds\n     * @param spender The address of the account spending the funds\n     * @return The number of tokens approved\n     */\n    function allowance(address account, address spender) external view returns (uint) {\n        return allowances[account][spender];\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint rawAmount) external returns (bool) {\n        uint96 amount;\n        if (rawAmount == type(uint256).max) {\n            amount = type(uint96).max;\n        } else {\n            amount = safe96(rawAmount, \"FESW::approve: amount exceeds 96 bits\");\n        }\n\n        allowances[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Triggers an approval from owner to spends\n     * @param owner The address to approve from\n     * @param spender The address to be approved\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @param deadline The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n        uint96 amount;\n        if (rawAmount ==type(uint256).max) {\n            amount = type(uint96).max;\n        } else {\n            amount = safe96(rawAmount, \"FESW::permit: amount exceeds 96 bits\");\n        }\n\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"FESW::permit: invalid signature\");\n        require(signatory == owner, \"FESW::permit: unauthorized\");\n        require(block.timestamp <= deadline, \"FESW::permit: signature expired\");\n\n        allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @notice Get the number of tokens held by the `account`\n     * @param account The address of the account to get the balance of\n     * @return The number of tokens held\n     */\n    function balanceOf(address account) external view returns (uint) {\n        return balances[account];\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint rawAmount) external returns (bool) {\n        uint96 amount = safe96(rawAmount, \"FESW::transfer: amount exceeds 96 bits\");\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\n        address spender = msg.sender;\n        uint96 spenderAllowance = allowances[src][spender];\n        uint96 amount = safe96(rawAmount, \"FESW::approve: amount exceeds 96 bits\");\n\n        if (spender != src && spenderAllowance != type(uint96).max) {\n            uint96 newAllowance = sub96(spenderAllowance, amount, \"FESW::transferFrom: transfer amount exceeds spender allowance\");\n            allowances[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n        \n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) public {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"FESW::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"FESW::delegateBySig: invalid nonce\");\n        require(block.timestamp <= expiry, \"FESW::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint96) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\n        require(blockNumber < block.number, \"FESW::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint96 delegatorBalance = balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _transferTokens(address src, address dst, uint96 amount) internal {\n        require(src != address(0), \"FESW::_transferTokens: cannot transfer from the zero address\");\n        require(dst != address(0), \"FESW::_transferTokens: cannot transfer to the zero address\");\n\n        balances[src] = sub96(balances[src], amount, \"FESW::_transferTokens: transfer amount exceeds balance\");\n        balances[dst] = add96(balances[dst], amount, \"FESW::_transferTokens: transfer amount overflows\");\n        emit Transfer(src, dst, amount);\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"FESW::_moveVotes: vote amount underflows\");\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint96 dstRepNew = add96(dstRepOld, amount, \"FESW::_moveVotes: vote amount overflows\");\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n      uint32 blockNumber = safe32(block.number, \"FESW::_writeCheckpoint: block number exceeds 32 bits\");\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n      } else {\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n      }\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\n        require(n < 2**96, errorMessage);\n        return uint96(n);\n    }\n\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        uint96 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function getChainId() internal view returns (uint) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}"
    },
    "contracts/Dex/Governance/patch/FeswPatchCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to the patch \n *      using the EVM instruction `delegatecall`. The success and return data of the delegated call \n *      will be returned back to the caller of the proxy.\n */\nabstract contract FeswPatchCaller {\n    // DELEGATE_TARGET = uint160(                      // downcast to match the address type.\n    //                      uint256(                    // convert to uint to truncate upper digits.\n    //                          keccak256(                // compute the CREATE2 hash using 4 inputs.\n    //                              abi.encodePacked(       // pack all inputs to the hash together.\n    //                                  hex\"ff\",              // start with 0xff to distinguish from RLP.\n    //                                  address(this),        // this contract will be the caller.\n    //                                  salt,                 // pass in the supplied salt value.\n    //                                  _metamorphicContractInitializationCodeHash // the init code hash.\n    //                              )\n    //                          )\n    //                      )\n    //                   )\n    //\n    // salt = keccak256(\"Feswap Governance Token Patch\") = 0xF21202953A55B2BEB9F87D04AFD3BB440DD78FE6B9FCFDC24C32DA060E867658\n    // metamorphicContractInitializationCode = 0x60006020816004601c335a63aaf10f428752fa60185780fd5b808151803b80938091923cf3\n    // _metamorphicContractInitializationCodeHash = keccak256(metamorphicContractInitializationCode)\n    //                                            = 0x15bfb1132dc67a984de77a9eef294f7e58964d02c62a359fd6f3c0c1d443e35c \n    // address(this): 0x84e924C5E04438D2c1Df1A981f7E7104952e6de1 (Test) \n    // address(this): 0x6A8FE4753AB456e85E1379432d92ABF1fB49B5Df (Rinkeby/BSC/Polygon/Harmoney/Arbitrum/Fantom/Avalance/Heco Testnet) \n    // address(this): 0x8565570A7cB2b2508F9180AD83e8f58F25e41596 (Goerli) \n    // address(this): 0x0528D7de63aafdF748a5ef530949C80c4e8fbeC7 (Polygon Mainnet) \n   \n//  address public constant DELEGATE_TARGET = 0x9b41DB1803B5b4298fc765f189aF63fcc54291D0;   // (Goerli)\n//  address public constant DELEGATE_TARGET = 0x04CE51B2eBc3773B84A2a024A19BaC6b8431235d;   // (Test)\n//  address public constant DELEGATE_TARGET = 0xD3dB4B2D84AF70ad6fDde50d254d8b0eD4D83eA9;   // (BSC/MATIC Testnet)\n    address public constant DELEGATE_TARGET = 0x22F44d1B52088f060Cd3BF4B2171a2100C432D55;   // (Polygon Mainnet)\n\n    /**\n     * @dev Delegates the current call to `DELEGATE_TARGET`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n\n    receive() external virtual payable {\n        revert(\"Refused!\");\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n       // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), DELEGATE_TARGET, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/ArkreenRECIssuance.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\n\r\nimport \"./interfaces/IMinerRegister.sol\";\r\nimport \"./interfaces/IArkreenRegistry.sol\";\r\nimport \"./interfaces/IArkreenMiner.sol\";\r\nimport \"./interfaces/IArkreenBadge.sol\";\r\n\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./interfaces/IERC20Permit.sol\";\r\nimport \"./ArkreenRECIssuanceStorage.sol\";\r\nimport \"./interfaces/IPausable.sol\";\r\n\r\nimport '@openzeppelin/contracts/utils/StorageSlot.sol';\r\n\r\n// Import this file to use console.log\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract ArkreenRECIssuance is\r\n    OwnableUpgradeable,\r\n    UUPSUpgradeable,\r\n    ERC721EnumerableUpgradeable,\r\n    ArkreenRECIssuanceStorage\r\n{\r\n    // using SafeMath for uint256;    // seems not necessary\r\n    using AddressUpgradeable for address;\r\n\r\n    // Public variables\r\n    string public constant NAME = 'Arkreen RE Certificate';\r\n    string public constant SYMBOL = 'AREC';\r\n\r\n    // Events\r\n    event RECRequested(address owner, uint256 tokenId);\r\n    event RECRejected(uint256 tokenId);\r\n    event RECDataUpdated(address owner, uint256 tokenId);\r\n    event RECCertified(address issuer, uint256 tokenId);\r\n    event RECCanceled(address owner, uint256 tokenId);    \r\n    event RECLiquidized(address owner, uint256 tokenId, uint256 amountREC);\r\n    event RedeemFinished(address redeemEntity, uint256 tokenId, uint256 offsetActionId);\r\n\r\n    // Modifiers\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'RECIssuance: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!IPausable(arkreenRegistry).paused(), 'AREC: Paused');\r\n        _;\r\n    }    \r\n  \r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address _tokenAKRE, address arkRegistry) external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __UUPSUpgradeable_init();\r\n        __ERC721_init_unchained(NAME, SYMBOL);\r\n        tokenAKRE = _tokenAKRE;\r\n        arkreenRegistry = arkRegistry;\r\n        baseURI = 'https://www.arkreen.com/AREC/' ;\r\n    }\r\n\r\n    function postUpdate() external onlyProxy onlyOwner \r\n    {}\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\r\n    {}    \r\n\r\n    receive() external payable {\r\n        revert(\"Wrong calling\"); // only accept WMATIC via fallback from the WMATIC contract\r\n    }  \r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    \r\n    fallback () external payable virtual {\r\n       // solhint-disable-next-line no-inline-assembly\r\n        address addrESG = getESGExtAddress();\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), addrESG, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }    \r\n\r\n    /**\r\n     * @dev To mint the REC NFT. After minted, the NFT is in pending status.\r\n     * It needs to certified by the issuer before it can be transferred/retired/liquidized.\r\n     * recRequest The request info to mint the REC NFT\r\n     * permitToPay Payment info to mint the REC NFT\r\n     */\r\n  \r\n    function mintRECRequest(\r\n        RECRequest calldata recRequest,\r\n        Signature calldata permitToPay\r\n    ) external ensure(permitToPay.deadline) whenNotPaused returns (uint256 tokenId) {\r\n\r\n        // Check issuer address\r\n        require(IArkreenRegistry(arkreenRegistry).isRECIssuer(recRequest.issuer), 'AREC: Wrong Issuer');\r\n\r\n        // Check REC time period\r\n        require(recRequest.startTime < recRequest.endTime && recRequest.endTime < block.timestamp, 'AREC: Wrong Period');\r\n\r\n        // Check the caller be acceptable miner\r\n        address sender = _msgSender();\r\n        address arkreenMiner = IArkreenRegistry(arkreenRegistry).getArkreenMiner();     /// for testing ///\r\n\r\n        // require(arkreenMiner.isContract(), \"AREC: Wrong Miner Contract\");            // no need to check\r\n        require(IArkreenMiner(arkreenMiner).isOwner(sender), \"AREC: Not Miner\");        /// May Removed for testing ///\r\n\r\n        // Check payment appoval\r\n        uint256 rateToIssue = paymentTokenPrice[permitToPay.token];\r\n        require( (permitToPay.token == tokenAKRE) || (rateToIssue != 0), \"AREC: Wrong Payment Token\");\r\n\r\n        uint256 valuePayment = recRequest.amountREC * rateToIssue;   // Rate is caluated based 10**9\r\n        require( permitToPay.value >= valuePayment, \"AREC: Low Payment Value\");\r\n\r\n        IERC20Permit(permitToPay.token).permit(sender, address(this), \r\n                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\r\n\r\n        tokenId = totalSupply() + 1;        \r\n        _safeMint(sender, tokenId);\r\n\r\n        // Prepare REC data\r\n        RECData memory recData;\r\n        recData.issuer =  recRequest.issuer;\r\n        recData.serialNumber = '';\r\n        recData.minter = sender;\r\n        recData.startTime =  recRequest.startTime;\r\n        recData.endTime =  recRequest.endTime;\r\n        recData.amountREC =  recRequest.amountREC;\r\n        recData.status = uint8(RECStatus.Pending);        \r\n        recData.cID =  recRequest.cID;\r\n        recData.region =  recRequest.region;        \r\n        recData.url =  recRequest.url;\r\n        recData.memo =  recRequest.memo;\r\n\r\n        allRECData[tokenId] = recData;\r\n\r\n        PayInfo memory payInfo = PayInfo({token: permitToPay.token, value: valuePayment});\r\n        allPayInfo[tokenId] = payInfo;\r\n\r\n        emit RECRequested(sender, tokenId);\r\n\r\n        // Transfer the REC mint fee\r\n        TransferHelper.safeTransferFrom(permitToPay.token, _msgSender(), address(this), valuePayment);\r\n    }\r\n\r\n    /**\r\n     * @dev To reject the REC NFT mint request by the issuer for any reason.\r\n     * Only can be called while the NFT is in pending state.\r\n     * tokenId The ID of the REC NFT\r\n     */\r\n    function rejectRECRequest(uint256 tokenId) external whenNotPaused\r\n    {\r\n        // Check that the call is the issuer of the token\r\n        address issuer = _msgSender();\r\n        RECData storage recData = allRECData[tokenId];\r\n\r\n        uint16 idAssetType = recData.idAsset;\r\n        if(idAssetType == 0) {\r\n            require(IArkreenRegistry(arkreenRegistry).isRECIssuer(issuer), 'AREC: Not Issuer');\r\n            require(issuer == recData.issuer, 'AREC: Wrong Issuer');\r\n        } else {\r\n            (address issuerAsset, , , , ) = IArkreenRegistry(arkreenRegistry).getAssetInfo(idAssetType);\r\n            require(issuer == issuerAsset, 'AREC: Wrong Issuer');\r\n        }\r\n\r\n        // Only pending REC can be cancelled\r\n        require(recData.status == uint8(RECStatus.Pending), 'AREC: Wrong Status');  \r\n\r\n        // Set status to Rejected\r\n        recData.status = uint8(RECStatus.Rejected);\r\n        emit RECRejected(tokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev To update the REC NFT mint info while it is rejected by the the issuer.\r\n     * tokenId The ID of the REC NFT to update\r\n     */\r\n    function updateRECData(\r\n        uint256         tokenID,\r\n        address         issuer,\r\n        string memory   region,\r\n        string memory   url,\r\n        string memory   memo) external whenNotPaused\r\n    {\r\n        // Only REC owner allowed to change the REC data\r\n        require(ownerOf(tokenID) == _msgSender(), 'AREC: Not Owner');     // owner should be the minter also\r\n\r\n        // Only rejected REC can be cancelled\r\n        RECData storage recData = allRECData[tokenID];\r\n        require(recData.status == uint8(RECStatus.Rejected), 'AREC: Wrong Status');  \r\n\r\n        // Check issuer address\r\n        require(IArkreenRegistry(arkreenRegistry).isRECIssuer(issuer), 'AREC: Wrong Issuer');\r\n\r\n        recData.issuer = issuer;                              \r\n        recData.region = region;                    // Null string is not checked, as it could be set to null\r\n        recData.url = url;\r\n        recData.memo = memo;\r\n\r\n        recData.status =  uint8(RECStatus.Pending);\r\n        emit RECDataUpdated(_msgSender(), tokenID);\r\n    }\r\n\r\n    /**\r\n     * @dev To certify the REC NFT mint request by the REC issuer.\r\n     * tokenId The ID of the REC NFT to certify.\r\n     * serialNumber The SN of REC NFT certificaton.\r\n     */\r\n    function certifyRECRequest(uint256 tokenID, string memory serialNumber) external whenNotPaused\r\n    {\r\n        // Check the issuer\r\n        address issuer = _msgSender();\r\n        RECData storage recData = allRECData[tokenID];\r\n\r\n        uint16 idAssetType = recData.idAsset;\r\n        if(idAssetType == 0) {\r\n            require(IArkreenRegistry(arkreenRegistry).isRECIssuer(issuer), 'AREC: Not Issuer');\r\n            require(issuer == recData.issuer, 'AREC: Wrong Issuer');\r\n        } else {\r\n            (address issuerAsset, , , , ) = IArkreenRegistry(arkreenRegistry).getAssetInfo(idAssetType);\r\n            require(issuer == issuerAsset, 'AREC: Wrong Issuer');\r\n        }\r\n\r\n        // Only pending REC can be Certified\r\n        require(recData.status == uint8(RECStatus.Pending), 'AREC: Wrong Status');  \r\n        require(bytes(recData.cID).length > 20, 'AREC: Wrong CID');  \r\n\r\n        // Uniqueness is not checked here assuming the issuer has checked this point\r\n        recData.serialNumber = serialNumber;            \r\n        recData.status = uint8(RECStatus.Certified);\r\n\r\n        address paymentToken = allPayInfo[tokenID].token;\r\n        uint256 paymentValue = allPayInfo[tokenID].value;\r\n\r\n        uint256 amountREC = recData.amountREC;\r\n        allRECByIssuer[issuer] += amountREC;                        // REC amount by the issuer\r\n        allRECIssued += amountREC;                                  // All REC amount\r\n\r\n        // Update the issuer total payment value\r\n        paymentByIssuer[issuer][paymentToken] += paymentValue;\r\n\r\n        // delete the payment info to save storage\r\n        delete allPayInfo[tokenID];\r\n\r\n        emit RECCertified(issuer, tokenID);\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem the REC NFT by retiring the NFT and registering an offset action\r\n     */\r\n    function redeem(uint256 tokenId) public virtual whenNotPaused returns (uint256 offsetActionId) {\r\n        offsetActionId = _redeem(_msgSender(), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev The third party triggers the RE redeem in the approval of the owner\r\n     */\r\n    function redeemFrom(address account, uint256 tokenId)\r\n        external virtual whenNotPaused returns (uint256 offsetActionId) \r\n    {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'AREC: Not Approved');\r\n        offsetActionId = _redeem(account, tokenId);\r\n    }\r\n   \r\n    /**\r\n     * @dev The internal function to offset the REC NFT.\r\n     */\r\n    function _redeem(address owner, uint256 tokenId) internal virtual returns (uint256 offsetActionId) {\r\n\r\n        // Check if the REC owner\r\n        require( ownerOf(tokenId) == owner, 'AREC: Not Owner');\r\n\r\n        // Check if the REC NFT is in certified stataus\r\n        require( allRECData[tokenId].status == uint8(RECStatus.Certified), 'AREC: Not Certified');\r\n\r\n        // Register the offset event\r\n        address badgeContract = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\r\n        address issuerREC = allRECData[tokenId].issuer;\r\n        uint256 amount = allRECData[tokenId].amountREC;\r\n        offsetActionId = IArkreenBadge(badgeContract).registerOffset(owner, issuerREC, amount, tokenId);\r\n\r\n        // Send the REC NFT to the retirement contract and set the REC NFT status to be Retired\r\n        _safeTransfer(owner, badgeContract, tokenId, \"Redeem\");\r\n        allRECData[tokenId].status = uint8(RECStatus.Retired);\r\n        allRECRedeemed += amount;\r\n\r\n        emit RedeemFinished(owner, tokenId, offsetActionId);\r\n    }\r\n\r\n   /**\r\n     * @dev Redeem the REC NFT and mint an offset certificate.\r\n     * @param tokenId Id of the REC NFT to redeem.\r\n     * @param beneficiary Beneficiary address for whom the REC was offset.\r\n     * @param offsetEntityID ID string of the offset entity.\r\n     * @param beneficiaryID ID string of the beneficiary.\r\n     * @param offsetMessage Message to illustrate the offset intention.\r\n     */\r\n    function redeemAndMintCertificate(\r\n        uint256         tokenId, \r\n        address         beneficiary,\r\n        string calldata offsetEntityID,\r\n        string calldata beneficiaryID,\r\n        string calldata offsetMessage\r\n    ) external whenNotPaused virtual {\r\n\r\n        // Check if approved\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'AREC: Not Approved');\r\n\r\n        // Redeem the specified REC NFT\r\n        address owner = ownerOf(tokenId);\r\n        uint256 offsetActionId = _redeem(owner, tokenId);\r\n\r\n        uint256[] memory offsetActionIds = new uint256[](1);\r\n        offsetActionIds[0] = offsetActionId;\r\n\r\n        // Issue the offset certificate NFT\r\n        address badgeContract = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\r\n        IArkreenBadge(badgeContract)\r\n                .mintCertificate(owner, beneficiary, offsetEntityID, beneficiaryID, offsetMessage, offsetActionIds);\r\n   \r\n    }   \r\n\r\n   /**\r\n     * @dev liquidize the REC NFT and mint the corresponding ERC20 token\r\n     * @param tokenId Id of the REC NFT to liquidize\r\n     */\r\n    function liquidizeREC( uint256 tokenId ) external whenNotPaused {\r\n\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'AREC: Not Approved');\r\n\r\n        // Check if the REC status\r\n        RECData storage recData = allRECData[tokenId];\r\n        require( recData.status == uint8(RECStatus.Certified), 'AREC: Not Certified');\r\n\r\n        uint256 amountREC = recData.amountREC;\r\n\r\n        address tokenREC;\r\n        uint256 idAsset = recData.idAsset;\r\n\r\n        if(idAsset == 0) {\r\n            address issuerREC = recData.issuer;\r\n            tokenREC = IArkreenRegistry(arkreenRegistry).getRECToken(issuerREC, idAsset);\r\n        } else {\r\n            (, tokenREC, , , ) = IArkreenRegistry(arkreenRegistry).getAssetInfo(idAsset);\r\n        }\r\n\r\n        // Transfer the REC NFT to the ERC20 token contract to be liquidized\r\n        address owner = ownerOf(tokenId);        \r\n        _safeTransfer(owner, tokenREC, tokenId, \"\");\r\n\r\n        // Set the AREC status to be Liquidized\r\n        recData.status = uint8(RECStatus.Liquidized);\r\n\r\n        // Accumulate the Liquidized REC amount\r\n        allRECLiquidized += amountREC;\r\n        emit RECLiquidized(owner, tokenId, amountREC);\r\n    }\r\n\r\n    /// @dev retrieve all AREC data\r\n    function getRECData(uint256 tokenId) external view virtual returns (RECData memory) {\r\n        return (allRECData[tokenId]);\r\n    }\r\n\r\n    /// @dev retrieve all AREC data\r\n    function getRECDataCore(uint256 tokenId) external view virtual returns (\r\n                                address issuer, uint128 amountREC, uint8 status, uint16 idAsset) {\r\n        RECData storage recData = allRECData[tokenId];                          \r\n        return (recData.issuer, recData.amountREC, recData.status, recData.idAsset);\r\n    }\r\n\r\n    /**\r\n     * @dev Add/update/remove AREC isssaunce payment token/price. \r\n     * If the token existed, and if price is not zero, update the price, \r\n     *                           if the price is zero, remove the token/price.\r\n     * If the token not existed, add the price\r\n     * @param token address of the token to add/update/remove\r\n     * @param price the price to pay AREC issuance, or, =0, remove the token/price.\r\n     */\r\n    function updateARECMintPrice(address token, uint256 price) external virtual onlyOwner {\r\n      require(token.isContract(), 'AREC: Wrong token');\r\n\r\n      for(uint256 index; index < paymentTokens.length; index++) {\r\n        if(paymentTokens[index] == token) {\r\n          if(price == 0) {\r\n            // Zero price means remove the token/price\r\n            if(index != (paymentTokens.length-1)) {\r\n              // replace by the last token/price\r\n              paymentTokens[index] = paymentTokens[paymentTokens.length-1];     \r\n            }\r\n            paymentTokens.pop();                  // pop the last price as it is moved to the deleted position  \r\n            delete paymentTokenPrice[token];\r\n          } else {\r\n            paymentTokenPrice[token] = price;         // update the price\r\n          } \r\n          return; \r\n        }\r\n      }\r\n      require(price != 0, 'AREC: Zero Price');\r\n      paymentTokens.push(token);\r\n      paymentTokenPrice[token] = price;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all the REC certification fee\r\n     * @param token address of the token to withdraw, USDC/ARKE\r\n     */\r\n    function withdraw(address token, address receiver) public whenNotPaused onlyOwner {\r\n        if(receiver == address(0)) {\r\n            receiver = _msgSender();\r\n        }\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        TransferHelper.safeTransfer(token, receiver, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override (ERC721EnumerableUpgradeable) {\r\n\r\n        // Only certified REC can be transferred\r\n        if(from != address(0)) {\r\n            RECData storage recData = allRECData[tokenId];\r\n            if(recData.status == uint8(RECStatus.Liquidized)) {\r\n                address issuerREC = recData.issuer;\r\n                address tokenREC = IArkreenRegistry(arkreenRegistry).getRECToken(issuerREC, recData.idAsset);\r\n                address arkreenBadge = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\r\n\r\n                // Only the ART contract can restore the AREC\r\n                require(msg.sender == tokenREC, 'AREC: Not Allowed');\r\n\r\n                if(to == arkreenBadge) {\r\n                    recData.status = uint8(RECStatus.Retired);\r\n                } else {\r\n                    uint256 amountREC = recData.amountREC;\r\n                    \r\n                    // Modified the Liquidized REC amount\r\n                    allRECLiquidized -= amountREC;\r\n\r\n                    // Set the AREC status to be Liquidized\r\n                    recData.status = uint8(RECStatus.Certified);\r\n                }\r\n            }\r\n            else {\r\n                require(recData.status == uint8(RECStatus.Certified), 'AREC: Wrong Status');\r\n            }\r\n        }\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }  \r\n  \r\n    function setTokenAKRE(address _tokenAKRE) external virtual onlyOwner {\r\n        require(_tokenAKRE != address(0), \"Zero Address\");\r\n        tokenAKRE = _tokenAKRE;\r\n    }\r\n\r\n    function setESGExtAddress(address addrESGExt) external virtual onlyOwner {\r\n        StorageSlot.getAddressSlot(_ESG_EXT_SLOT).value = addrESGExt; \r\n    }\r\n\r\n    function getESGExtAddress() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_ESG_EXT_SLOT).value;\r\n    }    \r\n\r\n    function setBaseURI(string memory newBaseURI) external virtual onlyOwner {\r\n        baseURI = newBaseURI;\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the URI for the given token.  \r\n     */    \r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory url = allRECData[tokenId].url;\r\n        string memory base = baseURI;\r\n\r\n        // If there is no base URI, return url\r\n        if (bytes(base).length == 0) {\r\n            return url;\r\n        }\r\n        // If both are set, concatenate them\r\n        if (bytes(url).length > 0) {\r\n            return string(abi.encodePacked(base, url));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }  \r\n}"
    },
    "contracts/interfaces/IArkreenMiner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IArkreenMiner {\n    function getArkreenMinerContact() external view returns (address);\n    function isOwner(address owner) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IArkreenBadge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IArkreenBadge {\n    function registerOffset(address, address, uint256, uint256) external returns (uint256);\n    function mintCertificate(address, address, string calldata, string calldata,\n                              string calldata, uint256[] calldata) external;\n    function getDetailStatus(address) external view returns (uint256, uint256);\n    function registerDetail(uint256 amount, uint256 tokenId, bool bNew) external returns (uint256, uint256);    \n}"
    },
    "contracts/ArkreenRECIssuanceStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./ArkreenRECIssuanceType.sol\";  \n\ncontract ArkreenRECIssuanceStorage {\n    address public tokenAKRE;                           // token adddress of AKRE\n    address public arkreenRegistry;                     // contracts storing all miner's ownership    \n    string  public baseURI;\n\n    mapping(uint256 => RECData) internal allRECData;    // save size\n    mapping(uint256 => PayInfo) public allPayInfo;      \n\n    uint256 public allRECIssued;                        // total AREC amount issued by minting AREC NFT\n    uint256 public allRECRedeemed;                      // total AREC amount redeemed by retiring AREC NFT\n    uint256 public allRECLiquidized;                    // total AREC amount Liquidized by Liquidizing to AREC ERC20 token\n\n    // The REC amount issued by specific issuer\n    mapping(address => uint256) public allRECByIssuer;\n\n    // The total payment paid to specific issuer with specific payment token\n    mapping(address => mapping(address => uint256)) public paymentByIssuer;\n\n    // All payment tokens acceptable and their price\n    // AREC mint/issance price, payment token amount per AREC (Decimal = 9)\n    // Ex: 1AREC -> 0.2USDT,  ARECMintPrice = 0.2 * 10**6    \n    mapping(address => uint256) public paymentTokenPrice;\n    address[] public paymentTokens;\n\n    mapping(address => bool) public AllMVPEntity;\n\n    // keccak256(\"RECIssuance(address owner,uint256 startTime,uint256 endTime,\n    //                        uint256 amountREC,uint256 merkelRoot,string url,\n    //                        uint256 nonce,uint256 feeREC,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0xEB053433B86341259C91DE8E051FF855E4AEF3CABE1825EE9F5D9A80315FB700; \n\n    // This is the keccak-256 hash of \"AREC.proxy.ESG\" subtracted by 1\n    bytes32 internal constant _ESG_EXT_SLOT = 0x6C14EAC8C066761328A8B25C5852066ED51A1332CB48C81DA799E3C09C620C9D;\n}"
    },
    "contracts/ArkreenRECToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\n//import '@openzeppelin/contracts/access/AccessControl.sol';\r\n\r\nimport \"./ArkreenRECIssuanceType.sol\";\r\nimport \"./interfaces/IArkreenRECIssuance.sol\";\r\nimport \"./interfaces/IArkreenRegistry.sol\";\r\nimport \"./interfaces/IArkreenBadge.sol\";\r\nimport \"./interfaces/IPausable.sol\";\r\n\r\n// Import this file to use console.log\r\n//import \"hardhat/console.sol\";\r\n\r\ncontract ArkreenRECToken is\r\n    OwnableUpgradeable,\r\n    UUPSUpgradeable,\r\n    ERC20Upgradeable,\r\n    IERC721Receiver\r\n{\r\n    // using SafeMath for uint256;    // seems not necessary\r\n    using AddressUpgradeable for address;\r\n\r\n    // Public constant variables\r\n    string public constant NAME = 'Arkreen REC Token';\r\n    string public constant SYMBOL = 'ART';\r\n\r\n    uint256 public constant MAX_SKIP = 20;\r\n    uint256 public constant FLAG_OFFSET = 1<<64;\r\n\r\n    // Public variables\r\n    address public arkreenRegistry;           // Registry contract storing Arkreen contracts   \r\n    address public issuerREC;                 // Address of issuer of the original REC pre-liquidized    \r\n    uint256 public totalLiquidized;           // Total amount of REC that is liquidized\r\n    uint256 public totalOffset;               // Total amount of REC that is offset \r\n\r\n    address public receiverFee;                // Receiver address to receive the liquidization fee\r\n    uint256 public ratioLiquidizedFee;         // Percentage in basis point (10000) of the liquidization fee\r\n\r\n    mapping(uint256 => uint256) public allARECLiquidized;   // Loop of all AREC ID: 1st-> 2nd-> ..-> last-> 1st\r\n    uint256 public latestARECID;                            // NFT ID of the latest AREC added to the loop \r\n    uint256 public ratioFeeToSolidify;                      // Percentage in basis point (10000) to charge for solidifying ART to AREC NFT\r\n\r\n//    uint256 partialARECID;                                // AREC NFT ID partialy offset\r\n//    uint256 partialAvailableAmount;                       // Amount available for partial offset\r\n    uint256 public triggerUpgradeAmount;                    // The amount to trigger solidify upgrade\r\n    address public climateBuilder;\r\n\r\n    // Events\r\n    event OffsetFinished(address indexed offsetEntity, uint256 amount, uint256 offsetId);\r\n    event Solidify(address indexed account, uint256 amount, uint256 numberAREC, uint256 feeSolidify);    \r\n\r\n    // Modifiers\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'ART: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!IPausable(arkreenRegistry).paused(), 'ART: Paused');\r\n        _;\r\n    }\r\n  \r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address arkRegistry, address issuer, string calldata name, string calldata symbol) external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __UUPSUpgradeable_init();        \r\n        if(bytes(symbol).length == 0) {\r\n          __ERC20_init_unchained(NAME, SYMBOL);\r\n        } else {\r\n          __ERC20_init_unchained(name, symbol);          \r\n        }\r\n        arkreenRegistry = arkRegistry;\r\n        issuerREC = issuer;\r\n    }\r\n\r\n    function postUpdate() external onlyProxy onlyOwner \r\n    {}\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\r\n    {}    \r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    /**\r\n     * @dev Offset the RE token by burning the tokens\r\n     */\r\n    function commitOffset(uint256 amount) public virtual whenNotPaused returns (uint256 offsetActionId) {\r\n        offsetActionId = _offset(msg.sender, _msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Third party contract triggers the RE offset in the approval of the owner\r\n     */\r\n    function commitOffsetFrom(address account, uint256 amount)\r\n        external virtual whenNotPaused returns (uint256 offsetActionId) \r\n    {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        offsetActionId = _offset(account, account, amount);\r\n    }\r\n   \r\n    /**\r\n     * @dev Internal offset function of the RE token, the RE tokens are burned\r\n     */\r\n    function _offset(address account, address owner, uint256 amount) internal virtual returns (uint256 offsetActionId) {\r\n\r\n        if(totalOffset < triggerUpgradeAmount) {                                // To check whether triggering upgrade\r\n            uint256 offsetAmount = triggerUpgradeAmount - totalOffset;\r\n            offsetAmount = (offsetAmount > amount) ? amount: offsetAmount;\r\n            amount -= offsetAmount;\r\n            _burn(account, offsetAmount);\r\n\r\n            // Track total retirement amount in TCO2 factory\r\n            address badgeContractU = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\r\n            offsetActionId = IArkreenBadge(badgeContractU).registerOffset(owner, issuerREC, offsetAmount, 0);\r\n            totalOffset += offsetAmount;\r\n\r\n            emit OffsetFinished(owner, offsetAmount, offsetActionId);\r\n            if(amount == 0) {\r\n                return offsetActionId;\r\n            }\r\n        }\r\n\r\n        require(amount != 0, 'ART: Zero Offset');\r\n\r\n        address issuanceAREC = IArkreenRegistry(arkreenRegistry).getRECIssuance();\r\n        address badgeContract = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\r\n\r\n        // Track total retirement amount in TCO2 factory\r\n        uint256 steps = 0;\r\n        uint256 curAREC; \r\n        uint256 amountFilled = 0; \r\n        uint256 amountRegister;\r\n\r\n        uint256 partialAvailableAmount;\r\n        uint256 partialARECID;\r\n\r\n        uint256 amountOffset;\r\n        uint256 detailsCounter;\r\n\r\n        (partialAvailableAmount, partialARECID) = IArkreenBadge(badgeContract).getDetailStatus(address(this));\r\n\r\n        if(amount > partialAvailableAmount) {\r\n            while(steps < MAX_SKIP) {\r\n                if(partialAvailableAmount == 0) {\r\n                    curAREC = allARECLiquidized[latestARECID];        // Get the ID at AREC NFT loop head\r\n                    _remove(latestARECID, curAREC);                   // Remove from the loop\r\n                    IArkreenRECIssuance(issuanceAREC).safeTransferFrom(address(this), badgeContract, curAREC);  // Send to Badge contract\r\n\r\n                    (, uint128 amountREC, , ) = IArkreenRECIssuance(issuanceAREC).getRECDataCore(curAREC);\r\n                    partialAvailableAmount = amountREC;\r\n                    partialARECID = curAREC;\r\n                }\r\n\r\n                if(amount <= partialAvailableAmount) {\r\n                    if (steps==0) break;   \r\n                    amountRegister = amount;\r\n                } else {\r\n                    amountRegister = partialAvailableAmount;\r\n                }\r\n                \r\n                (detailsCounter, partialAvailableAmount) = \r\n                                IArkreenBadge(badgeContract).registerDetail(amountRegister, partialARECID, (steps==0));\r\n                steps++;\r\n                amountFilled += amountRegister;\r\n                amount -= amountRegister;\r\n\r\n                if(amount==0) break;\r\n            }\r\n        }\r\n\r\n        amountOffset = (steps==0) ? amount: amountFilled;\r\n        _burn(account, amountOffset);\r\n\r\n        offsetActionId = IArkreenBadge(badgeContract).registerOffset(owner, issuerREC, amountOffset, FLAG_OFFSET+detailsCounter);\r\n        totalOffset += amountOffset;\r\n\r\n        emit OffsetFinished(owner, amountOffset, offsetActionId);\r\n    }\r\n\r\n    /**\r\n     * @dev Offset the RE token and mint a certificate in the single transaction.\r\n     * @param beneficiary Beneficiary address for whom the RE was offset.\r\n     * @param offsetEntityID ID string of the offset entity.\r\n     * @param beneficiaryID ID string of the beneficiary.\r\n     * @param offsetMessage Message to illustrate the offset intention.\r\n     * @param amount Amount to offset and issue an NFT certificate for.\r\n     */\r\n    function offsetAndMintCertificate(\r\n        address         beneficiary,\r\n        string calldata offsetEntityID,\r\n        string calldata beneficiaryID,\r\n        string calldata offsetMessage,\r\n        uint256         amount\r\n    ) external virtual whenNotPaused {\r\n        \r\n        // Offset the specified amount\r\n        address owner = _msgSender();\r\n        uint256 offsetActionId = _offset(msg.sender, owner, amount);     // maybe called from climate operator, so use msg.sender\r\n        uint256[] memory offsetActionIds = new uint256[](1);\r\n        offsetActionIds[0] = offsetActionId;\r\n\r\n        // Issue the offset certificate NFT\r\n        address badgeContract = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\r\n        IArkreenBadge(badgeContract).mintCertificate(\r\n                        owner, beneficiary, offsetEntityID, beneficiaryID, offsetMessage, offsetActionIds);\r\n    }\r\n\r\n    /**\r\n     * @dev Solidify the ART token to AREC NFT.\r\n     * @param amount The amount requesting to solidify\r\n     */\r\n    function solidify(uint256 amount) external virtual whenNotPaused \r\n                returns (uint256 solidifiedAmount, uint256 numberAREC, uint256 feeSolidify) {\r\n\r\n        require(latestARECID != 0, 'ART: No Liquidized AREC');\r\n        bool chargeOn = (receiverFee != address(0)) && (ratioFeeToSolidify != 0);           // To save gas\r\n        if(chargeOn) amount = (amount * 10000) / (10000 + ratioFeeToSolidify);             // Substract the solidify fee \r\n        \r\n        address solidifier = _msgSender();\r\n        address issuanceAREC = IArkreenRegistry(arkreenRegistry).getRECIssuance();\r\n\r\n        uint256 skips = 0;\r\n        uint256 curAREC = allARECLiquidized[latestARECID];\r\n        uint256 preAREC = latestARECID;\r\n\r\n        while (skips <= MAX_SKIP) {\r\n            (, uint128 amountREC, , ) = IArkreenRECIssuance(issuanceAREC).getRECDataCore(curAREC);\r\n            uint256 amountAREC = amountREC;\r\n\r\n            if(amount < amountAREC) {\r\n                require(solidifiedAmount != 0, 'ART: Amount Too Less');                // Must solidify the oldest AREC first\r\n                if(curAREC == latestARECID) break;\r\n                skips++;\r\n                preAREC = curAREC;\r\n                curAREC = allARECLiquidized[curAREC];\r\n            } else {\r\n                IArkreenRECIssuance(issuanceAREC).safeTransferFrom(address(this), solidifier, curAREC);\r\n                amount -= amountAREC;\r\n                solidifiedAmount += amountAREC;\r\n                numberAREC++;\r\n                curAREC = _remove(preAREC, curAREC);\r\n                if(curAREC == 0) break;\r\n            }\r\n        }\r\n\r\n        _burn(solidifier, solidifiedAmount);                    // solidifiedAmount must be more than 0 here, burn once to save gas\r\n        totalLiquidized -= solidifiedAmount;                    // \r\n\r\n        if(chargeOn) {\r\n            feeSolidify = solidifiedAmount * ratioFeeToSolidify / 10000;\r\n            _transfer(solidifier, receiverFee, feeSolidify);\r\n        }\r\n\r\n        emit Solidify(solidifier, solidifiedAmount, numberAREC, feeSolidify);      \r\n    }\r\n\r\n    /**\r\n     * @dev Remove the AREC NFT specified by curAREC from the liquidized list.\r\n     * @param preAREC The AREC NFT just previous in the list\r\n     * @param curAREC The AREC NFT to remove\r\n     * @return nextAREC the next AREC NFT ID if curAREC is not the last in the list\r\n     *         otherwise, returns 0 while curAREC is the last in the list\r\n     */\r\n    function _remove(uint256 preAREC, uint256 curAREC) internal returns (uint256 nextAREC) {\r\n        nextAREC = allARECLiquidized[curAREC];\r\n        allARECLiquidized[preAREC] = nextAREC;\r\n\r\n        if(curAREC == latestARECID) {                                   // if remove last AREC\r\n            latestARECID = (preAREC == latestARECID) ? 0 : preAREC;     // if the last AREC is the only AREC\r\n            nextAREC = 0;\r\n        } \r\n        delete allARECLiquidized[curAREC];                      // delete the current AREC\r\n    }\r\n\r\n     /// @dev Receive hook to liquidize Arkreen RE Certificate into RE ERC20 Token\r\n    function onERC721Received(\r\n        address, /* operator */\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata /* data */\r\n    ) external virtual override whenNotPaused returns (bytes4) {\r\n\r\n        // Check calling from REC Manager\r\n        require( IArkreenRegistry(arkreenRegistry).getRECIssuance() == msg.sender, 'ART: Not From REC Issuance');\r\n\r\n        (, uint128 amountREC, uint8 status, ) = IArkreenRECIssuance(msg.sender).getRECDataCore(tokenId);\r\n        require(status == uint256(RECStatus.Certified), 'ART: Wrong Status');\r\n        \r\n        if(latestARECID == 0) {\r\n            allARECLiquidized[tokenId] = tokenId;                           // build the loop list\r\n            latestARECID = tokenId;\r\n        } else {\r\n            allARECLiquidized[tokenId] = allARECLiquidized[latestARECID];   // Point to loop head\r\n            allARECLiquidized[latestARECID] = tokenId;                      // Add to the loop\r\n            latestARECID = tokenId;                                         // refresh the newest AREC\r\n        }\r\n\r\n        totalLiquidized += amountREC;\r\n\r\n        // Prepare liquidization fee \r\n        uint256 fee = 0;\r\n        if(ratioLiquidizedFee != 0 && receiverFee != address(0)) {\r\n            fee = amountREC * ratioLiquidizedFee / 10000;\r\n            _mint(receiverFee, fee);\r\n        }\r\n\r\n        _mint(from, amountREC - fee);\r\n\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    /**\r\n     * @dev set the ratio of liquidization fee\r\n     */     \r\n    function getARECInfo(uint256 number) external view returns (uint256 numAREC, ARECAmount[] memory amountAREC) {\r\n        amountAREC = new ARECAmount[](number);\r\n        if(latestARECID == 0) return (numAREC, amountAREC);\r\n\r\n        address issuanceAREC = IArkreenRegistry(arkreenRegistry).getRECIssuance();\r\n        uint256 curAREC = allARECLiquidized[latestARECID];\r\n        for(uint256 index; index < number; index++) {\r\n            amountAREC[index].ARECID = curAREC;\r\n            (, uint128 amountREC, , ) = IArkreenRECIssuance(issuanceAREC).getRECDataCore(curAREC);\r\n            amountAREC[index].amountREC = amountREC;\r\n            numAREC ++;\r\n            if(curAREC == latestARECID) break;\r\n            curAREC = allARECLiquidized[curAREC];\r\n        }\r\n    }  \r\n\r\n    function _msgSender() internal override view returns (address signer) {\r\n        signer = msg.sender;\r\n        if (msg.data.length>=20 && (signer == climateBuilder)) {\r\n            assembly {\r\n                signer := shr(96,calldataload(sub(calldatasize(),20)))\r\n            }\r\n        }    \r\n    }\r\n\r\n    /**\r\n     * @dev set the ratio of liquidization fee\r\n     */     \r\n    function setRatioFee(uint256 ratio) external onlyOwner {\r\n        require(ratio <10000, 'ART: Wrong Data');\r\n        ratioLiquidizedFee = ratio;\r\n    }  \r\n\r\n    /**\r\n     * @dev Change the REC issuance address\r\n     */     \r\n    function setIssuerREC(address issuer) external onlyOwner {\r\n        require(issuer != address(0), 'ART: Wrong Address');\r\n        issuerREC = issuer;\r\n    }\r\n\r\n    /**\r\n     * @dev set the ratio of solidify fee to Solidify from ART to AREC\r\n     */     \r\n    function setRatioFeeToSolidify(uint256 ratio) external onlyOwner {\r\n        require(ratio <10000, 'ART: Wrong Data');\r\n        ratioFeeToSolidify = ratio;\r\n    }  \r\n\r\n    /**\r\n     * @dev set the receiver of liquidization fee\r\n     */     \r\n    function setReceiverFee(address receiver) external onlyOwner {\r\n        require(receiver != address(0), 'ART: Wrong Address');\r\n        receiverFee = receiver;\r\n    }\r\n\r\n    function setTriggerAmount(uint256 amount) external onlyOwner {\r\n        triggerUpgradeAmount = amount;\r\n    }\r\n\r\n    function setClimateBuilder(address builder) external onlyOwner {\r\n        climateBuilder = builder;\r\n    }\r\n}"
    },
    "contracts/ArkreenRECIssuanceExt.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\r\n\r\nimport \"./interfaces/IMinerRegister.sol\";\r\nimport \"./interfaces/IArkreenRegistry.sol\";\r\nimport \"./interfaces/IArkreenMiner.sol\";\r\nimport \"./interfaces/IArkreenBadge.sol\";\r\n\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./interfaces/IERC20Permit.sol\";\r\nimport \"./ArkreenRECIssuanceStorage.sol\";\r\nimport \"./interfaces/IPausable.sol\";\r\n\r\n// Import this file to use console.log\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract ArkreenRECIssuanceExt is\r\n    OwnableUpgradeable,\r\n    UUPSUpgradeable,\r\n    ERC721EnumerableUpgradeable,\r\n    ArkreenRECIssuanceStorage\r\n{\r\n    // using SafeMath for uint256;    // seems not necessary\r\n    using AddressUpgradeable for address;\r\n\r\n    // Public variables\r\n    string public constant NAME = 'Arkreen RE Certificate';\r\n    string public constant SYMBOL = 'AREC';\r\n\r\n    // Events\r\n    event RECRequested(address owner, uint256 tokenId);\r\n    event RECRejected(uint256 tokenId);\r\n    event RECDataUpdated(address owner, uint256 tokenId);\r\n    event RECCertified(address issuer, uint256 tokenId);\r\n    event RECCanceled(address owner, uint256 tokenId);    \r\n    event RECLiquidized(address owner, uint256 tokenId, uint256 amountREC);\r\n    event RedeemFinished(address redeemEntity, uint256 tokenId, uint256 offsetActionId);\r\n    event ESGBatchMinted(address owner, uint256 tokenId);\r\n    event ESGBatchDataUpdated(address owner, uint256 tokenId);\r\n\r\n    // Modifiers\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'RECIssuance: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!IPausable(arkreenRegistry).paused(), 'AREC: Paused');\r\n        _;\r\n    }    \r\n  \r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address _tokenAKRE, address arkRegistry) external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __UUPSUpgradeable_init();\r\n        __ERC721_init_unchained(NAME, SYMBOL);\r\n        tokenAKRE = _tokenAKRE;\r\n        arkreenRegistry = arkRegistry;\r\n        baseURI = 'https://www.arkreen.com/AREC/' ;\r\n    }\r\n\r\n    function postUpdate() external onlyProxy onlyOwner \r\n    {}\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\r\n    {}    \r\n\r\n    /**\r\n     * @dev To mint the empty AREC NFT as as ESG batch, which must be updated later to be successfully confirmed.\r\n     * @param idAssetType The type of the AREC asset to issue\r\n     * @param amountREC The amount if the AREC asset target to issue.\r\n     * permitToPay Payment info to mint the AREC NFT\r\n     */\r\n    function mintESGBatch(\r\n        uint256   idAssetType,\r\n        uint256   amountREC,\r\n        Signature calldata permitToPay\r\n    ) external ensure(permitToPay.deadline) whenNotPaused returns (uint256 tokenId) {\r\n\r\n        // Check the caller be the MVP enity\r\n        address sender = _msgSender();\r\n        require( AllMVPEntity[sender], \"AREC: Not Allowed\");\r\n\r\n        // Check and get asset information\r\n        (address issuer, , address tokenPay, uint128 rateToIssue, ) \r\n                                                = IArkreenRegistry(arkreenRegistry).getAssetInfo(idAssetType);\r\n\r\n        // Check payment appoval\r\n        require( permitToPay.token == tokenPay, \"AREC: Wrong Payment Token\");\r\n\r\n        uint256 valuePayment = amountREC * rateToIssue / ( 10**9);              // Rate is caluated based 10**9\r\n\r\n        if(permitToPay.value != 0) {\r\n          require( permitToPay.value >= valuePayment, \"AREC: Low Payment Value\");\r\n\r\n          IERC20Permit(permitToPay.token).permit(sender, address(this), \r\n                          permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\r\n        }\r\n\r\n        tokenId = totalSupply() + 1;\r\n        _safeMint(sender, tokenId);\r\n\r\n        // Prepare REC data\r\n        RECData memory recData;\r\n        recData.issuer =  issuer;\r\n        recData.minter = sender;\r\n        recData.amountREC =  uint128(amountREC);\r\n        recData.status = uint8(RECStatus.Pending);\r\n        recData.idAsset = uint16(idAssetType);\r\n\r\n        allRECData[tokenId] = recData;\r\n\r\n        PayInfo memory payInfo = PayInfo({token: permitToPay.token, value: valuePayment});\r\n        allPayInfo[tokenId] = payInfo;\r\n\r\n        emit ESGBatchMinted(sender, tokenId);\r\n\r\n        // Transfer the REC mint fee\r\n        TransferHelper.safeTransferFrom(permitToPay.token, _msgSender(), address(this), valuePayment);\r\n    }\r\n\r\n    /**\r\n     * @dev To update the REC NFT mint info while it is rejected by the the issuer.\r\n     * tokenId The ID of the REC NFT to update\r\n     */\r\n    function updateRECDataExt(\r\n        uint256         tokenID,\r\n        uint32          startTime,\r\n        uint32          endTime,\r\n        string calldata cID,\r\n        string calldata region,\r\n        string calldata url,\r\n        string calldata memo) external whenNotPaused\r\n    {\r\n        // Check the caller be the MVP enity\r\n        address sender = _msgSender();\r\n        require( AllMVPEntity[sender], \"AREC: Not Allowed\");\r\n\r\n        // Only ESG_AREC owner allowed to change the REC data\r\n        require(ownerOf(tokenID) == _msgSender(), 'AREC: Not Owner');     // owner should be the minter also\r\n\r\n        // Only Pending and Rejected ESG_AREC can be updated\r\n        RECData storage recData = allRECData[tokenID];\r\n        require(recData.status <= uint8(RECStatus.Rejected), 'AREC: Wrong Status');\r\n\r\n        if(startTime != 0) recData.startTime = startTime;\r\n        if(endTime != 0) recData.endTime = endTime;\r\n        if(bytes(cID).length != 0) recData.cID = cID;\r\n        if(bytes(region).length != 0) recData.region = region;\r\n        if(bytes(url).length != 0) recData.url = url;\r\n        if(bytes(memo).length != 0) recData.memo = memo;\r\n\r\n        recData.status =  uint8(RECStatus.Pending);\r\n        emit ESGBatchDataUpdated(_msgSender(), tokenID);\r\n    }\r\n\r\n    /**\r\n     * @dev To cancel the REC NFT mint request,only can be called the NFT owner.\r\n     * REC NFT mint fee is refund to the owner after the transaction.\r\n     * tokenId The ID of the REC NFT to update\r\n     */\r\n    function cancelRECRequest(uint256 tokenID) external whenNotPaused {\r\n\r\n        // Only REC owner allowed to cancel the request\r\n        require(ownerOf(tokenID) == _msgSender(), 'AREC: Not Owner');\r\n\r\n        // Only pending REC can be cancelled\r\n        require(allRECData[tokenID].status == uint8(RECStatus.Rejected), 'AREC: Wrong Status');  \r\n\r\n        allRECData[tokenID].status = uint8(RECStatus.Cancelled);\r\n\r\n        // Refund the request fee\r\n        TransferHelper.safeTransfer(allPayInfo[tokenID].token, _msgSender(), allPayInfo[tokenID].value);\r\n\r\n        // delete the payment info to save storage\r\n        delete allPayInfo[tokenID];\r\n        emit RECCanceled(_msgSender(), tokenID);\r\n    }\r\n\r\n    /// @dev return all the AREC issaunce token/price list\r\n    function allARECMintPrice() external view virtual returns (RECMintPrice[] memory) {\r\n        uint256 sizePrice = paymentTokens.length;\r\n        RECMintPrice[] memory ARECMintPrice = new RECMintPrice[](sizePrice);\r\n\r\n        for(uint256 index; index < sizePrice; index++) {\r\n          address token = paymentTokens[index];\r\n          ARECMintPrice[index].token = paymentTokens[index];\r\n          ARECMintPrice[index].value = paymentTokenPrice[token];\r\n        }\r\n        return ARECMintPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Add or remove the MVP addresses \r\n     * @param op The operation of MVP address, =true, add MVP; =false, remove MVP \r\n     * @param listMVP The list of the MVP addresses\r\n     */\r\n    function manageMVPAddress(bool op, address[] calldata listMVP) public whenNotPaused onlyOwner {\r\n        for(uint256 index; index < listMVP.length; index++) {\r\n            require( AllMVPEntity[listMVP[index]] != op, \"AREC: Wrong Status\" );\r\n            AllMVPEntity[listMVP[index]] = op;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override (ERC721EnumerableUpgradeable) {\r\n\r\n        // Only certified REC can be transferred\r\n        if(from != address(0)) {\r\n            RECData storage recData = allRECData[tokenId];\r\n            if(recData.status == uint8(RECStatus.Liquidized)) {\r\n                address issuerREC = recData.issuer;\r\n                address tokenREC = IArkreenRegistry(arkreenRegistry).getRECToken(issuerREC, recData.idAsset);\r\n                address arkreenBadge = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\r\n\r\n                // Only the ART contract can restore the AREC\r\n                require(msg.sender == tokenREC, 'AREC: Not Allowed');\r\n\r\n                if(to == arkreenBadge) {\r\n                    recData.status = uint8(RECStatus.Retired);\r\n                } else {\r\n                    uint256 amountREC = recData.amountREC;\r\n\r\n                    // Modified the Liquidized REC amount\r\n                    allRECLiquidized -= amountREC;\r\n\r\n                    // Set the AREC status to be Liquidized\r\n                    recData.status = uint8(RECStatus.Certified);\r\n                }\r\n            }\r\n            else {\r\n                require(recData.status == uint8(RECStatus.Certified), 'AREC: Wrong Status');\r\n            }\r\n        }\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n}"
    },
    "contracts/ArkreenMiner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IERC20Permit.sol\";\nimport \"./ArkreenMinerTypes.sol\";\n\ncontract ArkreenMiner is \n    OwnableUpgradeable,\n    UUPSUpgradeable,\n    ERC721EnumerableUpgradeable\n{\n    using AddressUpgradeable for address;\n\n    // Constants\n    string public constant NAME = 'Arkreen Miner';\n    string public constant SYMBOL = 'AKREM';\n\n    // keccak256(\"RemoteMinerOnboard(address owner,address miners,address token,uint256 price,uint256 deadline)\");\n    bytes32 public constant REMOTE_MINER_TYPEHASH = 0xE397EAA556C649D10F65393AC1D09D5AA50D72547C850822C207516865E89E32;  \n\n    // keccak256(\"RemoteMinerOnboardBatch(address owner,uint256 quantity,address token,uint256 value,uint256 deadline)\");\n    bytes32 public constant REMOTE_MINER_BATCH_TYPEHASH = 0x9E7E2F63BB8D2E99F3FA05B76080E528E9CA50746A4383CDF2803D633AFF18A6;  \n\n    // keccak256(\"StandardMinerOnboard(address owner,address miner,uint256 deadline)\");\n    bytes32 public constant STANDARD_MINER_TYPEHASH = 0x73F94559854A7E6267266A158D1576CBCAFFD8AE930E61FB632F9EC576D2BB37;  \n\n    uint256 public constant MAX_BATCH_SALE = 50;\n\n    // Public variables\n    bytes32 public DOMAIN_SEPARATOR;\n    uint256 public totalStandardMiner;                  // Total amount of standard miner\n    string public baseURI;\n    address public tokenAKRE;                           // Token adddress of AKRE\n    address public tokenNative;                         // The wrapped token of the Native token, such as WETH, WMATIC\n\n    // All registered miner manufactures\n    mapping(address => bool) public AllManufactures;\n\n    // All miner infos\n    mapping(uint256 => Miner) public AllMinerInfo;\n\n    // All managers with various privilege\n    mapping(uint256 => address) public AllManagers;\n\n    // Mapping from miner address to the respective token ID\n    mapping(address => uint256) public AllMinersToken;\n\n    // Miner white list mapping from miner address to miner type\n    mapping(address => uint8) public whiteListMiner;\n\n    uint256 public totalSocketMiner;                  // Total amount of socket miner\n\n    // Miner white list for sales in batch, mapping from index to miner address\n    mapping(uint256 => address) private whiteListMinerBatch;\n    uint256 private whiteListBatchIndexHead;\n    uint256 private whiteListBatchIndexTail;\n\n    // Events\n    event MinerOnboarded(address indexed owner, address indexed miner);\n    event MinerOnboardedBatch(address indexed owner, address[] minersBatch);\n    event StandardMinerOnboarded(address indexed owner, address indexed miner);\n    event RemoteMinersInBatch(address[] owners, address[] miners);\n    event SocketMinerOnboarded(address indexed owner, address indexed miner);\n    \n    modifier ensure(uint256 deadline) {\n        require(block.timestamp <= deadline, 'Arkreen Miner: EXPIRED');\n        _;\n    }\n\n    modifier onlyMinerManager() {\n        require(_msgSender() == AllManagers[uint256(MinerManagerType.Miner_Manager)], 'Arkreen Miner: Not Miner Manager');\n        _;\n    }    \n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _tokenAKRE, address _tokenNative, address _minerManager, address _minerAuthority)\n        external\n        virtual\n        initializer\n    {\n        __Ownable_init_unchained();\n        __UUPSUpgradeable_init();\n        __ERC721_init_unchained(NAME, SYMBOL);\n        tokenAKRE = _tokenAKRE;\n        tokenNative = _tokenNative;\n        AllManagers[uint256(MinerManagerType.Miner_Manager)] = _minerManager;\n        AllManagers[uint256(MinerManagerType.Register_Authority)] = _minerAuthority;\n        baseURI = 'https://www.arkreen.com/miners/';\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(\"Arkreen Miner\")),\n                keccak256(bytes('1')),\n                block.chainid,\n                address(this)\n            )\n        );  \n    }\n\n    function postUpdate() external onlyProxy onlyOwner \n    {}\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    /**\n     * @dev Onboarding a remote Miner paid with Native token (MATIC)\n     * @param owner address receiving the remote miner\n     * @param miner address of the remote miner onboarding\n     * @param permitMiner signature of the miner register authority to confirm the miner address and price.  \n     */\n    function RemoteMinerOnboardNative(\n        address     owner,\n        address     miner,\n        Signature   memory  permitMiner\n    ) external payable ensure(permitMiner.deadline) {\n\n        // Check payment value\n        require( (tokenNative != address(0)) && (tokenNative == permitMiner.token) && \n                  (msg.value == permitMiner.value), \"Arkreen Miner: Payment error\");\n\n        // Check for minting remote miner  \n        _mintRemoteMinerCheck(owner, miner, permitMiner);\n\n        // mint new remote miner\n        _mintRemoteMiner(owner, miner);\n        emit MinerOnboarded(owner, miner);\n    }    \n\n    /**\n     * @dev Onboarding remote miners in batch, orderly fetched from the batch whitelist, paid with Native token (MATIC)\n     * @param owner address receiving the remote miners\n     * @param numMiners number of remote miners desired to purchase\n     * @param permitMiner signature of the miner register authority to confirm the owner and sales price.  \n     */\n\n    function RemoteMinerOnboardNativeBatch(\n        address     owner,\n        uint8       numMiners,\n        Signature   memory  permitMiner\n    ) external payable ensure(permitMiner.deadline) {\n\n        require((numMiners != 0) && (numMiners <= numberOfWhiteListBatch()), \"Arkreen Miner: Wrong Miner Number\");\n\n        // Check payment value\n        require( (tokenNative != address(0)) && (tokenNative == permitMiner.token) && \n                  (msg.value == permitMiner.value), \"Arkreen Miner: Payment error\");\n\n        // Check for remote miner minting price  \n        _mintBatchCheckPrice(owner, numMiners, permitMiner);\n\n        // mint new remote miners in batch\n        address[] memory minersBatch = _mintRemoteMinerBatch(owner, numMiners);\n        emit MinerOnboardedBatch(owner, minersBatch);\n    }    \n\n    /**\n     * @dev Onboarding a remote miner while the payment has been approved\n     * @param owner address receiving the remote miner\n     * @param miner address of the remote miner onboarding\n     * @param permitMiner signature of miner register authority to confirm the miner address and price.  \n     */\n    function RemoteMinerOnboardApproved(\n        address     owner,\n        address     miner,\n        Signature   memory  permitMiner\n    ) external ensure(permitMiner.deadline) {\n\n        // Check for minting remote miner  \n        _mintRemoteMinerCheck(owner, miner, permitMiner);\n\n        // mint new remote miner\n        _mintRemoteMiner(owner, miner);\n\n        // Transfer onboarding fee\n        address sender = _msgSender();\n        TransferHelper.safeTransferFrom(permitMiner.token, sender, address(this), permitMiner.value);\n\n        emit MinerOnboarded(owner, miner);\n    }\n\n    /**\n     * @dev Onboarding a remote miner while the payment has been approved\n     * @param owner address receiving the remote miner\n     * @param numMiners number of remote miners desired to purchase\n     * @param permitMiner signature of miner register authority to confirm the miner address and price.  \n     */\n    function RemoteMinerOnboardApprovedBatch(\n        address     owner,\n        uint8       numMiners,\n        Signature   memory  permitMiner\n    ) external ensure(permitMiner.deadline) {\n\n        // Check for minting remote miner  \n        _mintBatchCheckPrice(owner, numMiners, permitMiner);\n\n        // mint new remote miner\n        address[] memory minersBatch = _mintRemoteMinerBatch(owner, numMiners);\n\n        // Transfer onboarding fee\n        address sender = _msgSender();\n        TransferHelper.safeTransferFrom(permitMiner.token, sender, address(this), permitMiner.value);\n\n        emit MinerOnboardedBatch(owner, minersBatch);\n    }\n\n    /**\n     * @dev Check for minting a remote Miner\n     * @param owner address receiving the remote miner\n     * @param miner address of the remote miner onboarding\n     * @param permitMiner signature of miner register authority to confirm the miner address and price.  \n     */\n    function _mintRemoteMinerCheck( \n        address     owner,\n        address     miner,\n        Signature   memory  permitMiner\n    ) view internal {\n\n        // Check miner is white listed  \n        require(whiteListMiner[miner] == uint8(MinerType.RemoteMiner), 'Arkreen Miner: Wrong Miner');\n        require(AllMinersToken[miner] == 0, \"Arkreen Miner: Miner Repeated\");\n\n        // Check signature\n        // keccak256(\"RemoteMinerOnboard(address owner,address miners,address token,uint256 price,uint256 deadline)\");\n        bytes32 hashRegister = keccak256(abi.encode(REMOTE_MINER_TYPEHASH, owner, miner, \n                                          permitMiner.token, permitMiner.value, permitMiner.deadline));\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, hashRegister));\n        address recoveredAddress = ecrecover(digest, permitMiner.v, permitMiner.r, permitMiner.s);\n  \n        require(recoveredAddress != address(0) && \n                recoveredAddress == AllManagers[uint256(MinerManagerType.Register_Authority)], 'Arkreen Miner: INVALID_SIGNATURE');\n    }\n\n    /**\n     * @dev Check the remote miner minting authorization, including owner, quantity and sale value\n     * @param owner address receiving the remote miners in batch\n     * @param quantity quantity of remote miner for batch sale\n     * @param permitMiner signature of miner register authority to confirm the owner address and value.  \n     */\n    function _mintBatchCheckPrice( \n        address     owner,\n        uint8       quantity,\n        Signature   memory  permitMiner\n    ) view internal {\n\n        require((quantity != 0) && (quantity <= numberOfWhiteListBatch()), \"Arkreen Miner: Wrong Miner Number\");\n        require( quantity <= MAX_BATCH_SALE, 'Arkreen Miner: Quantity Too More');\n\n        // Check signature\n        // keccak256(\"RemoteMinerOnboardBatch(address owner,uint256 quantity,address token,uint256 value,uint256 deadline)\");\n        bytes32 hashRegister = keccak256(abi.encode(REMOTE_MINER_BATCH_TYPEHASH, owner, uint256(quantity),\n                                          permitMiner.token, permitMiner.value, permitMiner.deadline));\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, hashRegister));\n        address recoveredAddress = ecrecover(digest, permitMiner.v, permitMiner.r, permitMiner.s);\n  \n        require(recoveredAddress != address(0) && \n                recoveredAddress == AllManagers[uint256(MinerManagerType.Register_Authority)], 'Arkreen Miner: INVALID_SIGNATURE');\n    }\n\n    /**\n     * @dev mint a remote Miner\n     * @param owner address receiving the remote miner\n     * @param miner address of the remote miner onboarding\n     */\n    function _mintRemoteMiner( address owner, address miner) internal {\n\n        // Prepare to mint new remote miner\n        Miner memory newMiner;\n        newMiner.mAddress = miner;\n        newMiner.mType = MinerType.RemoteMiner;\n        newMiner.mStatus = MinerStatus.Normal;\n        newMiner.timestamp = uint32(block.timestamp);    \n\n        // mint new remote miner\n        uint256 realMinerID = totalSupply() + 1;\n        _safeMint(owner, realMinerID);\n        AllMinersToken[miner] = realMinerID;\n        AllMinerInfo[realMinerID] = newMiner;\n\n        delete whiteListMiner[miner];\n    }\n\n    /**\n     * @dev mint a remote Miner\n     * @param owner address receiving the remote miner\n     * @param numMiners number of remote miners needed to mint\n     */\n    function _mintRemoteMinerBatch(address owner, uint8 numMiners) internal returns (address[] memory minerList) {\n\n        // Prepare to mint new remote miners\n        Miner memory newMiner;\n        minerList = new address[](numMiners);\n\n        newMiner.mType = MinerType.RemoteMiner;\n        newMiner.mStatus = MinerStatus.Normal;\n        newMiner.timestamp = uint32(block.timestamp);   \n\n        uint256 listHead = whiteListBatchIndexHead;\n\n        for(uint8 index; index < numMiners; index++) {\n            address miner = whiteListMinerBatch[listHead +index];\n            minerList[index] = miner;\n\n            // Check miner is not repeated\n            require(AllMinersToken[miner] == 0, \"Arkreen Miner: Miner Repeated\");\n\n            // mint new remote miner\n            uint256 realMinerID = totalSupply() + 1;\n            _safeMint(owner, realMinerID);\n            AllMinersToken[miner] = realMinerID;\n            newMiner.mAddress = miner;\n            AllMinerInfo[realMinerID] = newMiner;\n            delete whiteListMinerBatch[listHead +index];\n        }\n        whiteListBatchIndexHead += numMiners;\n    }\n\n    /**\n     * @dev Onboarding a remote Miner\n     * @param owner address receiving the remote miner\n     * @param miner address of the remote miner onboarding\n     * @param permitMiner signature of miner register authority to confirm the miner address and price.  \n     * @param permitToPay signature of payer to pay the onboarding fee\n     */\n    function RemoteMinerOnboard(\n        address     owner,\n        address     miner,\n        Sig       memory  permitMiner,\n        Signature memory  permitToPay\n    ) external ensure(permitToPay.deadline) {\n\n        // Check miner is white listed  \n        Signature memory fullPermitMiner = Signature(permitToPay.token, permitToPay.value, permitToPay.deadline,\n                                            permitMiner.v, permitMiner.r, permitMiner.s);\n \n        _mintRemoteMinerCheck(owner, miner, fullPermitMiner);\n\n        // Permit payment\n        address sender = _msgSender();\n        IERC20Permit(permitToPay.token).permit(sender, address(this), \n                                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\n\n        // mint new remote miner\n        _mintRemoteMiner(owner, miner);\n\n        // Transfer onboarding fee\n        TransferHelper.safeTransferFrom(permitToPay.token, sender, address(this), permitToPay.value);\n\n        emit MinerOnboarded(owner, miner);\n    }\n\n\n        /**\n     * @dev Onboarding remote miners in batch mode\n     * @param owner address receiving the remote miner\n     * @param numMiners number of remote miners desired to purchase\n     * @param permitMiner signature of miner register authority to confirm the miner address and price.  \n     * @param permitToPay signature of payer to pay the onboarding fee\n     */\n    function RemoteMinerOnboardBatch(\n        address     owner,\n        uint8       numMiners,\n        Sig       memory  permitMiner,\n        Signature memory  permitToPay\n    ) external ensure(permitToPay.deadline) {\n\n        // Check miner is white listed  \n        Signature memory fullPermitMiner = Signature(permitToPay.token, permitToPay.value , permitToPay.deadline,\n                                            permitMiner.v, permitMiner.r, permitMiner.s);\n \n        _mintBatchCheckPrice(owner, numMiners, fullPermitMiner);\n\n        // Permit payment\n        address sender = _msgSender();\n        IERC20Permit(permitToPay.token).permit(sender, address(this), \n                                        permitToPay.value, permitToPay.deadline, permitToPay.v, permitToPay.r, permitToPay.s);\n\n        // mint new remote miner\n        address[] memory minersBatch = _mintRemoteMinerBatch(owner, numMiners);\n\n        // Transfer onboarding fee\n        TransferHelper.safeTransferFrom(permitToPay.token, sender, address(this), permitToPay.value);\n\n        emit MinerOnboardedBatch(owner, minersBatch);\n    }\n\n    /**\n     * @dev Onboarding standard miner\n     * @param owner address receiving the standard miner\n     * @param miner address of the standard miner onboarding\n     * @param permitMiner signature of onboarding manager to approve the onboarding\n     */\n    function StandardMinerOnboard(\n        address owner,\n        address miner,\n        uint256 deadline,\n        Sig     calldata permitMiner\n    ) external ensure(deadline) {\n\n        // Check the starndard address\n        require(!miner.isContract(), 'Arkreen Miner: Not EOA Address');\n        require(AllMinersToken[miner] == 0, \"Arkreen Miner: Miner Repeated\");\n        MinerType minerType = MinerType(whiteListMiner[miner]);\n        require((minerType == MinerType.StandardMiner) || (minerType == MinerType.SocketMiner), 'Arkreen Miner: Wrong Miner');        \n\n        // Check signature\n        bytes32 hashRegister = keccak256(abi.encode(STANDARD_MINER_TYPEHASH, owner, miner, deadline));\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, hashRegister));\n        address recoveredAddress = ecrecover(digest, permitMiner.v, permitMiner.r, permitMiner.s);\n  \n        require(recoveredAddress != address(0) && \n                recoveredAddress == AllManagers[uint256(MinerManagerType.Register_Authority)], 'Arkreen Miner: INVALID_SIGNATURE');\n\n        Miner memory tmpMiner;\n        tmpMiner.mAddress = miner;\n        tmpMiner.mType = minerType;\n        tmpMiner.mStatus = MinerStatus.Normal;\n        tmpMiner.timestamp = uint32(block.timestamp);        \n\n        // Mint a new standard miner\n        uint256 minerID = totalSupply() + 1;\n        _safeMint(owner, minerID);\n        AllMinersToken[miner] = minerID;\n        AllMinerInfo[minerID] = tmpMiner;\n\n        // Increase the counter of total standard/socket miner \n        if(minerType == MinerType.StandardMiner) { \n          totalStandardMiner += 1;\n          emit StandardMinerOnboarded(owner,  miner);   // emit onboarding event\n        } else {\n          totalSocketMiner += 1;\n          emit SocketMinerOnboarded(owner,  miner);\n        }\n\n        delete whiteListMiner[miner]; \n    }\n\n    /**\n     * @dev Onboarding remote miners in batch\n     * @param owners addresses receiving the remote miners\n     * @param miners addresses of the remote miners onboarding\n     */\n    function RemoteMinerOnboardInBatch(\n        address[]  calldata   owners,\n        address[]  calldata   miners\n    ) external onlyMinerManager {\n\n        require(owners.length == miners.length, 'Arkreen Miner: Wrong Address List');\n\n        // Prepare to mint new remote miners, only remote miners\n        Miner memory newMiner;\n        newMiner.mType = MinerType.RemoteMiner;\n        newMiner.mStatus = MinerStatus.Normal;\n        newMiner.timestamp = uint32(block.timestamp);\n\n        for(uint256 index; index < owners.length; index++) {\n            // Mint new remote miners one by one\n            uint256 remoteMinerID = totalSupply() + 1;\n            newMiner.mAddress = miners[index];\n            _safeMint(owners[index], remoteMinerID);\n            AllMinersToken[newMiner.mAddress] = remoteMinerID;            \n            AllMinerInfo[remoteMinerID] = newMiner;\n        }\n        // Need to emit? If yes, data may be big \n        emit RemoteMinersInBatch(owners, miners);\n    }\n\n    /**\n     * @dev Get all the miner info of the specified miner\n     * @param addrMiner miner address\n     */\n    function GetMinerInfo(address addrMiner) external view returns (address owner, Miner memory miner) {\n        uint256 minerID = AllMinersToken[addrMiner];\n        owner = ownerOf(minerID);\n        miner = AllMinerInfo[minerID];\n    }\n\n    /**\n     * @dev Get all the miner address of the owner\n     * @param owner owner address\n     */\n    function GetMinersAddr(address owner) external view returns (address[] memory minersAddr) {\n        uint256 totalMiners = balanceOf(owner);\n        minersAddr = new address[](totalMiners);\n        for(uint256 index;  index < totalMiners; index++) {     \n            uint256 minerID = tokenOfOwnerByIndex(owner, index);\n            minersAddr[index] = AllMinerInfo[minerID].mAddress;\n        }\n    }\n\n    /**\n     * @dev Register or unregister miner manufactures\n     * @param manufactures manufactures to be registered or unregistered\n     * @param yesOrNo = true, to register manufactures, = false, to unregister manufactures\n     */\n    function ManageManufactures(address[] calldata manufactures, bool yesOrNo) external onlyOwner {\n      for(uint256 index;  index < manufactures.length; index++) {\n        AllManufactures[manufactures[index]] = yesOrNo;\n      }\n    }\n\n    /**\n     * @dev Update the miner status\n     * @param minerID miner ID of any type of miners\n     * @param minerStatus new status\n     */\n    function SetMinersStatus(uint256 minerID, MinerStatus minerStatus) external onlyOwner {\n        require(minerStatus != MinerStatus.Pending, 'Arkreen Miner: Wrong Input');      \n        AllMinerInfo[minerID].mStatus = minerStatus;\n    }\n\n    /**\n     * @dev Update the miner white list, add/remove the miners to/from the white list.\n     *      Only miners in the white list are allowed to onboard as an NFT.\n     * @param typeMiner Type of the miners to add, MinerType.Empty(=0) means to remove the miners\n     * @param addressMiners List of the miners\n     */\n    function UpdateMinerWhiteList(uint8 typeMiner, address[] calldata addressMiners) external onlyMinerManager {\n      address tempAddress;\n      for(uint256 index; index < addressMiners.length; index++) {\n        tempAddress = addressMiners[index];\n        if(typeMiner == 0xFF) {\n          delete whiteListMiner[tempAddress];\n          continue;\n        }\n        // Checked for non-existence\n        require( tempAddress != address(0) && !tempAddress.isContract(), 'Arkreen Miner: Wrong Address');     \n        require( whiteListMiner[tempAddress] == 0, 'Arkreen Miner: Miners Repeated');      \n        whiteListMiner[tempAddress] = uint8(typeMiner);\n      }\n    }\n\n    /**\n     * @dev Update the miner white list for batch sales. Only miners in the white list are allowed to onboard as an NFT.\n     * @param addressMiners List of the miners\n     */\n    function UpdateMinerWhiteListBatch(address[] calldata addressMiners) external onlyMinerManager {\n      uint256 indexStart = whiteListBatchIndexTail;\n      uint256 length = addressMiners.length;\n      for(uint256 index; index < length; index++) {\n        whiteListMinerBatch[indexStart + index] = addressMiners[index];\n      }\n      whiteListBatchIndexTail += length;\n    }\n\n    /**\n     * @dev get the length of the white list for batch sales\n     */\n    function numberOfWhiteListBatch() public view returns (uint256) {\n      return whiteListBatchIndexTail - whiteListBatchIndexHead;\n    }\n\n    /**\n     * @dev Check if holding miners\n     * @param owner owner address\n     */\n    function isOwner(address owner) external view returns (bool) {\n        // just considering number of tokens, token status not checked \n        return balanceOf(owner) > 0;\n    }\n\n    /**\n     * @dev Set the Arkreen managing accounts \n     * @param managerType type of the managing account\n     * @param managerAddress address of the managing account     \n     */\n    function setManager(uint256 managerType, address managerAddress) external onlyOwner {\n      AllManagers[managerType] = managerAddress;\n    }\n\n    /**\n     * @dev Set the native token address\n     * @param native address, not checked againt zero address to disable payment by native token    \n     */\n    function setNativeToken(address native) external onlyOwner {\n      tokenNative = native;\n    }    \n\n    /**\n     * @dev Withdraw all the onboarding fee\n     * @param token address of the token to withdraw, USDC/ARKE\n     */\n    function withdraw(address token) public onlyOwner {\n        address receiver = AllManagers[uint256(MinerManagerType.Payment_Receiver)];\n        if(receiver == address(0)) {\n            receiver = _msgSender();\n        }\n\n        if(token == tokenNative) {\n            TransferHelper.safeTransferETH(receiver, address(this).balance);      \n        } else {\n            uint256 balance = IERC20(token).balanceOf(address(this));\n            TransferHelper.safeTransfer(token, receiver, balance);\n        }\n      }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory){\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public view override( ERC721EnumerableUpgradeable) returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setBaseURI(string memory newBaseURI) external virtual onlyOwner {\n        baseURI = newBaseURI;\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n}\n"
    },
    "contracts/ArkreenMinerTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nenum MinerType {\n    SKIP_0,\n    SKIP_1,\n    StandardMiner,            // 2\n    RemoteMiner,              // 3\n    APIMiner,                 // 4\n    SocketMiner               // 5\n}\n\nenum MinerStatus {\n    Pending,            // 0\n    Normal,             // 1\n    Locked,             // 2\n    Terminated          // 3\n}\n\nstruct Miner {\n    address         mAddress;\n    MinerType       mType;\n    MinerStatus     mStatus;\n    uint32          timestamp;\n}    \n\nenum MinerManagerType {\n    Miner_Manager,        // 0\n    Register_Authority,   // 1\n    Payment_Receiver      // 2\n}\n\nstruct Signature {\n    address     token;\n    uint256     value;\n    uint256     deadline;  \n    uint8       v;\n    bytes32     r;\n    bytes32     s;              \n}\n\nstruct Sig {\n    uint8       v;\n    bytes32     r;\n    bytes32     s;              \n}"
    },
    "contracts/test/ArkreenMinerU.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../ArkreenMiner.sol\";\n\n// For testing of contract upgrading \ncontract ArkreenMinerU is ArkreenMiner\n{\n    struct MinerMore {\n        string         attribute;\n    }  \n\n    mapping(uint256 => MinerMore) public AllMinerInfoMore;\n\n    /// @dev Returns the current version of the smart contract\n    function version() external pure returns (string memory) {\n        return '1.0.1';\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"https://www.arkreen.com/miners/\";\n    }\n\n    function updateMineMore(uint256 minerID, string calldata attribute) public onlyOwner {\n        MinerMore memory tmpMinerMore;\n        tmpMinerMore.attribute = attribute;\n        AllMinerInfoMore[minerID] = tmpMinerMore;\n    }\n\n    function getMineMore(uint256 minerID) public view returns (string memory) {\n        return AllMinerInfoMore[minerID].attribute;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/UUPSProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol';\n\n/// @dev Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract UUPSProxy is ERC1967Proxy {\n    constructor(\n        address _logic,\n        address, // This is completely unused by the uups proxy, required to remain compatible with hardhat deploy: https://github.com/wighawag/hardhat-deploy/issues/146\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/Dex/Governance/StakingTwinRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n// Inheritance\nimport \"./interfaces/IStakingTwinRewards.sol\";\nimport \"./RewardsTwinDistributionRecipient.sol\";\n\ncontract StakingTwinRewards is IStakingTwinRewards, RewardsTwinDistributionRecipient, ReentrancyGuard {\n    using SafeMath  for uint256;\n    using SafeERC20 for IERC20;\n    struct AmountWithSignature {\n        uint256     amount;\n        uint        deadline;\n        uint8       v;\n        bytes32     r;\n        bytes32     s;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20  public rewardsToken;\n    IERC20  public stakingTokenA;\n    IERC20  public stakingTokenB;\n    uint256 public periodFinish = 0;\n    uint256 public rewardRate = 0;\n    uint256 public rewardsDuration = 0 days;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupplyA;\n    uint256 private _totalSupplyB;\n\n    mapping(address => uint256) private _balancesA;\n    mapping(address => uint256) private _balancesB;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _rewardsDistribution,\n        address _rewardsToken,\n        address _stakingTokenA,\n        address _stakingTokenB\n    ) {\n        require(_stakingTokenA < _stakingTokenB, \"Wrong token order\");\n        rewardsToken = IERC20(_rewardsToken);\n        stakingTokenA = IERC20(_stakingTokenA);\n        stakingTokenB = IERC20(_stakingTokenB);\n        rewardsDistribution = _rewardsDistribution;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() external override view returns (uint256, uint256) {\n        return (_totalSupplyA, _totalSupplyB);\n    }\n\n    function balanceOf(address account) external override view returns (uint256, uint256) {\n        return (_balancesA[account], _balancesB[account]);\n    }\n\n    function lastTimeRewardApplicable() public override view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public override view returns (uint256) {\n        uint256 _totalSupply = _totalSupplyA.add(_totalSupplyB);\n        if(_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\n            );\n    }\n\n    function earned(address account) public override view returns (uint256) {\n        return (_balancesA[account].add(_balancesB[account])).mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\n    }\n\n    function getRewardForDuration() external override view returns (uint256) {\n        return rewardRate.mul(rewardsDuration);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stakeWithPermit(AmountWithSignature calldata amountA, AmountWithSignature calldata amountB) external nonReentrant updateReward(msg.sender) {\n        require( (amountA.amount > 0) || (amountB.amount > 0), \"Cannot stake 0\");\n        if(amountA.amount > 0) {\n            _totalSupplyA = _totalSupplyA.add(amountA.amount);\n            _balancesA[msg.sender] = _balancesA[msg.sender].add(amountA.amount);\n\n            // permit\n            IFeSwapERC20(address(stakingTokenA)).permit(msg.sender, address(this), amountA.amount, amountA.deadline, amountA.v, amountA.r, amountA.s);\n            stakingTokenA.safeTransferFrom(msg.sender, address(this), amountA.amount);\n        }\n        if(amountB.amount > 0) {\n            _totalSupplyB = _totalSupplyB.add(amountB.amount);\n            _balancesB[msg.sender] = _balancesB[msg.sender].add(amountB.amount);\n\n            // permit\n            IFeSwapERC20(address(stakingTokenB)).permit(msg.sender, address(this), amountB.amount, amountB.deadline, amountB.v, amountB.r, amountB.s);\n            stakingTokenB.safeTransferFrom(msg.sender, address(this), amountB.amount);\n        }\n\n        emit Staked(msg.sender, amountA.amount, amountB.amount);\n    }\n\n    function stake(uint256 amountA, uint256 amountB) external override nonReentrant updateReward(msg.sender) {\n        require( (amountA > 0) || (amountB > 0), \"Cannot stake 0\");\n        if( amountA > 0 ){\n            _totalSupplyA = _totalSupplyA.add(amountA);\n            _balancesA[msg.sender] = _balancesA[msg.sender].add(amountA);\n            stakingTokenA.safeTransferFrom(msg.sender, address(this), amountA);\n        }\n        if( amountB > 0 ){\n            _totalSupplyB = _totalSupplyB.add(amountB);\n            _balancesB[msg.sender] = _balancesB[msg.sender].add(amountB);\n            stakingTokenB.safeTransferFrom(msg.sender, address(this), amountB);\n        }\n\n        emit Staked(msg.sender, amountA, amountB);\n    }\n\n    function withdraw(uint256 amountA, uint256 amountB) public override nonReentrant updateReward(msg.sender) {\n        require( (amountA > 0) || (amountB > 0), \"Cannot withdraw 0\");\n        if( amountA > 0 ){\n            _totalSupplyA = _totalSupplyA.sub(amountA);\n            _balancesA[msg.sender] = _balancesA[msg.sender].sub(amountA);\n            stakingTokenA.safeTransfer(msg.sender, amountA);\n        }\n        if( amountB > 0 ){\n            _totalSupplyB = _totalSupplyB.sub(amountB);\n            _balancesB[msg.sender] = _balancesB[msg.sender].sub(amountB);\n            stakingTokenB.safeTransfer(msg.sender, amountB);\n        }\n        emit Withdrawn(msg.sender, amountA, amountB);\n    }\n\n    function getReward() public override nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            rewardsToken.safeTransfer(msg.sender, reward);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function exit() external override {\n        withdraw(_balancesA[msg.sender], _balancesB[msg.sender]);\n        getReward();\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function notifyRewardAmount(uint256 reward, uint256 _rewardsDuration) external override onlyRewardsDistribution updateReward(address(0)) {\n        require(_rewardsDuration > 0 , \"Wrong duration\");\n\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward.div(_rewardsDuration);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            rewardRate = reward.add(leftover).div(_rewardsDuration);\n        }\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n        // This keeps the reward rate in the right range, preventing overflows due to\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n        uint balance = rewardsToken.balanceOf(address(this));\n        require(rewardRate <= balance.div(_rewardsDuration), \"Provided reward too high\");\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(_rewardsDuration);\n        rewardsDuration = _rewardsDuration;\n        emit RewardAdded(reward, _rewardsDuration);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward, uint256 _rewardsDuration);\n    event Staked(address indexed user, uint256 amountA, uint256 amountB);\n    event Withdrawn(address indexed user, uint256 amountA, uint256 amountB);\n    event RewardPaid(address indexed user, uint256 reward);\n}\n\ninterface IFeSwapERC20 {\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/Dex/Governance/interfaces/IStakingTwinRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n\ninterface IStakingTwinRewards {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256, uint256);\n\n    function balanceOf(address account) external view returns (uint256, uint256);\n\n    // Mutative\n\n    function stake(uint256 amountA, uint256 amountB) external;\n\n    function withdraw(uint256 amountA, uint256 amountB) external;\n\n    function getReward() external;\n\n    function exit() external;\n}"
    },
    "contracts/Dex/Governance/RewardsTwinDistributionRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nabstract contract RewardsTwinDistributionRecipient {\n    address public rewardsDistribution;\n\n    function notifyRewardAmount(uint256 reward, uint256 _rewardsDuration) external virtual;\n\n    modifier onlyRewardsDistribution() {\n        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\n        _;\n    }\n}"
    },
    "contracts/Dex/Governance/StakingTwinRewardsFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport \"./StakingTwinRewards.sol\";\n\ninterface IFeSwapPair {\n    function tokenIn() external view returns (address);\n    function tokenOut() external view returns (address);\n}\n\ncontract StakingTwinRewardsFactory is Ownable {\n    // immutables\n    address public rewardsToken;\n    uint    public stakingRewardsGenesis;\n\n    // the staking tokens for which the rewards contract has been deployed\n    address[] public stakingTokens;\n\n    // info about rewards for a particular staking token\n    struct StakingRewardsInfo {\n        address stakingTwinToken;\n        address stakingRewards;\n        uint    rewardAmount;\n        uint    rewardsDuration;\n    }\n\n    // rewards info by staking token\n    mapping(address => StakingRewardsInfo) public stakingRewardsInfoByStakingToken;\n\n    constructor(\n        address _rewardsToken,\n        uint    _stakingRewardsGenesis\n    ) Ownable() {\n        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n\n        rewardsToken = _rewardsToken;\n        stakingRewardsGenesis = _stakingRewardsGenesis;\n    }\n\n    ///// permissioned functions\n\n    // deploy a staking reward contract for the staking token, and store the reward amount\n    // the reward will be distributed to the staking reward contract no sooner than the genesis\n    function deploy(address stakingTokenA, address stakingTokenB, uint rewardAmount, uint rewardsDuration) public onlyOwner {\n        require(stakingTokenA < stakingTokenB, \"Wrong token order\");\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingTokenA];\n        if(info.stakingRewards == address(0)) {\n            require(IFeSwapPair(stakingTokenA).tokenIn() == IFeSwapPair(stakingTokenB).tokenOut(), \"Wrong pair token\");\n            require(IFeSwapPair(stakingTokenA).tokenOut() == IFeSwapPair(stakingTokenB).tokenIn(), \"Wrong pair token\");\n\n            info.stakingRewards = address(new StakingTwinRewards(/*_rewardsDistribution=*/ address(this), \n                                                                rewardsToken, stakingTokenA, stakingTokenB));\n            info.stakingTwinToken = stakingTokenB;\n            info.rewardAmount = rewardAmount;\n            info.rewardsDuration = rewardsDuration;\n            stakingTokens.push(stakingTokenA);\n        } else {\n            require(info.rewardAmount == 0, 'StakingRewardsFactory::deploy: already deployed');\n            require(stakingTokenB == info.stakingTwinToken, \"Wrong twin token\");\n            info.rewardAmount = rewardAmount;                   // refill the reward contract\n            info.rewardsDuration = rewardsDuration;\n        }\n\n    }\n\n    ///// permissionless functions\n\n    // call notifyRewardAmount for all staking tokens.\n    function notifyRewardAmounts() public {\n        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n        for (uint i = 0; i < stakingTokens.length; i++) {\n            notifyRewardAmount(stakingTokens[i]);\n        }\n    }\n\n    // notify reward amount for an individual staking token.\n    // this is a fallback in case the notifyRewardAmounts costs too much gas to call for all contracts\n    function notifyRewardAmount(address stakingToken) public {\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmount: not ready');\n\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];\n        require(info.stakingRewards != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\n\n        if (info.rewardAmount > 0) {\n            uint rewardAmount = info.rewardAmount;\n            info.rewardAmount = 0;\n\n            require(\n                IERC20(rewardsToken).transfer(info.stakingRewards, rewardAmount),\n                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\n            );\n            StakingTwinRewards(info.stakingRewards).notifyRewardAmount(rewardAmount, info.rewardsDuration);\n        }\n    }\n}"
    },
    "contracts/Dex/Governance/StakingRewardsFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport \"./StakingRewards.sol\";\n\ncontract StakingRewardsFactory is Ownable {\n    // immutables\n    address public rewardsToken;\n    uint    public stakingRewardsGenesis;\n\n    // the staking tokens for which the rewards contract has been deployed\n    address[] public stakingTokens;\n\n    // info about rewards for a particular staking token\n    struct StakingRewardsInfo {\n        address stakingRewards;\n        uint rewardAmount;\n    }\n\n    // rewards info by staking token\n    mapping(address => StakingRewardsInfo) public stakingRewardsInfoByStakingToken;\n\n    constructor(\n        address _rewardsToken,\n        uint    _stakingRewardsGenesis\n    ) Ownable() {\n        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n\n        rewardsToken = _rewardsToken;\n        stakingRewardsGenesis = _stakingRewardsGenesis;\n    }\n\n    ///// permissioned functions\n\n    // deploy a staking reward contract for the staking token, and store the reward amount\n    // the reward will be distributed to the staking reward contract no sooner than the genesis\n    function deploy(address stakingToken, uint rewardAmount) public onlyOwner {\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];\n//        require(info.stakingRewards == address(0), 'StakingRewardsFactory::deploy: already deployed');\n        if(info.stakingRewards == address(0)) {\n            info.stakingRewards = address(new StakingRewards(/*_rewardsDistribution=*/ address(this), rewardsToken, stakingToken));\n            info.rewardAmount = rewardAmount;\n            stakingTokens.push(stakingToken);\n        } else {\n            require(info.rewardAmount == 0, 'StakingRewardsFactory::deploy: already deployed');\n            info.rewardAmount = rewardAmount;       // refill the reward contract\n        }\n\n    }\n\n    ///// permissionless functions\n\n    // call notifyRewardAmount for all staking tokens.\n    function notifyRewardAmounts() public {\n        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n        for (uint i = 0; i < stakingTokens.length; i++) {\n            notifyRewardAmount(stakingTokens[i]);\n        }\n    }\n\n    // notify reward amount for an individual staking token.\n    // this is a fallback in case the notifyRewardAmounts costs too much gas to call for all contracts\n    function notifyRewardAmount(address stakingToken) public {\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmount: not ready');\n\n        StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];\n        require(info.stakingRewards != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\n\n        if (info.rewardAmount > 0) {\n            uint rewardAmount = info.rewardAmount;\n            info.rewardAmount = 0;\n\n            require(\n                IERC20(rewardsToken).transfer(info.stakingRewards, rewardAmount),\n                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\n            );\n            StakingRewards(info.stakingRewards).notifyRewardAmount(rewardAmount);\n        }\n    }\n}"
    },
    "contracts/Dex/Governance/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n// Inheritance\nimport \"./interfaces/IStakingRewards.sol\";\nimport \"./RewardsDistributionRecipient.sol\";\n\ncontract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public rewardsToken;\n    IERC20 public stakingToken;\n    uint256 public periodFinish = 0;\n    uint256 public rewardRate = 0;\n    uint256 public rewardsDuration = 60 days;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _rewardsDistribution,\n        address _rewardsToken,\n        address _stakingToken\n    ) {\n        rewardsToken = IERC20(_rewardsToken);\n        stakingToken = IERC20(_stakingToken);\n        rewardsDistribution = _rewardsDistribution;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() external override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) external override view returns (uint256) {\n        return _balances[account];\n    }\n\n    function lastTimeRewardApplicable() public override view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public override view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\n            );\n    }\n\n    function earned(address account) public override view returns (uint256) {\n        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\n    }\n\n    function getRewardForDuration() external override view returns (uint256) {\n        return rewardRate.mul(rewardsDuration);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n\n        // permit\n        IFeSwapERC20(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\n\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function stake(uint256 amount) external override nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) public override nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot withdraw 0\");\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function getReward() public override nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            rewardsToken.safeTransfer(msg.sender, reward);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function exit() external override {\n        withdraw(_balances[msg.sender]);\n        getReward();\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function notifyRewardAmount(uint256 reward) external override onlyRewardsDistribution updateReward(address(0)) {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward.div(rewardsDuration);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n        }\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n        // This keeps the reward rate in the right range, preventing overflows due to\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n        uint balance = rewardsToken.balanceOf(address(this));\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(rewardsDuration);\n        emit RewardAdded(reward);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n}\n\ninterface IFeSwapERC20 {\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/Dex/Governance/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IStakingRewards {\n    // Views\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    // Mutative\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function getReward() external;\n\n    function exit() external;\n}"
    },
    "contracts/Dex/Governance/RewardsDistributionRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nabstract contract RewardsDistributionRecipient {\n    address public rewardsDistribution;\n\n    function notifyRewardAmount(uint256 reward) external virtual;\n\n    modifier onlyRewardsDistribution() {\n        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\n        _;\n    }\n}"
    },
    "contracts/Dex/Governance/patch/Patch(not_used).sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @dev Patch the existing contract in case to upgrde this contract\n *      This mechanism is given up for the gas fee consideration\n */\n\nabstract contract Patch is Ownable {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"patch.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x39533E06CAF7A4B911A916EDEE14331530B9589C6C5FC4C05C447473DC6499C4;\n\n    event PatchChanged(address indexed newPatch);\n\n    /**\n     * @dev Returns the current patch address.\n     */\n    function getPatch() public view returns (address patch) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            patch := sload(_IMPLEMENTATION_SLOT)\n        }\n    }\n\n    /**\n     * @dev Upgrades the patch to a new implementation.\n     * \n     * Emits an {Upgraded} event.\n     */\n    function setPatch(address newPatch) public onlyOwner {\n        require(Address.isContract(newPatch), \"UpgradeablePatch: new implementation is not a contract\");\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, newPatch)\n        }\n        emit PatchChanged(newPatch);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n\n    function callPatch(bytes calldata patchCallData ) external payable virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            let realSize := sload(patchCallData.offset)\n            calldatacopy(0, 68, realSize)\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), sload(_IMPLEMENTATION_SLOT), 0, realSize, 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n}"
    },
    "contracts/Dex/Governance/MetamorphicContractFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Metamorphic Contract Factory\n * @author Derik Lu, simplified from: https://github.com/0age/metamorphic\n * @notice This contract creates metamorphic contracts, which clones the \n * implementation contract specified in constructor. This metamorphic contract \n * will be used as the patch of the calling contract with delegatecall.\n */\ncontract MetamorphicContractFactory is Ownable {\n  // fires when a metamorphic contract is deployed by cloning another contract.\n  event Metamorphosed(address metamorphicContract, address newImplementation);\n  \n  // store the initialization code for metamorphic contracts.\n  bytes public metamorphicContractInitializationCode;\n\n  // store hash of the initialization code for metamorphic contracts as well.\n  bytes32 public metamorphicContractInitializationCodeHash;\n\n  // maintain a mapping of metamorphic contracts to metamorphic implementations.\n  mapping(address => address) private _implementations;\n\n  // the list of all metamorphic contractes that have been created. \n  address[] public allMetamorphicContracts;\n\n  /**\n   * @dev In the constructor, set up the initialization code for metamorphic contracts.\n   * Factory is not sensitive to gas consumption as it is not run at high rate,\n   * so the original init code is modified a little to be easily understood.\n   *\n   * Metamorphic contract initialization code (37 bytes).\n   * (8 bytes and 16 gas more than the original code at: \n   *   https://github.com/0age/metamorphic) \n   * \n   * 0x60006020816004601c335a63aaf10f428752fa60185780fd5b808151803b80938091923cf3\n   * Description:\n   *\n   * pc|op|name         | [stack]                                | <memory>\n   *\n   * ** set the first stack item to zero - used later **\n   * 00 60 push1                                                  \n   * 01 00                [0]                                       <>\n   * ** set second stack item to 32, length of word returned from staticcall **\n   * 02 60 push1\n   * 03 20 outsize        [0, 32]                                   <>\n   *\n   * ** set third stack item to 0, position of word returned from staticcall **\n   * 04 81 dup2           [0, 32, 0]                                <>\n   *\n   * ** set fourth stack item to 4, length of selector given to staticcall **\n   * 05 60 push1                                                  \n   * 06 04                [0, 32, 0, 4]                             <>\n   *\n   * ** set fifth stack item to 28, position of selector given to staticcall **\n   * 07 60 push1\n   * 08 1c inpos          [0, 32, 0, 4, 28]                         <>\n   *\n   * ** set the sixth stack item to msg.sender, target address for staticcall **\n   * 09 33 caller         [0, 32, 0, 4, 28, caller]                 <>\n   *\n   * ** set the seventh stack item to msg.gas, gas to forward for staticcall **\n   * 10 5a gas            [0, 32, 0, 4, 28, caller, gas]            <>\n   *\n   * ** set the eighth stack item to selector, \"what\" to store via mstore **\n   * ** 0xaaf10f42 = first four bytes of keccak256(\"getImplementation()\") **\n   * 11 63 push4\n   * 12 aaf10f42 selector [0, 32, 0, 4, 28, caller, gas, 0xaaf10f42]    <>\n   *\n   * ** set the ninth stack item to 0, \"where\" to store via mstore ***\n   * 16 87 dup8           [0, 32, 0, 4, 28, caller, gas, 0xaaf10f42, 0] <>\n   *\n   * ** call mstore, consume 8 and 9 from the stack, place selector in memory **\n   * 17 52 mstore         [0, 32, 0, 4, 0, caller, gas]             <0xaaf10f42>\n   *\n   * ** call staticcall, consume items 2 through 7, place address in memory **\n   * 18 fa staticcall     [0, 0/1 (if successful)]                 (<address>)\n   *\n   * ** set the jump offsset for success handling **\n   * 19 60 push1\n   * 20 18 offset         [0, 0/1, 24]                             (<address>)\n   *\n   * ** jump to following handling if successful **\n   * 21 57 jumpi          [0]                                           <>\n   *\n   * ** set revert data offset **\n   * 22 80 dup1           [0, 0]                                        <>\n   *\n   * ** revert **\n   * 23 fd revert         []                                        *reverted!*\n   *\n   * ** flag the jump target **\n   * 24 5b jumpdest       [0]                                       <address>\n   *\n   * ** set second stack item to set to 0 **\n   * 25 80 dup1           [0, 0]                                    <address>\n   *\n   * ** push a third 0 to the stack, position of address in memory **\n   * 26 81 dup2           [0, 0, 0]                                 <address>\n   *\n   * ** place address from position in memory onto third stack item **\n   * 27 51 mload          [0, 0, address]                           <>\n   *\n   * ** place address to fourth stack item for extcodesize to consume **\n   * 28 80 dup1           [0, 0, address, address]                  <>\n   *\n   * ** get extcodesize on fourth stack item for extcodecopy **\n   * 29 3b extcodesize    [0, 0, address, size]                     <>\n   *\n   * ** dup and swap size for use by return at end of init code **\n   * 30 80 dup1           [0, 0, address, size, size]               <> \n   * 31 93 swap4          [size, 0, address, size, 0]               <>\n   *\n   * ** push code position 0 to stack and reorder stack items for extcodecopy **\n   * 32 80 dup1           [size, 0, address, size, 0, 0]            <>\n   * 33 91 swap2          [size, 0, address, 0, 0, size]            <>\n   * 34 92 swap3          [size, 0, size, 0, 0, address]            <>\n   *\n   * ** call extcodecopy, consume four items, clone runtime code to memory **\n   * 35 3c extcodecopy    [size, 0]                                 <code>\n   *\n   * ** return to deploy final code in memory **\n   * 36 f3 return         []                                        *deployed!*\n   */\n  constructor() {\n    // assign the initialization code for the metamorphic contract.\n    metamorphicContractInitializationCode = (\n      hex\"60006020816004601c335a63aaf10f428752fa60185780fd5b808151803b80938091923cf3\"\n    );\n\n    // calculate and assign keccak256 hash of metamorphic initialization code.\n    metamorphicContractInitializationCodeHash = keccak256(\n      abi.encodePacked(\n        metamorphicContractInitializationCode\n      )\n    );\n  }\n\n  /**\n   * @dev Deploy a metamorphic contract by submitting a given salt or nonce\n   * along with the address of an existing implementation contract to clone, and\n   * optionally provide calldata for initializing the new metamorphic contract.\n   * To replace the contract, first selfdestruct the current contract, then call\n   * with the same salt value and a new implementation address (be aware that\n   * all existing state will be wiped from the existing contract). Also note\n   * that the first 20 bytes of the salt must match the calling address, which\n   * prevents contracts from being created by unintended parties.\n   * @param salt bytes32 The nonce that will be passed into the CREATE2 call and\n   * thus will determine the resulant address of the metamorphic contract.\n   * @param implementationContract address The address of the existing\n   * implementation contract to clone.\n   * @param metamorphicContractInitializationCalldata bytes An optional data\n   * parameter that can be used to atomically initialize the metamorphic\n   * contract.\n   * @return metamorphicContractAddress Address of the metamorphic contract \n   * that will be created.\n   */\n  function deployMetamorphicContract(\n    bytes32 salt,\n    address implementationContract,\n    bytes calldata metamorphicContractInitializationCalldata\n  ) external payable onlyOwner returns (\n    address metamorphicContractAddress\n  ) {\n    // move initialization calldata to memory.\n    bytes memory data = metamorphicContractInitializationCalldata;\n\n    // move the initialization code from storage to memory.\n    bytes memory initCode = metamorphicContractInitializationCode;\n\n    // declare variable to verify successful metamorphic contract deployment.\n    address deployedMetamorphicContract;\n\n    // determine the address of the metamorphic contract.\n    metamorphicContractAddress = _getMetamorphicContractAddress(salt);\n    \n    if(_implementations[metamorphicContractAddress] == address(0))\n        allMetamorphicContracts.push(metamorphicContractAddress);\n\n    // store the implementation to be retrieved by the metamorphic contract.\n    _implementations[metamorphicContractAddress] = implementationContract;\n\n    // using inline assembly: load data and length of data, then call CREATE2.\n    /* solhint-disable no-inline-assembly */\n    assembly {\n      let encoded_data := add(0x20, initCode) // load initialization code.\n      let encoded_size := mload(initCode)     // load the init code's length.\n      deployedMetamorphicContract := create2( // call CREATE2 with 4 arguments.\n        0,                                    // do not forward any endowment.\n        encoded_data,                         // pass in initialization code.\n        encoded_size,                         // pass in init code's length.\n        salt                                  // pass in the salt value.\n      )\n    } /* solhint-enable no-inline-assembly */\n\n    // ensure that the contracts were successfully deployed.\n    require(\n      deployedMetamorphicContract == metamorphicContractAddress,\n      \"Failed to deploy the new metamorphic contract.\"\n    );\n\n    // initialize the new metamorphic contract if any data or value is provided.\n    if (data.length > 0 || msg.value > 0) {\n      /* solhint-disable avoid-call-value */\n      (bool success,) = metamorphicContractAddress.call{value: msg.value}(data);\n      /* solhint-enable avoid-call-value */\n\n      require(success, \"Failed to initialize the new metamorphic contract.\");\n    }\n\n    emit Metamorphosed(deployedMetamorphicContract, implementationContract);\n  }\n  \n  /**\n   * @dev Bypass renounceOwnership of Ownable, so ownership cannot be killed.\n   */\n  function renounceOwnership() public pure override {\n      revert(\"Renounce ownership Disabled!\");\n  }\n\n  /**\n   * @dev View function for retrieving the address of the implementation\n   * contract to clone. Called by the constructor of each metamorphic contract.\n   */\n  function getImplementation() external view returns (address implementation) {\n    return _implementations[msg.sender];\n  }\n\n  /**\n   * @dev View function for retrieving the address of the current implementation\n   * contract of a given metamorphic contract, where the address of the contract\n   * is supplied as an argument. Be aware that the implementation contract has\n   * an independent state and may have been altered or selfdestructed from when\n   * it was last cloned by the metamorphic contract.\n   * @param metamorphicContractAddress address The address of the metamorphic\n   * contract.\n   * @return implementationContractAddress Address of the corresponding \n   * implementation contract.\n   */\n  function getImplementationContractAddress(\n    address metamorphicContractAddress\n  ) external view returns (address implementationContractAddress) {\n    return _implementations[metamorphicContractAddress];\n  }\n\n  /**\n   * @dev View function for the number of Metamorphic Contracts ever been created.\n   */\n  function allMetamorphicContractsLength() external view returns (uint) {\n        return allMetamorphicContracts.length;\n  }\n\n  /**\n   * @dev Compute the address of the metamorphic contract that will be created\n   * upon submitting a given salt to the contract.\n   * @param salt bytes32 The nonce passed into CREATE2 by metamorphic contract.\n   * @return metamorphicContractAddress Address of the corresponding metamorphic contract.\n   */\n  function findMetamorphicContractAddress(\n    bytes32 salt\n  ) external view returns (address metamorphicContractAddress) {\n    // determine the address where the metamorphic contract will be deployed.\n    metamorphicContractAddress = _getMetamorphicContractAddress(salt);\n  }\n\n  /**\n   * @dev Internal view function for calculating a metamorphic contract address\n   * given a particular salt.\n   */\n  function _getMetamorphicContractAddress(\n    bytes32 salt\n  ) internal view returns (address) {\n    // determine the address of the metamorphic contract.\n    return address(\n      uint160(                      // downcast to match the address type.\n        uint256(                    // convert to uint to truncate upper digits.\n          keccak256(                // compute the CREATE2 hash using 4 inputs.\n            abi.encodePacked(       // pack all inputs to the hash together.\n              hex\"ff\",              // start with 0xff to distinguish from RLP.\n              address(this),        // this contract will be the caller.\n              salt,                 // pass in the supplied salt value.\n              metamorphicContractInitializationCodeHash // the init code hash.\n            )\n          )\n        )\n      )\n    );\n  }\n}\n"
    },
    "contracts/ArkreenNotary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ArkreenNotary is Ownable{\n\n    string  public blockHash;\n    string  public cid;\n    uint256 public blockHeight;\n    uint256 public totalPowerGeneraton;\n    uint256 public circulatingSupply;\n\n    uint256 public updateCount;\n\n    //events\n    event DataSaved(string indexed blockHash, string indexed cid, uint256 blockHeight, uint256 totalPowerGeneraton, uint256 circulatingSupply);\n\n    function saveData(\n        string calldata blockHash_,\n        string calldata cid_,\n        uint256 blockHeight_,\n        uint256 totalPowerGeneraton_,\n        uint256 circulatingSupply_\n    ) \n        public onlyOwner\n    {\n        //require(blockHash != _blockHash, \"block hash repeat!\");\n        require(blockHeight_ >= blockHeight, \"blockHeight data must increase!\");\n        require(totalPowerGeneraton_ >= totalPowerGeneraton, \"totalPowerGeneraton data must increase!\");\n        require(circulatingSupply_ >= circulatingSupply, \"circulatingSupply data must increase!\");\n\n        blockHash          = blockHash_;\n        cid                = cid_;\n        blockHeight        = blockHeight_;\n        totalPowerGeneraton = totalPowerGeneraton_;\n        circulatingSupply  = circulatingSupply_;\n\n        updateCount += 1;\n\n        emit DataSaved(blockHash, cid, blockHeight, totalPowerGeneraton, circulatingSupply);\n    }\n}"
    },
    "contracts/Dex/Governance/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IMerkleDistributor.sol\";\n\ncontract MerkleDistributor is IMerkleDistributor {\n    address public immutable override token;\n    bytes32 public immutable override merkleRoot;\n\n    // This is a packed array of booleans.\n    mapping(uint256 => uint256) private claimedBitMap;\n\n    constructor(address token_, bytes32 merkleRoot_) {\n        token = token_;\n        merkleRoot = merkleRoot_;\n    }\n\n    function isClaimed(uint256 index) public view override returns (bool) {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    function _setClaimed(uint256 index) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n    }\n\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override {\n        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\n\n        // Mark it claimed and send the token.\n        _setClaimed(index);\n        require(IERC20(token).transfer(account, amount), 'MerkleDistributor: Transfer failed.');\n\n        emit Claimed(index, account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/Dex/Governance/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMerkleDistributor {\n    // Returns the address of the token distributed by this contract.\n    function token() external view returns (address);\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\n    function merkleRoot() external view returns (bytes32);\n    // Returns true if the index has been marked claimed.\n    function isClaimed(uint256 index) external view returns (bool);\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\n\n    // This event is triggered whenever a call to #claim succeeds.\n    event Claimed(uint256 index, address account, uint256 amount);\n}"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 0
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}