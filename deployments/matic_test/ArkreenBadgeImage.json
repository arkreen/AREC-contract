{
  "address": "0x65c78eaC38aa9B5eaa871d6cd22598E011aC1164",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "offsetEntity",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "offsetEntityID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "offsetMessage",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "creationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "offsetTotalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "offsetIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct OffsetRecord",
          "name": "offsetRecord",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "idsOfAREC",
          "type": "uint256[]"
        }
      ],
      "name": "getBadgeSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xba1ae09ca7ff00e3643c09b6fc68800795994d1dc73cdc05772e555a849998c1",
  "receipt": {
    "to": null,
    "from": "0x364a71eE7a1C9EB295a4F4850971a1861E9d3c7D",
    "contractAddress": "0x65c78eaC38aa9B5eaa871d6cd22598E011aC1164",
    "transactionIndex": 1,
    "gasUsed": "2326016",
    "logsBloom": "0x
    "blockHash": "0xa9ceff7569a7e427876a2ceeeac58f1b7eb0795c3147f3217270be072cce8f4f",
    "transactionHash": "0xba1ae09ca7ff00e3643c09b6fc68800795994d1dc73cdc05772e555a849998c1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 44259223,
        "transactionHash": "0xba1ae09ca7ff00e3643c09b6fc68800795994d1dc73cdc05772e555a849998c1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000364a71ee7a1c9eb295a4f4850971a1861e9d3c7d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003194fece739e00000000000000000000000000000000000000000000000000098ccd704f60743b0000000000000000000000000000000000000000000035b55bba14c64fd90292000000000000000000000000000000000000000000000000095b387180ecd63b0000000000000000000000000000000000000000000035b55beba9c51e4ca092",
        "logIndex": 3,
        "blockHash": "0xa9ceff7569a7e427876a2ceeeac58f1b7eb0795c3147f3217270be072cce8f4f"
      }
    ],
    "blockNumber": 44259223,
    "cumulativeGasUsed": "2408789",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a55d83bafc9da2a223c25e37c4e86f72",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offsetEntity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"offsetEntityID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"offsetMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsetTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"offsetIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OffsetRecord\",\"name\":\"offsetRecord\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idsOfAREC\",\"type\":\"uint256[]\"}],\"name\":\"getBadgeSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArkreenBadgeImage.sol\":\"ArkreenBadgeImage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/ArkreenBadgeImage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/FormattedStrings.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./libraries/BytesLib.sol\\\";\\r\\n\\r\\nimport \\\"./ArkreenBadgeType.sol\\\";\\r\\n\\r\\n// Import this file to use console.log\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract ArkreenBadgeImage {\\r\\n \\r\\n    using Strings for uint128;\\r\\n    using Strings for uint256;\\r\\n    using Strings for address;\\r\\n    using FormattedStrings for uint256;\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    function _decimalTruncate(string memory _str, uint256 decimalDigits) internal pure returns (string memory) {\\r\\n        bytes memory strBytes = bytes(_str);\\r\\n        uint256 dotIndex = strBytes.length;\\r\\n\\r\\n        for (uint256 i = 0; i < strBytes.length; i++) {\\r\\n            if (strBytes[i] == \\\".\\\") {\\r\\n\\r\\n                if(i + decimalDigits + 1 < strBytes.length){\\r\\n                    dotIndex = i + decimalDigits + 1;\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bytes memory result = new bytes(dotIndex);\\r\\n        for (uint256 i = 0; i < dotIndex; i++) {\\r\\n            result[i] = strBytes[i];\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n\\r\\n    function toFixedPoint(uint256 value, uint256 decimal) internal pure returns (string memory) {\\r\\n        require(decimal <= 18, \\\"Strings: Fixed point too long\\\");\\r\\n        string memory valueString = value.toString();\\r\\n        \\r\\n        if (decimal == 0) return valueString;\\r\\n\\r\\n        bytes memory valueBytes = bytes(valueString);\\r\\n        uint256 length = valueBytes.length;\\r\\n\\r\\n        bytes memory resulInBytes;\\r\\n        if (length > decimal) {\\r\\n            resulInBytes = valueBytes.slice(0, length - decimal).concat(\\\".\\\")                // Integer part\\r\\n                                .concat(valueBytes.slice(length - decimal, decimal));       // Decimal part\\r\\n        } else {\\r\\n            resulInBytes = bytes(\\\"0.000000000000000000\\\").slice(0, decimal + 2 - length)     // Maximum 18 decimals\\r\\n                                .concat(valueBytes);\\r\\n        }\\r\\n        return string(resulInBytes);\\r\\n    }\\r\\n\\r\\n    function getBadgeSVG(\\r\\n        uint256 tokenId,\\r\\n        OffsetRecord calldata offsetRecord,\\r\\n        uint256 actionType,\\r\\n        uint256[] calldata idsOfAREC\\r\\n    ) external pure returns(string memory) {\\r\\n\\r\\n        bytes memory dataURI;\\r\\n        string memory tokenString = tokenId.toString();\\r\\n\\r\\n        {\\r\\n            string memory energyInBadge = _decimalTruncate(toFixedPoint(offsetRecord.offsetTotalAmount, 9), 3);\\r\\n            address beneficiary = offsetRecord.beneficiary;\\r\\n            if (beneficiary == address(0))  beneficiary = offsetRecord.offsetEntity;\\r\\n\\r\\n            string memory svgData = getBadgeSVGImage(beneficiary.toHexString(), energyInBadge);\\r\\n\\r\\n            dataURI = abi.encodePacked(\\r\\n                            '{\\\"name\\\":\\\"ArkreenClimateBadge #',\\r\\n                            tokenString,\\r\\n                            '\\\",\\\"description\\\":\\\"',\\r\\n                            'Proof of the climate actions for carbon offset.',\\r\\n                            '\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\r\\n                            svgData,\\r\\n                            '\\\",\\\"attributes\\\":[{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"AREC Badge ID\\\",\\\"value\\\":',\\r\\n                            tokenString,\\r\\n                            '},{\\\"trait_type\\\":\\\"Renewable Energy\\\",\\\"value\\\":\\\"',\\r\\n                            energyInBadge,\\r\\n                            ' kWh\\\"},{\\\"display_type\\\":\\\"date\\\",\\\"trait_type\\\":\\\"AREC Badge Time\\\",\\\"value\\\":',\\r\\n                            offsetRecord.creationTime.toString(),\\r\\n                            '},'       \\r\\n                        );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            string memory typeAction;\\r\\n            if (actionType == 1) { \\r\\n                typeAction ='Redeem';\\r\\n            } else if (actionType == 2) {\\r\\n                typeAction = 'Offset';\\r\\n            } else {\\r\\n                typeAction = 'Redeem,Offset';\\r\\n            }\\r\\n\\r\\n            dataURI = abi.encodePacked(dataURI,\\r\\n                            '{\\\"trait_type\\\":\\\"Climate Action Type\\\",\\\"value\\\":\\\"',\\r\\n                            typeAction,\\r\\n                            '\\\"},{\\\"display_type\\\":\\\"number\\\",\\\"trait_type\\\":\\\"Climate Action Number\\\",\\\"value\\\":',\\r\\n                            offsetRecord.offsetIds.length.toString(),\\r\\n                            '},'\\r\\n                        );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            bytes memory actionIds;\\r\\n            for (uint256 index=0; index < offsetRecord.offsetIds.length; index++) {\\r\\n                if (index == 0) actionIds = bytes(offsetRecord.offsetIds[0].toString());\\r\\n                else actionIds = actionIds.concat(\\\",\\\").concat(bytes(offsetRecord.offsetIds[index].toString()));\\r\\n            }\\r\\n        \\r\\n            dataURI = abi.encodePacked(dataURI,\\r\\n                            '{\\\"trait_type\\\":\\\"Climate Action IDs\\\",\\\"value\\\":\\\"',\\r\\n                            string(actionIds),\\r\\n                            '\\\"},'\\r\\n                        );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            bytes memory arecNftIds;\\r\\n            for (uint256 index=0; index < idsOfAREC.length; index++) {\\r\\n                if (index==0) arecNftIds = bytes(idsOfAREC[0].toString());\\r\\n                else arecNftIds = arecNftIds.concat(\\\",\\\").concat(bytes(idsOfAREC[index].toString()));\\r\\n            }\\r\\n        \\r\\n            dataURI = abi.encodePacked(dataURI,\\r\\n                            '{\\\"trait_type\\\":\\\"Retired AREC NFTs\\\",\\\"value\\\":\\\"',\\r\\n                            string(arecNftIds),\\r\\n                            '\\\"},'\\r\\n                        );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            bytes memory bytesBadgeFile = 'https://arec.arkreen.com/badges/AREC_Badge_000000.pdf';\\r\\n            bytes memory tokenInBytes = bytes(tokenString);\\r\\n            bytes memory BadgeFile = bytesBadgeFile.slice(0, bytesBadgeFile.length - 4 - tokenInBytes.length)\\r\\n                                        .concat(tokenInBytes.concat('.pdf'));\\r\\n\\r\\n            dataURI = abi.encodePacked(dataURI,\\r\\n                            '{\\\"trait_type\\\":\\\"AREC Badge File\\\",\\\"value\\\":\\\"',\\r\\n                            string(BadgeFile),\\r\\n                            '\\\"}]}'\\r\\n                        );\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(dataURI)));\\r\\n    }\\r\\n\\r\\n    function getBadgeSVGImage(string memory beneficiary, string memory energyInBadge) internal pure returns(string memory) {\\r\\n\\r\\n        bytes memory imgBytes = abi.encodePacked(\\r\\n\\r\\n            '<svg viewBox=\\\"0 0 400 400\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">'\\r\\n                '<defs>'\\r\\n                    '<path id=\\\"center\\\" d=\\\"M0 20,400,20\\\" stroke=\\\"white\\\" fill=\\\"none\\\"/>'\\r\\n                    '<path id=\\\"top\\\" transform=\\\"translate(140,40)\\\" d=\\\"M -70 162 A 50 50 0 1 1 190 162\\\"/>'\\r\\n                    '<path id=\\\"address\\\" transform=\\\"translate(140,40)\\\" d=\\\"M -98 160 A 50 50 0 1 0 218 160\\\"/>'\\r\\n                '</defs>'\\r\\n                '<path'\\r\\n                    ' d=\\\"M178.596 12.8029C191.891 5.3451 208.109 5.34509 221.404 12.8029L236.374 21.2005C242.954 24.8916'\\r\\n                    ' 250.355 26.8745 257.899 26.968L275.062 27.1805C290.305 27.3693 304.35 35.4785 312.135 48.5846L320.901'\\r\\n                    ' 63.3422C324.754 69.8288 330.171 75.2463 336.658 79.0992L351.415 87.865C364.522 95.6498 372.631 109.695'\\r\\n                    ' 372.819 124.938L373.032 142.101C373.125 149.645 375.108 157.046 378.8 163.626L387.197 178.596C394.655'\\r\\n                    ' 191.891 394.655 208.109 387.197 221.404L378.8 236.374C375.108 242.954 373.125 250.355 373.032'\\r\\n                    ' 257.899L372.819 275.062C372.631 290.305 364.522 304.35 351.415 312.135L336.658 320.901C330.171'\\r\\n                    ' 324.754 324.754 330.171 320.901 336.658L312.135 351.415C304.35 364.522 290.305 372.631 275.062'\\r\\n                    ' 372.819L257.899 373.032C250.355 373.125 242.954 375.108 236.374 378.8L221.404 387.197C208.109'\\r\\n                    ' 394.655 191.891 394.655 178.596 387.197L163.626 378.8C157.046 375.108 149.645 373.125 142.101'\\r\\n                    ' 373.032L124.938 372.819C109.695 372.631 95.6498 364.522 87.865 351.415L79.0992 336.658C75.2463'\\r\\n                    ' 330.171 69.8288 324.754 63.3422 320.901L48.5846 312.135C35.4785 304.35 27.3693 290.305 27.1805'\\r\\n                    ' 275.062L26.968 257.899C26.8745 250.355 24.8916 242.954 21.2005 236.374L12.8029 221.404C5.3451'\\r\\n                    ' 208.109 5.34509 191.891 12.8029 178.596L21.2005 163.626C24.8916 157.046 26.8745 149.645 26.968'\\r\\n                    ' 142.101L27.1805 124.938C27.3693 109.695 35.4785 95.6498 48.5846 87.865L63.3422 79.0992C69.8288'\\r\\n                    ' 75.2463 75.2463 69.8288 79.0992 63.3422L87.865 48.5846C95.6498 35.4785 109.695 27.3693 124.938'\\r\\n                    ' 27.1805L142.101 26.968C149.645 26.8745 157.046 24.8916 163.626 21.2005L178.596 12.8029Z\\\"'\\r\\n                    ' fill=\\\"#28282D\\\" stroke=\\\"#404047\\\" strokeWidth=\\\"1.38889\\\"/>'\\r\\n                '<circle cx=\\\"200\\\" cy=\\\"200\\\" r=\\\"166.667\\\" fill=\\\"#28282D\\\" stroke=\\\"#34C46E\\\" strokeWidth=\\\"2.66667\\\"/>'\\r\\n                '<rect x=\\\"88\\\" y=\\\"88\\\" width=\\\"224\\\" height=\\\"224\\\" rx=\\\"112\\\" fill=\\\"#2F2F34\\\"/>'\\r\\n                '<path'\\r\\n                    ' d=\\\"M198.826 167.539L182.368 193.898C180.788 196.429 182.606 199.719 185.588 199.719H244.003C247.357 199.719'\\r\\n                    ' 249.403 196.024 247.626 193.175L205.67 125.971C203.066 121.801 197.007 121.801 194.396 125.971L151.99'\\r\\n                    ' 193.898C150.409 196.429 152.227 199.719 155.209 199.719H164.692C165.175 199.719 165.65 199.596 166.072'\\r\\n                    ' 199.361C166.495 199.127 166.851 198.789 167.106 198.379L198.826 147.565C198.954 147.36 199.132 147.191'\\r\\n                    ' 199.343 147.074C199.555 146.956 199.792 146.895 200.034 146.895C200.276 146.895 200.514 146.956 200.725'\\r\\n                    ' 147.074C200.936 147.191 201.114 147.36 201.242 147.565L222.943 182.326C223.079 182.542 223.154 182.791'\\r\\n                    ' 223.162 183.046C223.169 183.301 223.108 183.553 222.985 183.776C222.861 184 222.68 184.186 222.461'\\r\\n                    ' 184.315C222.241 184.445 221.991 184.513 221.736 184.512H208.711C208.457 184.511 208.209 184.442 207.991'\\r\\n                    ' 184.313C207.773 184.183 207.593 183.997 207.471 183.775C207.348 183.553 207.287 183.301 207.294'\\r\\n                    ' 183.048C207.301 182.794 207.376 182.546 207.51 182.331L208.519 180.711C208.66 180.484 208.735 180.222'\\r\\n                    ' 208.735 179.955C208.735 179.688 208.66 179.426 208.519 179.2L201.242 167.544C201.115 167.339 200.937'\\r\\n                    ' 167.169 200.726 167.051C200.515 166.933 200.277 166.871 200.035 166.871C199.794 166.87 199.556 166.932'\\r\\n                    ' 199.344 167.048C199.133 167.165 198.955 167.334 198.826 167.539Z\\\"'\\r\\n                    ' fill=\\\"#34C46E\\\"/>'\\r\\n                '<text text-anchor=\\\"middle\\\" fill=\\\"#34C46E\\\">'\\r\\n                    '<textPath font-family=\\\"Montserrat\\\" xlink:href=\\\"#top\\\" startOffset=\\\"50%\\\" font-size=\\\"24\\\" font-weight=\\\"700\\\">'\\r\\n                        'Arkreen Climate Action Badge'\\r\\n                    '</textPath>'\\r\\n                '</text>'\\r\\n                '<text text-anchor=\\\"middle\\\" fill=\\\"#34C46E\\\">'\\r\\n                    '<textPath font-family=\\\"Montserrat\\\" xlink:href=\\\"#address\\\" startOffset=\\\"50%\\\" font-size=\\\"16\\\" font-weight=\\\"500\\\">',\\r\\n                        beneficiary,\\r\\n                    '</textPath>'\\r\\n                '</text>'\\r\\n                '<g transform=\\\"translate(0,227)\\\">'\\r\\n                    '<text font-family=\\\"Montserrat\\\" font-size=\\\"26px\\\" font-weight=\\\"700\\\" fill=\\\"white\\\" text-anchor=\\\"middle\\\" dominant-baseline=\\\"middle\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">',\\r\\n                            energyInBadge,\\r\\n                            ' ART'\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n                '<g transform=\\\"translate(0,253)\\\">'\\r\\n                    '<rect width=\\\"400\\\" height=\\\"40\\\"/>'\\r\\n                    '<text font-family=\\\"Montserrat\\\" font-size=\\\"12px\\\" font-weight=\\\"400\\\" fill=\\\"#7F7F8D\\\" text-anchor=\\\"middle\\\" dominant-baseline=\\\"middle\\\">'\\r\\n                        '<textPath xlink:href=\\\"#center\\\" startOffset=\\\"50%\\\">'\\r\\n                            'Offset'\\r\\n                        '</textPath>'\\r\\n                    '</text>'\\r\\n                '</g>'\\r\\n            '</svg>'\\r\\n        );\\r\\n\\r\\n        return  string(Base64.encode(imgBytes));\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7a92597d5ea4a4780cbcfcb242b45e850d5068f06f86a4924d5f458791910cfa\",\"license\":\"MIT\"},\"contracts/ArkreenBadgeType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct OffsetRecord {\\n    address   offsetEntity;\\n    address   beneficiary;\\n    string    offsetEntityID;\\n    string    beneficiaryID;\\n    string    offsetMessage;\\n    uint256   creationTime;\\n    uint256   offsetTotalAmount;\\n    uint256[] offsetIds;\\n}\\n/**\\n * @dev Detailed offset info, both applicable for REC NFT and REC token.\\n */\\nstruct OffsetAction {\\n    address offsetEntity;\\n    address issuerREC;                    // the ERC20 token can be referred from registed issuer address\\n    uint128 amount;\\n    uint64  tokenId;                      // id of the REC NFT, = 0 for REC ERC20 token\\n    uint56  createdAt;\\n    bool    bClaimed;\\n}\\nstruct OffsetDetail {\\n    uint64  tokenId;                      // id of the REC NFT, = 0 for REC ERC20 token\\n    uint128 amount;\\n}\\n\",\"keccak256\":\"0xe62809e5ce5b9b8384cce9856e481b9dc5fd32522fbe3ae6972dde634ad57fe4\",\"license\":\"MIT\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\",\"keccak256\":\"0x753a18369b28ca59a58032386091df3c90885f8190b87f6c7836caa5c5a39c6d\",\"license\":\"Unlicense\"},\"contracts/libraries/FormattedStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary FormattedStrings {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n            Base on OpenZeppelin `toString` method from `String` library\\r\\n     */\\r\\n    function toFormattedString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        uint256 pos;\\r\\n        uint256 comas = digits / 3;\\r\\n        digits = digits + (digits % 3 == 0 ? comas - 1 : comas);\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            if (pos == 3) {\\r\\n                buffer[digits] = \\\",\\\";\\r\\n                pos = 0;\\r\\n            } else {\\r\\n                buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n                value /= 10;\\r\\n                pos++;\\r\\n            }\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xffec6eb0cf969d70dab768616277c363c4a170e13993d6854ebbf7edc10b42c3\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0xb84058fe812260e89968aff2b7a155ed113b3a6431e43790d25e6b0d164b4050\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}