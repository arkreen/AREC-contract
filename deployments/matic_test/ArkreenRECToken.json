{
  "address": "0x0a451317bb231BA332340EF63d7Da926f669c614",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "offsetEntity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offsetId",
          "type": "uint256"
        }
      ],
      "name": "OffsetFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberAREC",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeSolidify",
          "type": "uint256"
        }
      ],
      "name": "Solidify",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLAG_OFFSET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SKIP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYMBOL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allARECLiquidized",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arkreenRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "climateBuilder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "commitOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offsetActionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "commitOffsetFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offsetActionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "getARECInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numAREC",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ARECID",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "amountREC",
              "type": "uint128"
            }
          ],
          "internalType": "struct ARECAmount[]",
          "name": "amountAREC",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "arkRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuerREC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestARECID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "offsetEntityID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "beneficiaryID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "offsetMessage",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "offsetAndMintCertificate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratioFeeToSolidify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratioLiquidizedFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiverFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        }
      ],
      "name": "setClimateBuilder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "setIssuerREC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "setRatioFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "setRatioFeeToSolidify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "setReceiverFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setTriggerAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "solidify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "solidifiedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberAREC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeSolidify",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidized",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerUpgradeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43623ed3d3f3bf6d24cf4fc8f61cfd47ef215b390677887da024f111ab527dc2",
  "receipt": {
    "to": null,
    "from": "0xB53B96e1eF29cB14313c18Fa6374AB87df59BcD9",
    "contractAddress": "0x0a451317bb231BA332340EF63d7Da926f669c614",
    "transactionIndex": 5,
    "gasUsed": "3289363",
    "logsBloom": "0x
    "blockHash": "0x6c8e6c98eef79c7215436120e7a5494a82a9979be5c09961c89420a0b74f4bca",
    "transactionHash": "0x43623ed3d3f3bf6d24cf4fc8f61cfd47ef215b390677887da024f111ab527dc2",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 43468593,
        "transactionHash": "0x43623ed3d3f3bf6d24cf4fc8f61cfd47ef215b390677887da024f111ab527dc2",
        "address": "0x0a451317bb231BA332340EF63d7Da926f669c614",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 21,
        "blockHash": "0x6c8e6c98eef79c7215436120e7a5494a82a9979be5c09961c89420a0b74f4bca"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43468593,
        "transactionHash": "0x43623ed3d3f3bf6d24cf4fc8f61cfd47ef215b390677887da024f111ab527dc2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b53b96e1ef29cb14313c18fa6374ab87df59bcd9",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000226197ad138dd500000000000000000000000000000000000000000000000008115529862950460000000000000000000000000000000000000000000000e75c36b178a8a58a5e00000000000000000000000000000000000000000000000007eef391d915c2710000000000000000000000000000000000000000000000e75c59131055b91833",
        "logIndex": 22,
        "blockHash": "0x6c8e6c98eef79c7215436120e7a5494a82a9979be5c09961c89420a0b74f4bca"
      }
    ],
    "blockNumber": 43468593,
    "cumulativeGasUsed": "4055356",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f6e2bce8d0c3fa681a5f093d13af27c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offsetEntity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offsetId\",\"type\":\"uint256\"}],\"name\":\"OffsetFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberAREC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeSolidify\",\"type\":\"uint256\"}],\"name\":\"Solidify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLAG_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SKIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allARECLiquidized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arkreenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"climateBuilder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"commitOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offsetActionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"commitOffsetFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offsetActionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getARECInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numAREC\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ARECID\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amountREC\",\"type\":\"uint128\"}],\"internalType\":\"struct ARECAmount[]\",\"name\":\"amountAREC\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"arkRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerREC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestARECID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"offsetEntityID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"offsetMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"offsetAndMintCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioFeeToSolidify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioLiquidizedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"name\":\"setClimateBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"setIssuerREC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setRatioFeeToSolidify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setReceiverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTriggerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"solidify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"solidifiedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberAREC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSolidify\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidized\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerUpgradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"commitOffset(uint256)\":{\"details\":\"Offset the RE token by burning the tokens\"},\"commitOffsetFrom(address,uint256)\":{\"details\":\"Third party contract triggers the RE offset in the approval of the owner\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getARECInfo(uint256)\":{\"details\":\"set the ratio of liquidization fee\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"offsetAndMintCertificate(address,string,string,string,uint256)\":{\"details\":\"Offset the RE token and mint a certificate in the single transaction.\",\"params\":{\"amount\":\"Amount to offset and issue an NFT certificate for.\",\"beneficiary\":\"Beneficiary address for whom the RE was offset.\",\"beneficiaryID\":\"ID string of the beneficiary.\",\"offsetEntityID\":\"ID string of the offset entity.\",\"offsetMessage\":\"Message to illustrate the offset intention.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Receive hook to liquidize Arkreen RE Certificate into RE ERC20 Token\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setIssuerREC(address)\":{\"details\":\"Change the REC issuance address\"},\"setRatioFee(uint256)\":{\"details\":\"set the ratio of liquidization fee\"},\"setRatioFeeToSolidify(uint256)\":{\"details\":\"set the ratio of solidify fee to Solidify from ART to AREC\"},\"setReceiverFee(address)\":{\"details\":\"set the receiver of liquidization fee\"},\"solidify(uint256)\":{\"details\":\"Solidify the ART token to AREC NFT.\",\"params\":{\"amount\":\"The amount requesting to solidify\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArkreenRECToken.sol\":\"ArkreenRECToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"contracts/ArkreenRECIssuanceType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nenum RECStatus {\\n  Pending,            // 0\\n  Rejected,           // 1\\n  Cancelled,          // 2\\n  Certified,          // 3\\n  Retired,            // 4\\n  Liquidized          // 5\\n}\\n\\nstruct Signature {\\n    address     token;\\n    uint256     value;\\n    uint256     deadline;  \\n    uint8       v;\\n    bytes32     r;\\n    bytes32     s;              \\n}\\n\\nstruct PayInfo {\\n    address     token;\\n    uint256     value;\\n}\\n\\nstruct RECRequest {\\n    address   issuer;\\n    uint32    startTime;\\n    uint32    endTime;\\n    uint128   amountREC;\\n    string    cID;\\n    string    region;      \\n    string    url;\\n    string    memo;\\n} \\n\\nstruct RECData {\\n    address   issuer;\\n    string    serialNumber;\\n    address   minter;\\n    uint32    startTime;\\n    uint32    endTime;\\n    uint128   amountREC;\\n    uint8     status;\\n    string    cID;\\n    string    region;\\n    string    url;\\n    string    memo;\\n    uint16    idAsset;\\n}\\n\\nstruct ARECAmount {\\n    uint256   ARECID;\\n    uint128   amountREC;\\n}\\n\\nstruct RECMintPrice {\\n    address   token;\\n    uint256   value;\\n}\\n\",\"keccak256\":\"0x04ba2a53b7a28caa7a38ca6c6cef6b2fd59085dd88e683166960ba2a5f1ba94c\",\"license\":\"MIT\"},\"contracts/ArkreenRECToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\r\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\r\\n//import '@openzeppelin/contracts/access/AccessControl.sol';\\r\\n\\r\\nimport \\\"./ArkreenRECIssuanceType.sol\\\";\\r\\nimport \\\"./interfaces/IArkreenRECIssuance.sol\\\";\\r\\nimport \\\"./interfaces/IArkreenRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IArkreenBadge.sol\\\";\\r\\nimport \\\"./interfaces/IPausable.sol\\\";\\r\\n\\r\\n// Import this file to use console.log\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract ArkreenRECToken is\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable,\\r\\n    ERC20Upgradeable,\\r\\n    IERC721Receiver\\r\\n{\\r\\n    // using SafeMath for uint256;    // seems not necessary\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    // Public constant variables\\r\\n    string public constant NAME = 'Arkreen REC Token';\\r\\n    string public constant SYMBOL = 'ART';\\r\\n\\r\\n    uint256 public constant MAX_SKIP = 20;\\r\\n    uint256 public constant FLAG_OFFSET = 1<<64;\\r\\n\\r\\n    // Public variables\\r\\n    address public arkreenRegistry;           // Registry contract storing Arkreen contracts   \\r\\n    address public issuerREC;                 // Address of issuer of the original REC pre-liquidized    \\r\\n    uint256 public totalLiquidized;           // Total amount of REC that is liquidized\\r\\n    uint256 public totalOffset;               // Total amount of REC that is offset \\r\\n\\r\\n    address public receiverFee;                // Receiver address to receive the liquidization fee\\r\\n    uint256 public ratioLiquidizedFee;         // Percentage in basis point (10000) of the liquidization fee\\r\\n\\r\\n    mapping(uint256 => uint256) public allARECLiquidized;   // Loop of all AREC ID: 1st-> 2nd-> ..-> last-> 1st\\r\\n    uint256 public latestARECID;                            // NFT ID of the latest AREC added to the loop \\r\\n    uint256 public ratioFeeToSolidify;                      // Percentage in basis point (10000) to charge for solidifying ART to AREC NFT\\r\\n\\r\\n//    uint256 partialARECID;                                // AREC NFT ID partialy offset\\r\\n//    uint256 partialAvailableAmount;                       // Amount available for partial offset\\r\\n    uint256 public triggerUpgradeAmount;                    // The amount to trigger solidify upgrade\\r\\n    address public climateBuilder;\\r\\n\\r\\n    // Events\\r\\n    event OffsetFinished(address indexed offsetEntity, uint256 amount, uint256 offsetId);\\r\\n    event Solidify(address indexed account, uint256 amount, uint256 numberAREC, uint256 feeSolidify);    \\r\\n\\r\\n    // Modifiers\\r\\n    modifier ensure(uint deadline) {\\r\\n        require(deadline >= block.timestamp, 'ART: EXPIRED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!IPausable(arkreenRegistry).paused(), 'ART: Paused');\\r\\n        _;\\r\\n    }\\r\\n  \\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address arkRegistry, address issuer, string calldata name, string calldata symbol) external virtual initializer {\\r\\n        __Ownable_init_unchained();\\r\\n        __UUPSUpgradeable_init();        \\r\\n        if(bytes(symbol).length == 0) {\\r\\n          __ERC20_init_unchained(NAME, SYMBOL);\\r\\n        } else {\\r\\n          __ERC20_init_unchained(name, symbol);          \\r\\n        }\\r\\n        arkreenRegistry = arkRegistry;\\r\\n        issuerREC = issuer;\\r\\n    }\\r\\n\\r\\n    function postUpdate() external onlyProxy onlyOwner \\r\\n    {}\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner\\r\\n    {}    \\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 9;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Offset the RE token by burning the tokens\\r\\n     */\\r\\n    function commitOffset(uint256 amount) public virtual whenNotPaused returns (uint256 offsetActionId) {\\r\\n        offsetActionId = _offset(msg.sender, _msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Third party contract triggers the RE offset in the approval of the owner\\r\\n     */\\r\\n    function commitOffsetFrom(address account, uint256 amount)\\r\\n        external virtual whenNotPaused returns (uint256 offsetActionId) \\r\\n    {\\r\\n        _spendAllowance(account, _msgSender(), amount);\\r\\n        offsetActionId = _offset(account, account, amount);\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n     * @dev Internal offset function of the RE token, the RE tokens are burned\\r\\n     */\\r\\n    function _offset(address account, address owner, uint256 amount) internal virtual returns (uint256 offsetActionId) {\\r\\n\\r\\n        if(totalOffset < triggerUpgradeAmount) {                                // To check whether triggering upgrade\\r\\n            uint256 offsetAmount = triggerUpgradeAmount - totalOffset;\\r\\n            offsetAmount = (offsetAmount > amount) ? amount: offsetAmount;\\r\\n            amount -= offsetAmount;\\r\\n            _burn(account, offsetAmount);\\r\\n\\r\\n            // Track total retirement amount in TCO2 factory\\r\\n            address badgeContractU = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\\r\\n            offsetActionId = IArkreenBadge(badgeContractU).registerOffset(owner, issuerREC, offsetAmount, 0);\\r\\n            totalOffset += offsetAmount;\\r\\n\\r\\n            emit OffsetFinished(owner, offsetAmount, offsetActionId);\\r\\n            if(amount == 0) {\\r\\n                return offsetActionId;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(amount != 0, 'ART: Zero Offset');\\r\\n\\r\\n        address issuanceAREC = IArkreenRegistry(arkreenRegistry).getRECIssuance();\\r\\n        address badgeContract = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\\r\\n\\r\\n        // Track total retirement amount in TCO2 factory\\r\\n        uint256 steps = 0;\\r\\n        uint256 curAREC; \\r\\n        uint256 amountFilled = 0; \\r\\n        uint256 amountRegister;\\r\\n\\r\\n        uint256 partialAvailableAmount;\\r\\n        uint256 partialARECID;\\r\\n\\r\\n        uint256 amountOffset;\\r\\n        uint256 detailsCounter;\\r\\n\\r\\n        (partialAvailableAmount, partialARECID) = IArkreenBadge(badgeContract).getDetailStatus(address(this));\\r\\n\\r\\n        if(amount > partialAvailableAmount) {\\r\\n            while(steps < MAX_SKIP) {\\r\\n                if(partialAvailableAmount == 0) {\\r\\n                    curAREC = allARECLiquidized[latestARECID];        // Get the ID at AREC NFT loop head\\r\\n                    _remove(latestARECID, curAREC);                   // Remove from the loop\\r\\n                    IArkreenRECIssuance(issuanceAREC).safeTransferFrom(address(this), badgeContract, curAREC);  // Send to Badge contract\\r\\n\\r\\n                    (, uint128 amountREC, , ) = IArkreenRECIssuance(issuanceAREC).getRECDataCore(curAREC);\\r\\n                    partialAvailableAmount = amountREC;\\r\\n                    partialARECID = curAREC;\\r\\n                }\\r\\n\\r\\n                if(amount <= partialAvailableAmount) {\\r\\n                    if (steps==0) break;   \\r\\n                    amountRegister = amount;\\r\\n                } else {\\r\\n                    amountRegister = partialAvailableAmount;\\r\\n                }\\r\\n                \\r\\n                (detailsCounter, partialAvailableAmount) = \\r\\n                                IArkreenBadge(badgeContract).registerDetail(amountRegister, partialARECID, (steps==0));\\r\\n                steps++;\\r\\n                amountFilled += amountRegister;\\r\\n                amount -= amountRegister;\\r\\n\\r\\n                if(amount==0) break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        amountOffset = (steps==0) ? amount: amountFilled;\\r\\n        _burn(account, amountOffset);\\r\\n\\r\\n        offsetActionId = IArkreenBadge(badgeContract).registerOffset(owner, issuerREC, amountOffset, FLAG_OFFSET+detailsCounter);\\r\\n        totalOffset += amountOffset;\\r\\n\\r\\n        emit OffsetFinished(owner, amountOffset, offsetActionId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Offset the RE token and mint a certificate in the single transaction.\\r\\n     * @param beneficiary Beneficiary address for whom the RE was offset.\\r\\n     * @param offsetEntityID ID string of the offset entity.\\r\\n     * @param beneficiaryID ID string of the beneficiary.\\r\\n     * @param offsetMessage Message to illustrate the offset intention.\\r\\n     * @param amount Amount to offset and issue an NFT certificate for.\\r\\n     */\\r\\n    function offsetAndMintCertificate(\\r\\n        address         beneficiary,\\r\\n        string calldata offsetEntityID,\\r\\n        string calldata beneficiaryID,\\r\\n        string calldata offsetMessage,\\r\\n        uint256         amount\\r\\n    ) external virtual whenNotPaused {\\r\\n        \\r\\n        // Offset the specified amount\\r\\n        address owner = _msgSender();\\r\\n        uint256 offsetActionId = _offset(msg.sender, owner, amount);     // maybe called from climate operator, so use msg.sender\\r\\n        uint256[] memory offsetActionIds = new uint256[](1);\\r\\n        offsetActionIds[0] = offsetActionId;\\r\\n\\r\\n        // Issue the offset certificate NFT\\r\\n        address badgeContract = IArkreenRegistry(arkreenRegistry).getArkreenRetirement();\\r\\n        IArkreenBadge(badgeContract).mintCertificate(\\r\\n                        owner, beneficiary, offsetEntityID, beneficiaryID, offsetMessage, offsetActionIds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Solidify the ART token to AREC NFT.\\r\\n     * @param amount The amount requesting to solidify\\r\\n     */\\r\\n    function solidify(uint256 amount) external virtual whenNotPaused \\r\\n                returns (uint256 solidifiedAmount, uint256 numberAREC, uint256 feeSolidify) {\\r\\n\\r\\n        require(latestARECID != 0, 'ART: No Liquidized AREC');\\r\\n        bool chargeOn = (receiverFee != address(0)) && (ratioFeeToSolidify != 0);           // To save gas\\r\\n        if(chargeOn) amount = (amount * 10000) / (10000 + ratioFeeToSolidify);             // Substract the solidify fee \\r\\n        \\r\\n        address solidifier = _msgSender();\\r\\n        address issuanceAREC = IArkreenRegistry(arkreenRegistry).getRECIssuance();\\r\\n\\r\\n        uint256 skips = 0;\\r\\n        uint256 curAREC = allARECLiquidized[latestARECID];\\r\\n        uint256 preAREC = latestARECID;\\r\\n\\r\\n        while (skips <= MAX_SKIP) {\\r\\n            (, uint128 amountREC, , ) = IArkreenRECIssuance(issuanceAREC).getRECDataCore(curAREC);\\r\\n            uint256 amountAREC = amountREC;\\r\\n\\r\\n            if(amount < amountAREC) {\\r\\n                require(solidifiedAmount != 0, 'ART: Amount Too Less');                // Must solidify the oldest AREC first\\r\\n                if(curAREC == latestARECID) break;\\r\\n                skips++;\\r\\n                preAREC = curAREC;\\r\\n                curAREC = allARECLiquidized[curAREC];\\r\\n            } else {\\r\\n                IArkreenRECIssuance(issuanceAREC).safeTransferFrom(address(this), solidifier, curAREC);\\r\\n                amount -= amountAREC;\\r\\n                solidifiedAmount += amountAREC;\\r\\n                numberAREC++;\\r\\n                curAREC = _remove(preAREC, curAREC);\\r\\n                if(curAREC == 0) break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _burn(solidifier, solidifiedAmount);                    // solidifiedAmount must be more than 0 here, burn once to save gas\\r\\n        totalLiquidized -= solidifiedAmount;                    // \\r\\n\\r\\n        if(chargeOn) {\\r\\n            feeSolidify = solidifiedAmount * ratioFeeToSolidify / 10000;\\r\\n            _transfer(solidifier, receiverFee, feeSolidify);\\r\\n        }\\r\\n\\r\\n        emit Solidify(solidifier, solidifiedAmount, numberAREC, feeSolidify);      \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove the AREC NFT specified by curAREC from the liquidized list.\\r\\n     * @param preAREC The AREC NFT just previous in the list\\r\\n     * @param curAREC The AREC NFT to remove\\r\\n     * @return nextAREC the next AREC NFT ID if curAREC is not the last in the list\\r\\n     *         otherwise, returns 0 while curAREC is the last in the list\\r\\n     */\\r\\n    function _remove(uint256 preAREC, uint256 curAREC) internal returns (uint256 nextAREC) {\\r\\n        nextAREC = allARECLiquidized[curAREC];\\r\\n        allARECLiquidized[preAREC] = nextAREC;\\r\\n\\r\\n        if(curAREC == latestARECID) {                                   // if remove last AREC\\r\\n            latestARECID = (preAREC == latestARECID) ? 0 : preAREC;     // if the last AREC is the only AREC\\r\\n            nextAREC = 0;\\r\\n        } \\r\\n        delete allARECLiquidized[curAREC];                      // delete the current AREC\\r\\n    }\\r\\n\\r\\n     /// @dev Receive hook to liquidize Arkreen RE Certificate into RE ERC20 Token\\r\\n    function onERC721Received(\\r\\n        address, /* operator */\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata /* data */\\r\\n    ) external virtual override whenNotPaused returns (bytes4) {\\r\\n\\r\\n        // Check calling from REC Manager\\r\\n        require( IArkreenRegistry(arkreenRegistry).getRECIssuance() == msg.sender, 'ART: Not From REC Issuance');\\r\\n\\r\\n        (, uint128 amountREC, uint8 status, ) = IArkreenRECIssuance(msg.sender).getRECDataCore(tokenId);\\r\\n        require(status == uint256(RECStatus.Certified), 'ART: Wrong Status');\\r\\n        \\r\\n        if(latestARECID == 0) {\\r\\n            allARECLiquidized[tokenId] = tokenId;                           // build the loop list\\r\\n            latestARECID = tokenId;\\r\\n        } else {\\r\\n            allARECLiquidized[tokenId] = allARECLiquidized[latestARECID];   // Point to loop head\\r\\n            allARECLiquidized[latestARECID] = tokenId;                      // Add to the loop\\r\\n            latestARECID = tokenId;                                         // refresh the newest AREC\\r\\n        }\\r\\n\\r\\n        totalLiquidized += amountREC;\\r\\n\\r\\n        // Prepare liquidization fee \\r\\n        uint256 fee = 0;\\r\\n        if(ratioLiquidizedFee != 0 && receiverFee != address(0)) {\\r\\n            fee = amountREC * ratioLiquidizedFee / 10000;\\r\\n            _mint(receiverFee, fee);\\r\\n        }\\r\\n\\r\\n        _mint(from, amountREC - fee);\\r\\n\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the ratio of liquidization fee\\r\\n     */     \\r\\n    function getARECInfo(uint256 number) external view returns (uint256 numAREC, ARECAmount[] memory amountAREC) {\\r\\n        amountAREC = new ARECAmount[](number);\\r\\n        if(latestARECID == 0) return (numAREC, amountAREC);\\r\\n\\r\\n        address issuanceAREC = IArkreenRegistry(arkreenRegistry).getRECIssuance();\\r\\n        uint256 curAREC = allARECLiquidized[latestARECID];\\r\\n        for(uint256 index; index < number; index++) {\\r\\n            amountAREC[index].ARECID = curAREC;\\r\\n            (, uint128 amountREC, , ) = IArkreenRECIssuance(issuanceAREC).getRECDataCore(curAREC);\\r\\n            amountAREC[index].amountREC = amountREC;\\r\\n            numAREC ++;\\r\\n            if(curAREC == latestARECID) break;\\r\\n            curAREC = allARECLiquidized[curAREC];\\r\\n        }\\r\\n    }  \\r\\n\\r\\n    function _msgSender() internal override view returns (address signer) {\\r\\n        signer = msg.sender;\\r\\n        if (msg.data.length>=20 && (signer == climateBuilder)) {\\r\\n            assembly {\\r\\n                signer := shr(96,calldataload(sub(calldatasize(),20)))\\r\\n            }\\r\\n        }    \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the ratio of liquidization fee\\r\\n     */     \\r\\n    function setRatioFee(uint256 ratio) external onlyOwner {\\r\\n        require(ratio <10000, 'ART: Wrong Data');\\r\\n        ratioLiquidizedFee = ratio;\\r\\n    }  \\r\\n\\r\\n    /**\\r\\n     * @dev Change the REC issuance address\\r\\n     */     \\r\\n    function setIssuerREC(address issuer) external onlyOwner {\\r\\n        require(issuer != address(0), 'ART: Wrong Address');\\r\\n        issuerREC = issuer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the ratio of solidify fee to Solidify from ART to AREC\\r\\n     */     \\r\\n    function setRatioFeeToSolidify(uint256 ratio) external onlyOwner {\\r\\n        require(ratio <10000, 'ART: Wrong Data');\\r\\n        ratioFeeToSolidify = ratio;\\r\\n    }  \\r\\n\\r\\n    /**\\r\\n     * @dev set the receiver of liquidization fee\\r\\n     */     \\r\\n    function setReceiverFee(address receiver) external onlyOwner {\\r\\n        require(receiver != address(0), 'ART: Wrong Address');\\r\\n        receiverFee = receiver;\\r\\n    }\\r\\n\\r\\n    function setTriggerAmount(uint256 amount) external onlyOwner {\\r\\n        triggerUpgradeAmount = amount;\\r\\n    }\\r\\n\\r\\n    function setClimateBuilder(address builder) external onlyOwner {\\r\\n        climateBuilder = builder;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc465e99237e6860e94ec84bd21db2c50021668a4e8b546f76c1a5c766b6e23a1\",\"license\":\"MIT\"},\"contracts/interfaces/IArkreenBadge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IArkreenBadge {\\n    function registerOffset(address, address, uint256, uint256) external returns (uint256);\\n    function mintCertificate(address, address, string calldata, string calldata,\\n                              string calldata, uint256[] calldata) external;\\n    function getDetailStatus(address) external view returns (uint256, uint256);\\n    function registerDetail(uint256 amount, uint256 tokenId, bool bNew) external returns (uint256, uint256);    \\n}\",\"keccak256\":\"0xaf6b37da943c37e892bf3a193d7026e3f329ac8ddc7eec195f824639ba4def66\",\"license\":\"MIT\"},\"contracts/interfaces/IArkreenRECIssuance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../ArkreenRECIssuanceType.sol\\\";\\r\\n\\r\\ninterface IArkreenRECIssuance {\\r\\n    function baseURI() external view returns (string memory);\\r\\n    function getRECData(uint256 tokenId) external view returns (RECData memory);\\r\\n    function getRECDataCore(uint256 tokenId) external view \\r\\n                            returns(address issuer, uint128 amountREC, uint8 status, uint16 idAsset); \\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x394b8c9c9591d2154013c7d36089b29f4d928c9c49e37dcf8bb680f658e7c25d\",\"license\":\"MIT\"},\"contracts/interfaces/IArkreenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IArkreenRegistry {\\n    function getArkreenMiner() external view returns (address);\\n    function recIssuers(address) external view returns (uint256);\\n    function getRECIssuance() external view returns (address);\\n    function isRECIssuer(address) external view returns(bool);\\n    function getRECToken(address, uint256) external view returns (address);\\n    function tokenRECs(address) external view returns (address);  \\n    function getArkreenRetirement() external view returns (address);  \\n    function getAssetInfo(uint256) external view returns (address issuer, address tokenREC,\\n                                    address tokenPay, uint128 rateToIssue, uint16 rateToLiquidize);\\n}\\n\",\"keccak256\":\"0xe17c243050294cd794b0db73f8ae19e63993764bbaa17f56a775c45d6c3ad861\",\"license\":\"MIT\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n    function pause() external;\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x27963ded0e6a3ce6c9dd24eb0622f4052c2c8293b0c7be4076393f85b8fe67c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613a116200012e600039600081816110f401528181611134015281816111e901528181611229015281816112a5015281816113e501526114250152613a116000f3fe60806040526004361061020d5760003560e01c806306fdde0314610212578063095ea7b31461023d5780630fba6a8d1461026d578063150b7a021461028f57806318160ddd146102c85780631f584c69146102e75780632016a0d2146102fc578063203b4d7f1461031c57806323b872dd146103495780632a5618b514610369578063313ce567146103895780633659cfe6146103a557806339509351146103c557806344752c48146103e55780634f1ef2861461040657806352d1902d1461041957806357d8ff001461042e5780635bc42b961461044e5780636a08c8ff1461046e57806370a0823114610485578063715018a6146104bb5780637238fca8146104d05780637f57076f146104e55780638da5cb5b146105135780638fb60a621461052857806395d89b411461054857806398da72171461055d578063a049a0e21461058c578063a06bc83b146105ac578063a3f4df7e146105c3578063a457c2d714610600578063a64b1ef614610620578063a9059cbb14610640578063abf0e08a14610660578063bc70f5f014610676578063c331f2431461068c578063dd62ed3e146106ac578063e4b65f5b146106cc578063e68d8bfd146106ec578063e8fef5711461070c578063f2fde38b1461072c578063f73ee36e1461074c578063f76f8d7814610763578063fc67fc5214610792578063fdb5757a146107c0578063ff611656146107d7575b600080fd5b34801561021e57600080fd5b506102276107ef565b6040516102349190613084565b60405180910390f35b34801561024957600080fd5b5061025d6102583660046130cc565b610881565b6040519015158152602001610234565b34801561027957600080fd5b5061028d610288366004613140565b6108a3565b005b34801561029b57600080fd5b506102af6102aa3660046131f3565b610ab4565b6040516001600160e01b03199091168152602001610234565b3480156102d457600080fd5b5060cb545b604051908152602001610234565b3480156102f357600080fd5b506102d9601481565b34801561030857600080fd5b5061028d610317366004613265565b610de1565b34801561032857600080fd5b5060ff5461033c906001600160a01b031681565b60405161023491906132f9565b34801561035557600080fd5b5061025d61036436600461330d565b611002565b34801561037557600080fd5b506102d96103843660046130cc565b611032565b34801561039557600080fd5b5060405160098152602001610234565b3480156103b157600080fd5b5061028d6103c036600461334e565b6110e9565b3480156103d157600080fd5b5061025d6103e03660046130cc565b6111b2565b3480156103f157600080fd5b506101055461033c906001600160a01b031681565b61028d610414366004613381565b6111de565b34801561042557600080fd5b506102d9611298565b34801561043a57600080fd5b5061028d610449366004613444565b611347565b34801561045a57600080fd5b5061028d61046936600461334e565b611376565b34801561047a57600080fd5b506102d96101045481565b34801561049157600080fd5b506102d96104a036600461334e565b6001600160a01b0316600090815260c9602052604090205490565b3480156104c757600080fd5b5061028d6113c6565b3480156104dc57600080fd5b5061028d6113da565b3480156104f157600080fd5b50610505610500366004613444565b611483565b60405161023492919061345d565b34801561051f57600080fd5b5061033c6116ac565b34801561053457600080fd5b5060fb5461033c906001600160a01b031681565b34801561055457600080fd5b506102276116bb565b34801561056957600080fd5b5061057d610578366004613444565b6116ca565b604051610234939291906134be565b34801561059857600080fd5b5061028d6105a7366004613444565b611b2b565b3480156105b857600080fd5b506102d96101025481565b3480156105cf57600080fd5b506102276040518060400160405280601181526020017020b935b932b2b7102922a1902a37b5b2b760791b81525081565b34801561060c57600080fd5b5061025d61061b3660046130cc565b611b5a565b34801561062c57600080fd5b5060fc5461033c906001600160a01b031681565b34801561064c57600080fd5b5061025d61065b3660046130cc565b611beb565b34801561066c57600080fd5b506102d960fe5481565b34801561068257600080fd5b506102d960fd5481565b34801561069857600080fd5b5061028d6106a736600461334e565b611c03565b3480156106b857600080fd5b506102d96106c73660046134d4565b611c53565b3480156106d857600080fd5b5061028d6106e7366004613444565b611c7e565b3480156106f857600080fd5b5061028d61070736600461334e565b611c8c565b34801561071857600080fd5b506102d9610727366004613444565b611cb7565b34801561073857600080fd5b5061028d61074736600461334e565b611d69565b34801561075857600080fd5b506102d96101005481565b34801561076f57600080fd5b506102276040518060400160405280600381526020016210549560ea1b81525081565b34801561079e57600080fd5b506102d96107ad366004613444565b6101016020526000908152604090205481565b3480156107cc57600080fd5b506102d96101035481565b3480156107e357600080fd5b506102d9600160401b81565b606060cc80546107fe9061350d565b80601f016020809104026020016040519081016040528092919081815260200182805461082a9061350d565b80156108775780601f1061084c57610100808354040283529160200191610877565b820191906000526020600020905b81548152906001019060200180831161085a57829003601f168201915b5050505050905090565b60008061088c611ddf565b9050610899818585611e11565b5060019392505050565b60fb60009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190613548565b1561094f5760405162461bcd60e51b81526004016109469061356a565b60405180910390fd5b6000610959611ddf565b90506000610968338385611f35565b604080516001808252818301909252919250600091906020808301908036833701905050905081816000815181106109a2576109a261358f565b602002602001018181525050600060fb60009054906101000a90046001600160a01b03166001600160a01b031663e95218d86040518163ffffffff1660e01b815260040160206040518083038186803b1580156109fe57600080fd5b505afa158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3691906135a5565b9050806001600160a01b03166360ee6c83858e8e8e8e8e8e8e8b6040518a63ffffffff1660e01b8152600401610a74999897969594939291906135eb565b600060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b50505050505050505050505050505050565b60fb5460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb916004808301926020929190829003018186803b158015610af957600080fd5b505afa158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b319190613548565b15610b4e5760405162461bcd60e51b81526004016109469061356a565b60fb54604080516365e626c360e01b8152905133926001600160a01b0316916365e626c3916004808301926020929190829003018186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca91906135a5565b6001600160a01b031614610c1d5760405162461bcd60e51b815260206004820152601a6024820152794152543a204e6f742046726f6d205245432049737375616e636560301b6044820152606401610946565b604051638967bda360e01b81526004810185905260009081903390638967bda39060240160806040518083038186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c91919061368a565b5090935091505060ff8116600314610cdf5760405162461bcd60e51b81526020600482015260116024820152704152543a2057726f6e672053746174757360781b6044820152606401610946565b61010254610d0457600086815261010160205260409020869055610102869055610d2e565b61010280546000908152610101602052604080822054898352818320558254825290208790558690555b816001600160801b031660fd6000828254610d499190613718565b90915550506101005460009015801590610d6d575060ff546001600160a01b031615155b15610db05761271061010054846001600160801b0316610d8d9190613730565b610d97919061374f565b60ff54909150610db0906001600160a01b0316826125e0565b610dcc88610dc7836001600160801b038716613771565b6125e0565b50630a85bd0160e11b98975050505050505050565b600054610100900460ff1615808015610e015750600054600160ff909116105b80610e225750610e10306126ad565b158015610e22575060005460ff166001145b610e855760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610946565b6000805460ff191660011790558015610ea8576000805461ff0019166101001790555b610eb06126bc565b610eb86126f3565b81610f1057610f0b6040518060400160405280601181526020017020b935b932b2b7102922a1902a37b5b2b760791b8152506040518060400160405280600381526020016210549560ea1b81525061271a565b610f83565b610f8385858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061271a92505050565b60fb80546001600160a01b03808a166001600160a01b03199283161790925560fc8054928916929091169190911790558015610ff9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60008061100d611ddf565b905061101a85828561276d565b6110258585856127e7565b60019150505b9392505050565b60fb5460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb916004808301926020929190829003018186803b15801561107757600080fd5b505afa15801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af9190613548565b156110cc5760405162461bcd60e51b81526004016109469061356a565b6110de836110d8611ddf565b8461276d565b61102b838484611f35565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111325760405162461bcd60e51b815260040161094690613788565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111646129a3565b6001600160a01b03161461118a5760405162461bcd60e51b8152600401610946906137c2565b611193816129bf565b604080516000808252602082019092526111af918391906129c7565b50565b6000806111bd611ddf565b90506108998185856111cf8589611c53565b6111d99190613718565b611e11565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112275760405162461bcd60e51b815260040161094690613788565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112596129a3565b6001600160a01b03161461127f5760405162461bcd60e51b8152600401610946906137c2565b611288826129bf565b611294828260016129c7565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113335760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610946565b5060008051602061399e8339815191525b90565b61134f612b41565b61271081106113705760405162461bcd60e51b8152600401610946906137fc565b61010055565b61137e612b41565b6001600160a01b0381166113a45760405162461bcd60e51b815260040161094690613825565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b6113ce612b41565b6113d86000612bb0565b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156114235760405162461bcd60e51b815260040161094690613788565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114556129a3565b6001600160a01b03161461147b5760405162461bcd60e51b8152600401610946906137c2565b6113d8612b41565b60006060826001600160401b0381111561149f5761149f61336b565b6040519080825280602002602001820160405280156114e457816020015b60408051808201909152600080825260208201528152602001906001900390816114bd5790505b50905061010254600014156114f857915091565b60fb54604080516365e626c360e01b815290516000926001600160a01b0316916365e626c3916004808301926020929190829003018186803b15801561153d57600080fd5b505afa158015611551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157591906135a5565b61010254600090815261010160205260408120549192505b858110156116a457818482815181106115a8576115a861358f565b602090810291909101015152604051638967bda360e01b8152600481018390526000906001600160a01b03851690638967bda39060240160806040518083038186803b1580156115f757600080fd5b505afa15801561160b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162f919061368a565b5050915050808583815181106116475761164761358f565b6020908102919091018101516001600160801b039092169101528561166b81613851565b9650506101025483141561167f57506116a4565b506000918252610101602052604090912054908061169c81613851565b91505061158d565b505050915091565b6033546001600160a01b031690565b606060cd80546107fe9061350d565b600080600060fb60009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171d57600080fd5b505afa158015611731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117559190613548565b156117725760405162461bcd60e51b81526004016109469061356a565b610102546117bc5760405162461bcd60e51b81526020600482015260176024820152764152543a204e6f204c6971756964697a6564204152454360481b6044820152606401610946565b60ff546000906001600160a01b0316158015906117db57506101035415155b9050801561180c57610103546117f390612710613718565b6117ff86612710613730565b611809919061374f565b94505b6000611816611ddf565b9050600060fb60009054906101000a90046001600160a01b03166001600160a01b03166365e626c36040518163ffffffff1660e01b815260040160206040518083038186803b15801561186857600080fd5b505afa15801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a091906135a5565b610102546000818152610101602052604081205492935091905b60148311611a7b57604051638967bda360e01b8152600481018390526000906001600160a01b03861690638967bda39060240160806040518083038186803b15801561190557600080fd5b505afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d919061368a565b50909250506001600160801b0382169050808c10156119d3578a61199a5760405162461bcd60e51b81526020600482015260146024820152734152543a20416d6f756e7420546f6f204c65737360601b6044820152606401610946565b610102548414156119ac575050611a7b565b846119b681613851565b60008681526101016020526040902054909650949350611a749050565b604051632142170760e11b81526001600160a01b038716906342842e0e90611a039030908b90899060040161386c565b600060405180830381600087803b158015611a1d57600080fd5b505af1158015611a31573d6000803e3d6000fd5b50505050808c611a419190613771565b9b50611a4d818c613718565b9a5089611a5981613851565b9a5050611a668385612c02565b935083611a74575050611a7b565b50506118ba565b611a85858a612c59565b8860fd6000828254611a979190613771565b90915550508515611ad957612710610103548a611ab49190613730565b611abe919061374f565b60ff54909750611ad99086906001600160a01b0316896127e7565b846001600160a01b03167f18c117a69c987516afd7871aeb5bbfcf100d633717e0b48bc1644c7babb894ce8a8a8a604051611b16939291906134be565b60405180910390a25050505050509193909250565b611b33612b41565b6127108110611b545760405162461bcd60e51b8152600401610946906137fc565b61010355565b600080611b65611ddf565b90506000611b738286611c53565b905083811015611bd35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610946565b611be08286868403611e11565b506001949350505050565b600080611bf6611ddf565b90506108998185856127e7565b611c0b612b41565b6001600160a01b038116611c315760405162461bcd60e51b815260040161094690613825565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b611c86612b41565b61010455565b611c94612b41565b61010580546001600160a01b0319166001600160a01b0392909216919091179055565b60fb5460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb916004808301926020929190829003018186803b158015611cfc57600080fd5b505afa158015611d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d349190613548565b15611d515760405162461bcd60e51b81526004016109469061356a565b611d6333611d5d611ddf565b84611f35565b92915050565b611d71612b41565b6001600160a01b038116611dd65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610946565b6111af81612bb0565b3360143610801590611dff5750610105546001600160a01b038281169116145b15611344575060131936013560601c90565b6001600160a01b038316611e735760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610946565b6001600160a01b038216611ed45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610946565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006101045460fe5410156120e457600060fe5461010454611f579190613771565b9050828111611f665780611f68565b825b9050611f748184613771565b9250611f808582612c59565b60fb5460408051631d2a431b60e31b815290516000926001600160a01b03169163e95218d8916004808301926020929190829003018186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd91906135a5565b60fc54604051631bfdb9e960e01b81529192506001600160a01b0380841692631bfdb9e992612038928a929116908790600090600401613890565b602060405180830381600087803b15801561205257600080fd5b505af1158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a91906138b9565b92508160fe600082825461209e9190613718565b909155505060408051838152602081018590526001600160a01b0387169160008051602061395e833981519152910160405180910390a2836120e157505061102b565b50505b816121245760405162461bcd60e51b815260206004820152601060248201526f1054950e8816995c9bc813d9999cd95d60821b6044820152606401610946565b60fb54604080516365e626c360e01b815290516000926001600160a01b0316916365e626c3916004808301926020929190829003018186803b15801561216957600080fd5b505afa15801561217d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a191906135a5565b9050600060fb60009054906101000a90046001600160a01b03166001600160a01b031663e95218d86040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f357600080fd5b505afa158015612207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222b91906135a5565b905060008080600090506000806000806000886001600160a01b03166358d9e918306040518263ffffffff1660e01b815260040161226991906132f9565b604080518083038186803b15801561228057600080fd5b505afa158015612294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b891906138d2565b9094509250838c11156124c2575b60148810156124c257836123e557610102546000818152610101602052604090205497506122f49088612c02565b50604051632142170760e11b81526001600160a01b038b16906342842e0e906123259030908d908c9060040161386c565b600060405180830381600087803b15801561233f57600080fd5b505af1158015612353573d6000803e3d6000fd5b5050604051638967bda360e01b8152600481018a9052600092506001600160a01b038d169150638967bda39060240160806040518083038186803b15801561239a57600080fd5b505afa1580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d2919061368a565b50506001600160801b0316955088945050505b838c116123fe57876123f6576124c2565b8b9450612402565b8394505b60405163c693e2a160e01b81526004810186905260248101849052881560448201526001600160a01b038a169063c693e2a1906064016040805180830381600087803b15801561245157600080fd5b505af1158015612465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248991906138d2565b945090508761249781613851565b98506124a590508587613718565b95506124b1858d613771565b9b508b6124bd576124c2565b6122c6565b87156124ce57856124d0565b8b5b91506124dc8e83612c59565b886001600160a01b0316631bfdb9e98e60fc60009054906101000a90046001600160a01b03168585600160401b6125139190613718565b6040518563ffffffff1660e01b81526004016125329493929190613890565b602060405180830381600087803b15801561254c57600080fd5b505af1158015612560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258491906138b9565b9a508160fe60008282546125989190613718565b909155505060408051838152602081018d90526001600160a01b038f169160008051602061395e833981519152910160405180910390a2505050505050505050509392505050565b6001600160a01b0382166126365760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610946565b8060cb60008282546126489190613718565b90915550506001600160a01b038216600090815260c9602052604081208054839290612675908490613718565b90915550506040518181526001600160a01b038316906000906000805160206139e58339815191529060200160405180910390a35050565b6001600160a01b03163b151590565b600054610100900460ff166126e35760405162461bcd60e51b8152600401610946906138f6565b6113d86126ee611ddf565b612bb0565b600054610100900460ff166113d85760405162461bcd60e51b8152600401610946906138f6565b600054610100900460ff166127415760405162461bcd60e51b8152600401610946906138f6565b81516127549060cc906020850190612fbf565b5080516127689060cd906020840190612fbf565b505050565b60006127798484611c53565b905060001981146127e157818110156127d45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610946565b6127e18484848403611e11565b50505050565b6001600160a01b03831661284b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610946565b6001600160a01b0382166128ad5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610946565b6001600160a01b038316600090815260c96020526040902054818110156129255760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610946565b6001600160a01b03808516600090815260c9602052604080822085850390559185168152908120805484929061295c908490613718565b92505081905550826001600160a01b0316846001600160a01b03166000805160206139e58339815191528460405161299691815260200190565b60405180910390a36127e1565b60008051602061399e833981519152546001600160a01b031690565b6111af612b41565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156129fa5761276883612d95565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3357600080fd5b505afa925050508015612a63575060408051601f3d908101601f19168201909252612a60918101906138b9565b60015b612ac65760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610946565b60008051602061399e8339815191528114612b355760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610946565b50612768838383612e2f565b612b49611ddf565b6001600160a01b0316612b5a6116ac565b6001600160a01b0316146113d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610946565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152610101602052604080822054848352912081905561010254821415612c4157610102548314612c365782612c39565b60005b610102555060005b60009182526101016020526040822091909155919050565b6001600160a01b038216612cb95760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610946565b6001600160a01b038216600090815260c9602052604090205481811015612d2d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610946565b6001600160a01b038316600090815260c960205260408120838303905560cb8054849290612d5c908490613771565b90915550506040518281526000906001600160a01b038516906000805160206139e58339815191529060200160405180910390a3505050565b612d9e816126ad565b612e005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610946565b60008051602061399e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612e3883612e54565b600082511180612e455750805b15612768576127e18383612e94565b612e5d81612d95565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060612e9f836126ad565b612efa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610946565b600080846001600160a01b031684604051612f159190613941565b600060405180830381855af49150503d8060008114612f50576040519150601f19603f3d011682016040523d82523d6000602084013e612f55565b606091505b5091509150612f7d82826040518060600160405280602781526020016139be60279139612f86565b95945050505050565b60608315612f9557508161102b565b825115612fa55782518084602001fd5b8160405162461bcd60e51b81526004016109469190613084565b828054612fcb9061350d565b90600052602060002090601f016020900481019282612fed5760008555613033565b82601f1061300657805160ff1916838001178555613033565b82800160010185558215613033579182015b82811115613033578251825591602001919060010190613018565b5061303f929150613043565b5090565b5b8082111561303f5760008155600101613044565b60005b8381101561307357818101518382015260200161305b565b838111156127e15750506000910152565b60208152600082518060208401526130a3816040850160208701613058565b601f01601f19169190910160400192915050565b6001600160a01b03811681146111af57600080fd5b600080604083850312156130df57600080fd5b82356130ea816130b7565b946020939093013593505050565b60008083601f84011261310a57600080fd5b5081356001600160401b0381111561312157600080fd5b60208301915083602082850101111561313957600080fd5b9250929050565b60008060008060008060008060a0898b03121561315c57600080fd5b8835613167816130b7565b975060208901356001600160401b038082111561318357600080fd5b61318f8c838d016130f8565b909950975060408b01359150808211156131a857600080fd5b6131b48c838d016130f8565b909750955060608b01359150808211156131cd57600080fd5b506131da8b828c016130f8565b999c989b50969995989497949560800135949350505050565b60008060008060006080868803121561320b57600080fd5b8535613216816130b7565b94506020860135613226816130b7565b93506040860135925060608601356001600160401b0381111561324857600080fd5b613254888289016130f8565b969995985093965092949392505050565b6000806000806000806080878903121561327e57600080fd5b8635613289816130b7565b95506020870135613299816130b7565b945060408701356001600160401b03808211156132b557600080fd5b6132c18a838b016130f8565b909650945060608901359150808211156132da57600080fd5b506132e789828a016130f8565b979a9699509497509295939492505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561332257600080fd5b833561332d816130b7565b9250602084013561333d816130b7565b929592945050506040919091013590565b60006020828403121561336057600080fd5b813561102b816130b7565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561339457600080fd5b823561339f816130b7565b915060208301356001600160401b03808211156133bb57600080fd5b818501915085601f8301126133cf57600080fd5b8135818111156133e1576133e161336b565b604051601f8201601f19908116603f011681019083821181831017156134095761340961336b565b8160405282815288602084870101111561342257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561345657600080fd5b5035919050565b6000604080830185845260208281860152818651808452606087019150828801935060005b818110156134b0578451805184528401516001600160801b0316848401529383019391850191600101613482565b509098975050505050505050565b9283526020830191909152604082015260600190565b600080604083850312156134e757600080fd5b82356134f2816130b7565b91506020830135613502816130b7565b809150509250929050565b600181811c9082168061352157607f821691505b6020821081141561354257634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561355a57600080fd5b8151801515811461102b57600080fd5b6020808252600b908201526a1054950e8814185d5cd95960aa1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156135b757600080fd5b815161102b816130b7565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808c1683526020818c168185015260c0604085015261361760c085018b8d6135c2565b9150838203606085015261362c82898b6135c2565b915083820360808501526136418287896135c2565b84810360a0860152855180825282870193509082019060005b818110156136765784518352938301939183019160010161365a565b50909e9d5050505050505050505050505050565b600080600080608085870312156136a057600080fd5b84516136ab816130b7565b60208601519094506001600160801b03811681146136c857600080fd5b604086015190935060ff811681146136df57600080fd5b606086015190925061ffff811681146136f757600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561372b5761372b613702565b500190565b600081600019048311821515161561374a5761374a613702565b500290565b60008261376c57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561378357613783613702565b500390565b6020808252602c9082015260008051602061397e83398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c9082015260008051602061397e83398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600f908201526e4152543a2057726f6e67204461746160881b604082015260600190565b6020808252601290820152714152543a2057726f6e67204164647265737360701b604082015260600190565b600060001982141561386557613865613702565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602082840312156138cb57600080fd5b5051919050565b600080604083850312156138e557600080fd5b505080516020909101519092909150565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613953818460208701613058565b919091019291505056fe9176d3df8106cc2d75fc8078c873300ea41184851d4a29d1f1b98c2a30a65be146756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa164736f6c6343000809000a",
  "deployedBytecode": "0x60806040526004361061020d5760003560e01c806306fdde0314610212578063095ea7b31461023d5780630fba6a8d1461026d578063150b7a021461028f57806318160ddd146102c85780631f584c69146102e75780632016a0d2146102fc578063203b4d7f1461031c57806323b872dd146103495780632a5618b514610369578063313ce567146103895780633659cfe6146103a557806339509351146103c557806344752c48146103e55780634f1ef2861461040657806352d1902d1461041957806357d8ff001461042e5780635bc42b961461044e5780636a08c8ff1461046e57806370a0823114610485578063715018a6146104bb5780637238fca8146104d05780637f57076f146104e55780638da5cb5b146105135780638fb60a621461052857806395d89b411461054857806398da72171461055d578063a049a0e21461058c578063a06bc83b146105ac578063a3f4df7e146105c3578063a457c2d714610600578063a64b1ef614610620578063a9059cbb14610640578063abf0e08a14610660578063bc70f5f014610676578063c331f2431461068c578063dd62ed3e146106ac578063e4b65f5b146106cc578063e68d8bfd146106ec578063e8fef5711461070c578063f2fde38b1461072c578063f73ee36e1461074c578063f76f8d7814610763578063fc67fc5214610792578063fdb5757a146107c0578063ff611656146107d7575b600080fd5b34801561021e57600080fd5b506102276107ef565b6040516102349190613084565b60405180910390f35b34801561024957600080fd5b5061025d6102583660046130cc565b610881565b6040519015158152602001610234565b34801561027957600080fd5b5061028d610288366004613140565b6108a3565b005b34801561029b57600080fd5b506102af6102aa3660046131f3565b610ab4565b6040516001600160e01b03199091168152602001610234565b3480156102d457600080fd5b5060cb545b604051908152602001610234565b3480156102f357600080fd5b506102d9601481565b34801561030857600080fd5b5061028d610317366004613265565b610de1565b34801561032857600080fd5b5060ff5461033c906001600160a01b031681565b60405161023491906132f9565b34801561035557600080fd5b5061025d61036436600461330d565b611002565b34801561037557600080fd5b506102d96103843660046130cc565b611032565b34801561039557600080fd5b5060405160098152602001610234565b3480156103b157600080fd5b5061028d6103c036600461334e565b6110e9565b3480156103d157600080fd5b5061025d6103e03660046130cc565b6111b2565b3480156103f157600080fd5b506101055461033c906001600160a01b031681565b61028d610414366004613381565b6111de565b34801561042557600080fd5b506102d9611298565b34801561043a57600080fd5b5061028d610449366004613444565b611347565b34801561045a57600080fd5b5061028d61046936600461334e565b611376565b34801561047a57600080fd5b506102d96101045481565b34801561049157600080fd5b506102d96104a036600461334e565b6001600160a01b0316600090815260c9602052604090205490565b3480156104c757600080fd5b5061028d6113c6565b3480156104dc57600080fd5b5061028d6113da565b3480156104f157600080fd5b50610505610500366004613444565b611483565b60405161023492919061345d565b34801561051f57600080fd5b5061033c6116ac565b34801561053457600080fd5b5060fb5461033c906001600160a01b031681565b34801561055457600080fd5b506102276116bb565b34801561056957600080fd5b5061057d610578366004613444565b6116ca565b604051610234939291906134be565b34801561059857600080fd5b5061028d6105a7366004613444565b611b2b565b3480156105b857600080fd5b506102d96101025481565b3480156105cf57600080fd5b506102276040518060400160405280601181526020017020b935b932b2b7102922a1902a37b5b2b760791b81525081565b34801561060c57600080fd5b5061025d61061b3660046130cc565b611b5a565b34801561062c57600080fd5b5060fc5461033c906001600160a01b031681565b34801561064c57600080fd5b5061025d61065b3660046130cc565b611beb565b34801561066c57600080fd5b506102d960fe5481565b34801561068257600080fd5b506102d960fd5481565b34801561069857600080fd5b5061028d6106a736600461334e565b611c03565b3480156106b857600080fd5b506102d96106c73660046134d4565b611c53565b3480156106d857600080fd5b5061028d6106e7366004613444565b611c7e565b3480156106f857600080fd5b5061028d61070736600461334e565b611c8c565b34801561071857600080fd5b506102d9610727366004613444565b611cb7565b34801561073857600080fd5b5061028d61074736600461334e565b611d69565b34801561075857600080fd5b506102d96101005481565b34801561076f57600080fd5b506102276040518060400160405280600381526020016210549560ea1b81525081565b34801561079e57600080fd5b506102d96107ad366004613444565b6101016020526000908152604090205481565b3480156107cc57600080fd5b506102d96101035481565b3480156107e357600080fd5b506102d9600160401b81565b606060cc80546107fe9061350d565b80601f016020809104026020016040519081016040528092919081815260200182805461082a9061350d565b80156108775780601f1061084c57610100808354040283529160200191610877565b820191906000526020600020905b81548152906001019060200180831161085a57829003601f168201915b5050505050905090565b60008061088c611ddf565b9050610899818585611e11565b5060019392505050565b60fb60009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190613548565b1561094f5760405162461bcd60e51b81526004016109469061356a565b60405180910390fd5b6000610959611ddf565b90506000610968338385611f35565b604080516001808252818301909252919250600091906020808301908036833701905050905081816000815181106109a2576109a261358f565b602002602001018181525050600060fb60009054906101000a90046001600160a01b03166001600160a01b031663e95218d86040518163ffffffff1660e01b815260040160206040518083038186803b1580156109fe57600080fd5b505afa158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3691906135a5565b9050806001600160a01b03166360ee6c83858e8e8e8e8e8e8e8b6040518a63ffffffff1660e01b8152600401610a74999897969594939291906135eb565b600060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b50505050505050505050505050505050565b60fb5460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb916004808301926020929190829003018186803b158015610af957600080fd5b505afa158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b319190613548565b15610b4e5760405162461bcd60e51b81526004016109469061356a565b60fb54604080516365e626c360e01b8152905133926001600160a01b0316916365e626c3916004808301926020929190829003018186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca91906135a5565b6001600160a01b031614610c1d5760405162461bcd60e51b815260206004820152601a6024820152794152543a204e6f742046726f6d205245432049737375616e636560301b6044820152606401610946565b604051638967bda360e01b81526004810185905260009081903390638967bda39060240160806040518083038186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c91919061368a565b5090935091505060ff8116600314610cdf5760405162461bcd60e51b81526020600482015260116024820152704152543a2057726f6e672053746174757360781b6044820152606401610946565b61010254610d0457600086815261010160205260409020869055610102869055610d2e565b61010280546000908152610101602052604080822054898352818320558254825290208790558690555b816001600160801b031660fd6000828254610d499190613718565b90915550506101005460009015801590610d6d575060ff546001600160a01b031615155b15610db05761271061010054846001600160801b0316610d8d9190613730565b610d97919061374f565b60ff54909150610db0906001600160a01b0316826125e0565b610dcc88610dc7836001600160801b038716613771565b6125e0565b50630a85bd0160e11b98975050505050505050565b600054610100900460ff1615808015610e015750600054600160ff909116105b80610e225750610e10306126ad565b158015610e22575060005460ff166001145b610e855760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610946565b6000805460ff191660011790558015610ea8576000805461ff0019166101001790555b610eb06126bc565b610eb86126f3565b81610f1057610f0b6040518060400160405280601181526020017020b935b932b2b7102922a1902a37b5b2b760791b8152506040518060400160405280600381526020016210549560ea1b81525061271a565b610f83565b610f8385858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061271a92505050565b60fb80546001600160a01b03808a166001600160a01b03199283161790925560fc8054928916929091169190911790558015610ff9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60008061100d611ddf565b905061101a85828561276d565b6110258585856127e7565b60019150505b9392505050565b60fb5460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb916004808301926020929190829003018186803b15801561107757600080fd5b505afa15801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af9190613548565b156110cc5760405162461bcd60e51b81526004016109469061356a565b6110de836110d8611ddf565b8461276d565b61102b838484611f35565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156111325760405162461bcd60e51b815260040161094690613788565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111646129a3565b6001600160a01b03161461118a5760405162461bcd60e51b8152600401610946906137c2565b611193816129bf565b604080516000808252602082019092526111af918391906129c7565b50565b6000806111bd611ddf565b90506108998185856111cf8589611c53565b6111d99190613718565b611e11565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112275760405162461bcd60e51b815260040161094690613788565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112596129a3565b6001600160a01b03161461127f5760405162461bcd60e51b8152600401610946906137c2565b611288826129bf565b611294828260016129c7565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113335760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610946565b5060008051602061399e8339815191525b90565b61134f612b41565b61271081106113705760405162461bcd60e51b8152600401610946906137fc565b61010055565b61137e612b41565b6001600160a01b0381166113a45760405162461bcd60e51b815260040161094690613825565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b6113ce612b41565b6113d86000612bb0565b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156114235760405162461bcd60e51b815260040161094690613788565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114556129a3565b6001600160a01b03161461147b5760405162461bcd60e51b8152600401610946906137c2565b6113d8612b41565b60006060826001600160401b0381111561149f5761149f61336b565b6040519080825280602002602001820160405280156114e457816020015b60408051808201909152600080825260208201528152602001906001900390816114bd5790505b50905061010254600014156114f857915091565b60fb54604080516365e626c360e01b815290516000926001600160a01b0316916365e626c3916004808301926020929190829003018186803b15801561153d57600080fd5b505afa158015611551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157591906135a5565b61010254600090815261010160205260408120549192505b858110156116a457818482815181106115a8576115a861358f565b602090810291909101015152604051638967bda360e01b8152600481018390526000906001600160a01b03851690638967bda39060240160806040518083038186803b1580156115f757600080fd5b505afa15801561160b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162f919061368a565b5050915050808583815181106116475761164761358f565b6020908102919091018101516001600160801b039092169101528561166b81613851565b9650506101025483141561167f57506116a4565b506000918252610101602052604090912054908061169c81613851565b91505061158d565b505050915091565b6033546001600160a01b031690565b606060cd80546107fe9061350d565b600080600060fb60009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561171d57600080fd5b505afa158015611731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117559190613548565b156117725760405162461bcd60e51b81526004016109469061356a565b610102546117bc5760405162461bcd60e51b81526020600482015260176024820152764152543a204e6f204c6971756964697a6564204152454360481b6044820152606401610946565b60ff546000906001600160a01b0316158015906117db57506101035415155b9050801561180c57610103546117f390612710613718565b6117ff86612710613730565b611809919061374f565b94505b6000611816611ddf565b9050600060fb60009054906101000a90046001600160a01b03166001600160a01b03166365e626c36040518163ffffffff1660e01b815260040160206040518083038186803b15801561186857600080fd5b505afa15801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a091906135a5565b610102546000818152610101602052604081205492935091905b60148311611a7b57604051638967bda360e01b8152600481018390526000906001600160a01b03861690638967bda39060240160806040518083038186803b15801561190557600080fd5b505afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d919061368a565b50909250506001600160801b0382169050808c10156119d3578a61199a5760405162461bcd60e51b81526020600482015260146024820152734152543a20416d6f756e7420546f6f204c65737360601b6044820152606401610946565b610102548414156119ac575050611a7b565b846119b681613851565b60008681526101016020526040902054909650949350611a749050565b604051632142170760e11b81526001600160a01b038716906342842e0e90611a039030908b90899060040161386c565b600060405180830381600087803b158015611a1d57600080fd5b505af1158015611a31573d6000803e3d6000fd5b50505050808c611a419190613771565b9b50611a4d818c613718565b9a5089611a5981613851565b9a5050611a668385612c02565b935083611a74575050611a7b565b50506118ba565b611a85858a612c59565b8860fd6000828254611a979190613771565b90915550508515611ad957612710610103548a611ab49190613730565b611abe919061374f565b60ff54909750611ad99086906001600160a01b0316896127e7565b846001600160a01b03167f18c117a69c987516afd7871aeb5bbfcf100d633717e0b48bc1644c7babb894ce8a8a8a604051611b16939291906134be565b60405180910390a25050505050509193909250565b611b33612b41565b6127108110611b545760405162461bcd60e51b8152600401610946906137fc565b61010355565b600080611b65611ddf565b90506000611b738286611c53565b905083811015611bd35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610946565b611be08286868403611e11565b506001949350505050565b600080611bf6611ddf565b90506108998185856127e7565b611c0b612b41565b6001600160a01b038116611c315760405162461bcd60e51b815260040161094690613825565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b611c86612b41565b61010455565b611c94612b41565b61010580546001600160a01b0319166001600160a01b0392909216919091179055565b60fb5460408051635c975abb60e01b815290516000926001600160a01b031691635c975abb916004808301926020929190829003018186803b158015611cfc57600080fd5b505afa158015611d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d349190613548565b15611d515760405162461bcd60e51b81526004016109469061356a565b611d6333611d5d611ddf565b84611f35565b92915050565b611d71612b41565b6001600160a01b038116611dd65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610946565b6111af81612bb0565b3360143610801590611dff5750610105546001600160a01b038281169116145b15611344575060131936013560601c90565b6001600160a01b038316611e735760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610946565b6001600160a01b038216611ed45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610946565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006101045460fe5410156120e457600060fe5461010454611f579190613771565b9050828111611f665780611f68565b825b9050611f748184613771565b9250611f808582612c59565b60fb5460408051631d2a431b60e31b815290516000926001600160a01b03169163e95218d8916004808301926020929190829003018186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd91906135a5565b60fc54604051631bfdb9e960e01b81529192506001600160a01b0380841692631bfdb9e992612038928a929116908790600090600401613890565b602060405180830381600087803b15801561205257600080fd5b505af1158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a91906138b9565b92508160fe600082825461209e9190613718565b909155505060408051838152602081018590526001600160a01b0387169160008051602061395e833981519152910160405180910390a2836120e157505061102b565b50505b816121245760405162461bcd60e51b815260206004820152601060248201526f1054950e8816995c9bc813d9999cd95d60821b6044820152606401610946565b60fb54604080516365e626c360e01b815290516000926001600160a01b0316916365e626c3916004808301926020929190829003018186803b15801561216957600080fd5b505afa15801561217d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a191906135a5565b9050600060fb60009054906101000a90046001600160a01b03166001600160a01b031663e95218d86040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f357600080fd5b505afa158015612207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222b91906135a5565b905060008080600090506000806000806000886001600160a01b03166358d9e918306040518263ffffffff1660e01b815260040161226991906132f9565b604080518083038186803b15801561228057600080fd5b505afa158015612294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b891906138d2565b9094509250838c11156124c2575b60148810156124c257836123e557610102546000818152610101602052604090205497506122f49088612c02565b50604051632142170760e11b81526001600160a01b038b16906342842e0e906123259030908d908c9060040161386c565b600060405180830381600087803b15801561233f57600080fd5b505af1158015612353573d6000803e3d6000fd5b5050604051638967bda360e01b8152600481018a9052600092506001600160a01b038d169150638967bda39060240160806040518083038186803b15801561239a57600080fd5b505afa1580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d2919061368a565b50506001600160801b0316955088945050505b838c116123fe57876123f6576124c2565b8b9450612402565b8394505b60405163c693e2a160e01b81526004810186905260248101849052881560448201526001600160a01b038a169063c693e2a1906064016040805180830381600087803b15801561245157600080fd5b505af1158015612465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248991906138d2565b945090508761249781613851565b98506124a590508587613718565b95506124b1858d613771565b9b508b6124bd576124c2565b6122c6565b87156124ce57856124d0565b8b5b91506124dc8e83612c59565b886001600160a01b0316631bfdb9e98e60fc60009054906101000a90046001600160a01b03168585600160401b6125139190613718565b6040518563ffffffff1660e01b81526004016125329493929190613890565b602060405180830381600087803b15801561254c57600080fd5b505af1158015612560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258491906138b9565b9a508160fe60008282546125989190613718565b909155505060408051838152602081018d90526001600160a01b038f169160008051602061395e833981519152910160405180910390a2505050505050505050509392505050565b6001600160a01b0382166126365760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610946565b8060cb60008282546126489190613718565b90915550506001600160a01b038216600090815260c9602052604081208054839290612675908490613718565b90915550506040518181526001600160a01b038316906000906000805160206139e58339815191529060200160405180910390a35050565b6001600160a01b03163b151590565b600054610100900460ff166126e35760405162461bcd60e51b8152600401610946906138f6565b6113d86126ee611ddf565b612bb0565b600054610100900460ff166113d85760405162461bcd60e51b8152600401610946906138f6565b600054610100900460ff166127415760405162461bcd60e51b8152600401610946906138f6565b81516127549060cc906020850190612fbf565b5080516127689060cd906020840190612fbf565b505050565b60006127798484611c53565b905060001981146127e157818110156127d45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610946565b6127e18484848403611e11565b50505050565b6001600160a01b03831661284b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610946565b6001600160a01b0382166128ad5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610946565b6001600160a01b038316600090815260c96020526040902054818110156129255760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610946565b6001600160a01b03808516600090815260c9602052604080822085850390559185168152908120805484929061295c908490613718565b92505081905550826001600160a01b0316846001600160a01b03166000805160206139e58339815191528460405161299691815260200190565b60405180910390a36127e1565b60008051602061399e833981519152546001600160a01b031690565b6111af612b41565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156129fa5761276883612d95565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3357600080fd5b505afa925050508015612a63575060408051601f3d908101601f19168201909252612a60918101906138b9565b60015b612ac65760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610946565b60008051602061399e8339815191528114612b355760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610946565b50612768838383612e2f565b612b49611ddf565b6001600160a01b0316612b5a6116ac565b6001600160a01b0316146113d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610946565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152610101602052604080822054848352912081905561010254821415612c4157610102548314612c365782612c39565b60005b610102555060005b60009182526101016020526040822091909155919050565b6001600160a01b038216612cb95760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610946565b6001600160a01b038216600090815260c9602052604090205481811015612d2d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610946565b6001600160a01b038316600090815260c960205260408120838303905560cb8054849290612d5c908490613771565b90915550506040518281526000906001600160a01b038516906000805160206139e58339815191529060200160405180910390a3505050565b612d9e816126ad565b612e005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610946565b60008051602061399e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612e3883612e54565b600082511180612e455750805b15612768576127e18383612e94565b612e5d81612d95565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060612e9f836126ad565b612efa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610946565b600080846001600160a01b031684604051612f159190613941565b600060405180830381855af49150503d8060008114612f50576040519150601f19603f3d011682016040523d82523d6000602084013e612f55565b606091505b5091509150612f7d82826040518060600160405280602781526020016139be60279139612f86565b95945050505050565b60608315612f9557508161102b565b825115612fa55782518084602001fd5b8160405162461bcd60e51b81526004016109469190613084565b828054612fcb9061350d565b90600052602060002090601f016020900481019282612fed5760008555613033565b82601f1061300657805160ff1916838001178555613033565b82800160010185558215613033579182015b82811115613033578251825591602001919060010190613018565b5061303f929150613043565b5090565b5b8082111561303f5760008155600101613044565b60005b8381101561307357818101518382015260200161305b565b838111156127e15750506000910152565b60208152600082518060208401526130a3816040850160208701613058565b601f01601f19169190910160400192915050565b6001600160a01b03811681146111af57600080fd5b600080604083850312156130df57600080fd5b82356130ea816130b7565b946020939093013593505050565b60008083601f84011261310a57600080fd5b5081356001600160401b0381111561312157600080fd5b60208301915083602082850101111561313957600080fd5b9250929050565b60008060008060008060008060a0898b03121561315c57600080fd5b8835613167816130b7565b975060208901356001600160401b038082111561318357600080fd5b61318f8c838d016130f8565b909950975060408b01359150808211156131a857600080fd5b6131b48c838d016130f8565b909750955060608b01359150808211156131cd57600080fd5b506131da8b828c016130f8565b999c989b50969995989497949560800135949350505050565b60008060008060006080868803121561320b57600080fd5b8535613216816130b7565b94506020860135613226816130b7565b93506040860135925060608601356001600160401b0381111561324857600080fd5b613254888289016130f8565b969995985093965092949392505050565b6000806000806000806080878903121561327e57600080fd5b8635613289816130b7565b95506020870135613299816130b7565b945060408701356001600160401b03808211156132b557600080fd5b6132c18a838b016130f8565b909650945060608901359150808211156132da57600080fd5b506132e789828a016130f8565b979a9699509497509295939492505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561332257600080fd5b833561332d816130b7565b9250602084013561333d816130b7565b929592945050506040919091013590565b60006020828403121561336057600080fd5b813561102b816130b7565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561339457600080fd5b823561339f816130b7565b915060208301356001600160401b03808211156133bb57600080fd5b818501915085601f8301126133cf57600080fd5b8135818111156133e1576133e161336b565b604051601f8201601f19908116603f011681019083821181831017156134095761340961336b565b8160405282815288602084870101111561342257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561345657600080fd5b5035919050565b6000604080830185845260208281860152818651808452606087019150828801935060005b818110156134b0578451805184528401516001600160801b0316848401529383019391850191600101613482565b509098975050505050505050565b9283526020830191909152604082015260600190565b600080604083850312156134e757600080fd5b82356134f2816130b7565b91506020830135613502816130b7565b809150509250929050565b600181811c9082168061352157607f821691505b6020821081141561354257634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561355a57600080fd5b8151801515811461102b57600080fd5b6020808252600b908201526a1054950e8814185d5cd95960aa1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156135b757600080fd5b815161102b816130b7565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808c1683526020818c168185015260c0604085015261361760c085018b8d6135c2565b9150838203606085015261362c82898b6135c2565b915083820360808501526136418287896135c2565b84810360a0860152855180825282870193509082019060005b818110156136765784518352938301939183019160010161365a565b50909e9d5050505050505050505050505050565b600080600080608085870312156136a057600080fd5b84516136ab816130b7565b60208601519094506001600160801b03811681146136c857600080fd5b604086015190935060ff811681146136df57600080fd5b606086015190925061ffff811681146136f757600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561372b5761372b613702565b500190565b600081600019048311821515161561374a5761374a613702565b500290565b60008261376c57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561378357613783613702565b500390565b6020808252602c9082015260008051602061397e83398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c9082015260008051602061397e83398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6020808252600f908201526e4152543a2057726f6e67204461746160881b604082015260600190565b6020808252601290820152714152543a2057726f6e67204164647265737360701b604082015260600190565b600060001982141561386557613865613702565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602082840312156138cb57600080fd5b5051919050565b600080604083850312156138e557600080fd5b505080516020909101519092909150565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613953818460208701613058565b919091019291505056fe9176d3df8106cc2d75fc8078c873300ea41184851d4a29d1f1b98c2a30a65be146756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa164736f6c6343000809000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "commitOffset(uint256)": {
        "details": "Offset the RE token by burning the tokens"
      },
      "commitOffsetFrom(address,uint256)": {
        "details": "Third party contract triggers the RE offset in the approval of the owner"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getARECInfo(uint256)": {
        "details": "set the ratio of liquidization fee"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "offsetAndMintCertificate(address,string,string,string,uint256)": {
        "details": "Offset the RE token and mint a certificate in the single transaction.",
        "params": {
          "amount": "Amount to offset and issue an NFT certificate for.",
          "beneficiary": "Beneficiary address for whom the RE was offset.",
          "beneficiaryID": "ID string of the beneficiary.",
          "offsetEntityID": "ID string of the offset entity.",
          "offsetMessage": "Message to illustrate the offset intention."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Receive hook to liquidize Arkreen RE Certificate into RE ERC20 Token"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setIssuerREC(address)": {
        "details": "Change the REC issuance address"
      },
      "setRatioFee(uint256)": {
        "details": "set the ratio of liquidization fee"
      },
      "setRatioFeeToSolidify(uint256)": {
        "details": "set the ratio of solidify fee to Solidify from ART to AREC"
      },
      "setReceiverFee(address)": {
        "details": "set the receiver of liquidization fee"
      },
      "solidify(uint256)": {
        "details": "Solidify the ART token to AREC NFT.",
        "params": {
          "amount": "The amount requesting to solidify"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 940,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 943,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3851,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 543,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 922,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1219,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1366,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1372,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1374,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 1376,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "_name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 1378,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 1957,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 17112,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "arkreenRegistry",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 17114,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "issuerREC",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 17116,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "totalLiquidized",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 17118,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "totalOffset",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 17120,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "receiverFee",
        "offset": 0,
        "slot": "255",
        "type": "t_address"
      },
      {
        "astId": 17122,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "ratioLiquidizedFee",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 17126,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "allARECLiquidized",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17128,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "latestARECID",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 17130,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "ratioFeeToSolidify",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 17132,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "triggerUpgradeAmount",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 17134,
        "contract": "contracts/ArkreenRECToken.sol:ArkreenRECToken",
        "label": "climateBuilder",
        "offset": 0,
        "slot": "261",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}